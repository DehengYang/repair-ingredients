
diff -Naur ../d4j-repo/Closure/Closure_108/src/com/google/javascript/jscomp/ScopedAliases.java ../d4j-repo/fixed_bugs_dir/Closure/Closure_108/src/com/google/javascript/jscomp/ScopedAliases.java
--- ../d4j-repo/Closure/Closure_108/src/com/google/javascript/jscomp/ScopedAliases.java	2021-01-06 03:47:37.219884613 -0800
+++ ../d4j-repo/fixed_bugs_dir/Closure/Closure_108/src/com/google/javascript/jscomp/ScopedAliases.java	2021-01-06 03:47:40.155984622 -0800
@@ -256,6 +256,7 @@
     private final Map<String, Var> aliases = Maps.newHashMap();
 
     // Also temporary and cleared for each scope.
+    private final Set<Node> injectedDecls = Sets.newHashSet();
 
     // Suppose you create an alias.
     // var x = goog.x;
@@ -313,6 +314,7 @@
 
       if (t.getScopeDepth() == 2) {
         renameNamespaceShadows(t);
+        injectedDecls.clear();
         aliases.clear();
         forbiddenLocals.clear();
         transformation = null;
@@ -429,6 +431,7 @@
             } else {
               grandparent.addChildBefore(newDecl, varNode);
             }
+            injectedDecls.add(newDecl.getFirstChild());
           }
 
           // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
@@ -578,7 +581,7 @@
         // When we inject declarations, we duplicate jsdoc. Make sure
         // we only process that jsdoc once.
         JSDocInfo info = n.getJSDocInfo();
-        if (info != null) {
+        if (info != null && !injectedDecls.contains(n)) {
           for (Node node : info.getTypeNodes()) {
             fixTypeNode(node);
           }