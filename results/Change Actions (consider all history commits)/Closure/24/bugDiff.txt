
diff -Naur ../d4j-repo/Closure/Closure_24/src/com/google/javascript/jscomp/ScopedAliases.java ../d4j-repo/fixed_bugs_dir/Closure/Closure_24/src/com/google/javascript/jscomp/ScopedAliases.java
--- ../d4j-repo/Closure/Closure_24/src/com/google/javascript/jscomp/ScopedAliases.java	2021-01-06 03:41:40.199725171 -0800
+++ ../d4j-repo/fixed_bugs_dir/Closure/Closure_24/src/com/google/javascript/jscomp/ScopedAliases.java	2021-01-06 03:41:42.243794781 -0800
@@ -275,8 +275,8 @@
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+        if (parent.isVar() &&
+            n.hasChildren() && n.getFirstChild().isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);
@@ -284,15 +284,16 @@
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
+        } else if (v.isBleedingFunction()) {
           // Bleeding functions already get a BAD_PARAMETERS error, so just
           // do nothing.
+        } else if (parent.getType() == Token.LP) {
           // Parameters of the scope function also get a BAD_PARAMETERS
           // error.
         } else {
           // TODO(robbyw): Support using locals for private variables.
           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
-        }
       }
     }
 