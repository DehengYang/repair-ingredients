
diff -Naur ../d4j-repo/Closure/Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java ../d4j-repo/fixed_bugs_dir/Closure/Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java
--- ../d4j-repo/Closure/Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2021-01-06 03:48:19.201314594 -0800
+++ ../d4j-repo/fixed_bugs_dir/Closure/Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2021-01-06 03:48:22.225417603 -0800
@@ -694,14 +694,6 @@
 
     Node block = fnNode.getLastChild();
 
-    boolean hasSideEffects = false;
-    if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
-      Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
-      }
-    }
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
@@ -727,9 +719,6 @@
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.