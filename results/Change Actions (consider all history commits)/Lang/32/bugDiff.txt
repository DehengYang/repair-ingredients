
diff -Naur ../d4j-repo/Lang/Lang_32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java ../d4j-repo/fixed_bugs_dir/Lang/Lang_32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java
--- ../d4j-repo/Lang/Lang_32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	2021-01-04 13:15:41.244650408 -0800
+++ ../d4j-repo/fixed_bugs_dir/Lang/Lang_32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	2021-01-04 13:15:44.928788588 -0800
@@ -101,12 +101,7 @@
      * 
      * @since 2.3
      */
-    private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {
-        @Override
-        protected Set<IDKey> initialValue() {
-            return new HashSet<IDKey>();
-        }
-    };
+    private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>();
 
     /*
      * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()
@@ -149,7 +144,8 @@
      * @since 2.3
      */
     static boolean isRegistered(Object value) {
-        return getRegistry().contains(new IDKey(value));
+        Set<IDKey> registry = getRegistry();
+        return registry != null && registry.contains(new IDKey(value));
     }
 
     /**
@@ -519,6 +515,11 @@
      *            The object to register.
      */
     static void register(Object value) {
+        synchronized (HashCodeBuilder.class) {
+            if (getRegistry() == null) {
+                REGISTRY.set(new HashSet<IDKey>());
+            }
+        }
         getRegistry().add(new IDKey(value));
     }
 
@@ -535,7 +536,15 @@
      * @since 2.3
      */
     static void unregister(Object value) {
-        getRegistry().remove(new IDKey(value));
+        Set<IDKey> s = getRegistry();
+        if (s != null) {
+            s.remove(new IDKey(value));
+            synchronized (HashCodeBuilder.class) {
+                if (s.isEmpty()) {
+                    REGISTRY.remove();
+                }
+            }
+        }
     }
 
     /**