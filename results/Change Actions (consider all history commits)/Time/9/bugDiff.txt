
diff -Naur ../d4j-repo/Time/Time_9/src/main/java/org/joda/time/DateTimeZone.java ../d4j-repo/fixed_bugs_dir/Time/Time_9/src/main/java/org/joda/time/DateTimeZone.java
--- ../d4j-repo/Time/Time_9/src/main/java/org/joda/time/DateTimeZone.java	2021-01-06 03:38:30.317259246 -0800
+++ ../d4j-repo/fixed_bugs_dir/Time/Time_9/src/main/java/org/joda/time/DateTimeZone.java	2021-01-06 03:38:31.757308280 -0800
@@ -255,16 +255,19 @@
         if (hoursOffset == 0 && minutesOffset == 0) {
             return DateTimeZone.UTC;
         }
+        if (hoursOffset < -23 || hoursOffset > 23) {
+            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
+        }
         if (minutesOffset < 0 || minutesOffset > 59) {
             throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
         }
         int offset = 0;
         try {
-            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
+            int hoursInMinutes = hoursOffset * 60;
             if (hoursInMinutes < 0) {
-                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
+                minutesOffset = hoursInMinutes - minutesOffset;
             } else {
-                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
+                minutesOffset = hoursInMinutes + minutesOffset;
             }
             offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
         } catch (ArithmeticException ex) {
@@ -280,6 +283,9 @@
      * @return the DateTimeZone object for the offset
      */
     public static DateTimeZone forOffsetMillis(int millisOffset) {
+        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
+            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
+        }
         String id = printOffset(millisOffset);
         return fixedOffsetZone(id, millisOffset);
     }