
diff -Naur ../d4j-repo/Time/Time_17/src/main/java/org/joda/time/DateTimeZone.java ../d4j-repo/fixed_bugs_dir/Time/Time_17/src/main/java/org/joda/time/DateTimeZone.java
--- ../d4j-repo/Time/Time_17/src/main/java/org/joda/time/DateTimeZone.java	2021-01-06 03:38:51.997997483 -0800
+++ ../d4j-repo/fixed_bugs_dir/Time/Time_17/src/main/java/org/joda/time/DateTimeZone.java	2021-01-06 03:38:53.326042704 -0800
@@ -1164,19 +1164,32 @@
         // a bit messy, but will work in all non-pathological cases
         
         // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
+        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
+        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
+        long offsetBefore = getOffset(instantBefore);
+        long offsetAfter = getOffset(instantAfter);
+        if (offsetBefore <= offsetAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
         
         // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        long diff = offsetBefore - offsetAfter;
+        long transition = nextTransition(instantBefore);
+        long overlapStart = transition - diff;
+        long overlapEnd = transition + diff;
+        if (instant < overlapStart || instant >= overlapEnd) {
+          return instant;  // not an overlap
+        }
         
         // calculate result
+        long afterStart = instant - overlapStart;
+        if (afterStart >= diff) {
           // currently in later offset
+          return earlierOrLater ? instant : instant - diff;
+        } else {
           // currently in earlier offset
+          return earlierOrLater ? instant + diff : instant;
+        }
     }
 //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + " " + new DateTime(transitionStart, this));
 