

hASList: 
[INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static, @@long, MethodName:factorial, @@Argus:int+n+ @AT@ 11770 @LENGTH@ 97
---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 11774 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < 0 @AT@ 11774 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 0 @AT@ 11775 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 @AT@ 11778 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for n!") @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 11795 @LENGTH@ 62
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for n!"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for n!") @AT@ 11801 @LENGTH@ 55
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for n!"] @AT@ 11801 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for n!"] @AT@ 11805 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= 0 for n!" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for n!"] @AT@ 11830 @LENGTH@ 25
, DEL VariableDeclarationStatement@@long result=Math.round(factorialDouble(n)); @AT@ 11770 @LENGTH@ 45
---DEL PrimitiveType@@long @AT@ 11770 @LENGTH@ 4
---DEL VariableDeclarationFragment@@result=Math.round(factorialDouble(n)) @AT@ 11775 @LENGTH@ 39
------DEL SimpleName@@result @AT@ 11775 @LENGTH@ 6
------DEL MethodInvocation@@Math.round(factorialDouble(n)) @AT@ 11784 @LENGTH@ 30
---------DEL SimpleName@@Name:Math @AT@ 11784 @LENGTH@ 4
---------DEL SimpleName@@MethodName:round:[factorialDouble(n)] @AT@ 11789 @LENGTH@ 25
------------DEL MethodInvocation@@factorialDouble(n) @AT@ 11795 @LENGTH@ 18
---------------DEL SimpleName@@MethodName:factorialDouble:[n] @AT@ 11795 @LENGTH@ 18
------------------DEL SimpleName@@n @AT@ 11811 @LENGTH@ 1
, UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n > 20 @AT@ 11824 @LENGTH@ 154
---UPD InfixExpression@@result == Long.MAX_VALUE @TO@ n > 20 @AT@ 11828 @LENGTH@ 24
------UPD SimpleName@@result @TO@ n @AT@ 11828 @LENGTH@ 6
------UPD Operator@@== @TO@ > @AT@ 11834 @LENGTH@ 2
------DEL QualifiedName@@Long.MAX_VALUE @AT@ 11838 @LENGTH@ 14
---------DEL SimpleName@@Long @AT@ 11838 @LENGTH@ 4
---------DEL SimpleName@@MAX_VALUE @AT@ 11843 @LENGTH@ 9
------INS NumberLiteral@@20 @TO@ InfixExpression@@result == Long.MAX_VALUE @AT@ 11884 @LENGTH@ 2
, INS IfStatement@@InfixExpression:n < 21 @TO@ MethodDeclaration@@public, static, @@double, MethodName:factorialDouble, @@Argus:int+n+ @AT@ 13027 @LENGTH@ 56
---INS InfixExpression@@n < 21 @TO@ IfStatement@@InfixExpression:n < 21 @AT@ 13031 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 21 @AT@ 13031 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 21 @AT@ 13032 @LENGTH@ 1
------INS NumberLiteral@@21 @TO@ InfixExpression@@n < 21 @AT@ 13035 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:factorial(n) @TO@ IfStatement@@InfixExpression:n < 21 @AT@ 13053 @LENGTH@ 20
------INS MethodInvocation@@factorial(n) @TO@ ReturnStatement@@MethodInvocation:factorial(n) @AT@ 13060 @LENGTH@ 12
---------INS SimpleName@@MethodName:factorial:[n] @TO@ MethodInvocation@@factorial(n) @AT@ 13060 @LENGTH@ 12
------------INS SimpleName@@n @TO@ SimpleName@@MethodName:factorial:[n] @AT@ 13070 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 21 @TO@ MethodDeclaration@@public, static, @@double, MethodName:factorialLog, @@Argus:int+n+ @AT@ 13694 @LENGTH@ 66
---INS InfixExpression@@n < 21 @TO@ IfStatement@@InfixExpression:n < 21 @AT@ 13698 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 21 @AT@ 13698 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 21 @AT@ 13699 @LENGTH@ 1
------INS NumberLiteral@@21 @TO@ InfixExpression@@n < 21 @AT@ 13702 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:Math.log(factorial(n)) @TO@ IfStatement@@InfixExpression:n < 21 @AT@ 13720 @LENGTH@ 30
------INS MethodInvocation@@Math.log(factorial(n)) @TO@ ReturnStatement@@MethodInvocation:Math.log(factorial(n)) @AT@ 13727 @LENGTH@ 22
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(factorial(n)) @AT@ 13727 @LENGTH@ 4
---------INS SimpleName@@MethodName:log:[factorial(n)] @TO@ MethodInvocation@@Math.log(factorial(n)) @AT@ 13732 @LENGTH@ 17
------------INS MethodInvocation@@factorial(n) @TO@ SimpleName@@MethodName:log:[factorial(n)] @AT@ 13736 @LENGTH@ 12
---------------INS SimpleName@@MethodName:factorial:[n] @TO@ MethodInvocation@@factorial(n) @AT@ 13736 @LENGTH@ 12
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:factorial:[n] @AT@ 13746 @LENGTH@ 1
]

CII:
OP1:(INS, IfStatement, null, OP2 OP6)
OP2:   (INS, InfixExpression, OP1, OP3 OP4 OP5)
OP3:      (INS, SimpleName, OP2, null)
OP4:      (INS, Operator, OP2, null)
OP5:      (INS, NumberLiteral, OP2, null)
OP6:   (INS, ThrowStatement, OP1, OP7)
OP7:      (INS, ClassInstanceCreation, OP6, OP8 OP9 OP10)
OP8:         (INS, New, OP7, null)
OP9:         (INS, SimpleType, OP7, null)
OP10:         (INS, StringLiteral, OP7, null)





hASList: 
[INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static, @@long, MethodName:factorial, @@Argus:int+n+ @AT@ 11770 @LENGTH@ 97
---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 11774 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < 0 @AT@ 11774 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 0 @AT@ 11775 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 @AT@ 11778 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for n!") @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 11795 @LENGTH@ 62
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for n!"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for n!") @AT@ 11801 @LENGTH@ 55
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for n!"] @AT@ 11801 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for n!"] @AT@ 11805 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= 0 for n!" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for n!"] @AT@ 11830 @LENGTH@ 25
, DEL VariableDeclarationStatement@@long result=Math.round(factorialDouble(n)); @AT@ 11770 @LENGTH@ 45
---DEL PrimitiveType@@long @AT@ 11770 @LENGTH@ 4
---DEL VariableDeclarationFragment@@result=Math.round(factorialDouble(n)) @AT@ 11775 @LENGTH@ 39
------DEL SimpleName@@result @AT@ 11775 @LENGTH@ 6
------DEL MethodInvocation@@Math.round(factorialDouble(n)) @AT@ 11784 @LENGTH@ 30
---------DEL SimpleName@@Name:Math @AT@ 11784 @LENGTH@ 4
---------DEL SimpleName@@MethodName:round:[factorialDouble(n)] @AT@ 11789 @LENGTH@ 25
------------DEL MethodInvocation@@factorialDouble(n) @AT@ 11795 @LENGTH@ 18
---------------DEL SimpleName@@MethodName:factorialDouble:[n] @AT@ 11795 @LENGTH@ 18
------------------DEL SimpleName@@n @AT@ 11811 @LENGTH@ 1
, UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n > 20 @AT@ 11824 @LENGTH@ 154
---UPD InfixExpression@@result == Long.MAX_VALUE @TO@ n > 20 @AT@ 11828 @LENGTH@ 24
------UPD SimpleName@@result @TO@ n @AT@ 11828 @LENGTH@ 6
------UPD Operator@@== @TO@ > @AT@ 11834 @LENGTH@ 2
------DEL QualifiedName@@Long.MAX_VALUE @AT@ 11838 @LENGTH@ 14
---------DEL SimpleName@@Long @AT@ 11838 @LENGTH@ 4
---------DEL SimpleName@@MAX_VALUE @AT@ 11843 @LENGTH@ 9
------INS NumberLiteral@@20 @TO@ InfixExpression@@result == Long.MAX_VALUE @AT@ 11884 @LENGTH@ 2
, INS IfStatement@@InfixExpression:n < 21 @TO@ MethodDeclaration@@public, static, @@double, MethodName:factorialDouble, @@Argus:int+n+ @AT@ 13027 @LENGTH@ 56
---INS InfixExpression@@n < 21 @TO@ IfStatement@@InfixExpression:n < 21 @AT@ 13031 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 21 @AT@ 13031 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 21 @AT@ 13032 @LENGTH@ 1
------INS NumberLiteral@@21 @TO@ InfixExpression@@n < 21 @AT@ 13035 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:factorial(n) @TO@ IfStatement@@InfixExpression:n < 21 @AT@ 13053 @LENGTH@ 20
------INS MethodInvocation@@factorial(n) @TO@ ReturnStatement@@MethodInvocation:factorial(n) @AT@ 13060 @LENGTH@ 12
---------INS SimpleName@@MethodName:factorial:[n] @TO@ MethodInvocation@@factorial(n) @AT@ 13060 @LENGTH@ 12
------------INS SimpleName@@n @TO@ SimpleName@@MethodName:factorial:[n] @AT@ 13070 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 21 @TO@ MethodDeclaration@@public, static, @@double, MethodName:factorialLog, @@Argus:int+n+ @AT@ 13694 @LENGTH@ 66
---INS InfixExpression@@n < 21 @TO@ IfStatement@@InfixExpression:n < 21 @AT@ 13698 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 21 @AT@ 13698 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 21 @AT@ 13699 @LENGTH@ 1
------INS NumberLiteral@@21 @TO@ InfixExpression@@n < 21 @AT@ 13702 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:Math.log(factorial(n)) @TO@ IfStatement@@InfixExpression:n < 21 @AT@ 13720 @LENGTH@ 30
------INS MethodInvocation@@Math.log(factorial(n)) @TO@ ReturnStatement@@MethodInvocation:Math.log(factorial(n)) @AT@ 13727 @LENGTH@ 22
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(factorial(n)) @AT@ 13727 @LENGTH@ 4
---------INS SimpleName@@MethodName:log:[factorial(n)] @TO@ MethodInvocation@@Math.log(factorial(n)) @AT@ 13732 @LENGTH@ 17
------------INS MethodInvocation@@factorial(n) @TO@ SimpleName@@MethodName:log:[factorial(n)] @AT@ 13736 @LENGTH@ 12
---------------INS SimpleName@@MethodName:factorial:[n] @TO@ MethodInvocation@@factorial(n) @AT@ 13736 @LENGTH@ 12
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:factorial:[n] @AT@ 13746 @LENGTH@ 1
]

CII:
OP1:(DEL, VariableDeclarationStatement, null, OP2 OP3)
OP2:   (DEL, PrimitiveType, OP1, null)
OP3:   (DEL, VariableDeclarationFragment, OP1, OP4 OP5)
OP4:      (DEL, SimpleName, OP3, null)
OP5:      (DEL, MethodInvocation, OP3, OP6 OP7)
OP6:         (DEL, SimpleName, OP5, null)
OP7:         (DEL, SimpleName, OP5, OP8)
OP8:            (DEL, MethodInvocation, OP7, OP9)
OP9:               (DEL, SimpleName, OP8, OP10)
OP10:                  (DEL, SimpleName, OP9, null)





hASList: 
[INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static, @@long, MethodName:factorial, @@Argus:int+n+ @AT@ 11770 @LENGTH@ 97
---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 11774 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < 0 @AT@ 11774 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 0 @AT@ 11775 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 @AT@ 11778 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for n!") @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 11795 @LENGTH@ 62
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for n!"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for n!") @AT@ 11801 @LENGTH@ 55
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for n!"] @AT@ 11801 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for n!"] @AT@ 11805 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= 0 for n!" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for n!"] @AT@ 11830 @LENGTH@ 25
, DEL VariableDeclarationStatement@@long result=Math.round(factorialDouble(n)); @AT@ 11770 @LENGTH@ 45
---DEL PrimitiveType@@long @AT@ 11770 @LENGTH@ 4
---DEL VariableDeclarationFragment@@result=Math.round(factorialDouble(n)) @AT@ 11775 @LENGTH@ 39
------DEL SimpleName@@result @AT@ 11775 @LENGTH@ 6
------DEL MethodInvocation@@Math.round(factorialDouble(n)) @AT@ 11784 @LENGTH@ 30
---------DEL SimpleName@@Name:Math @AT@ 11784 @LENGTH@ 4
---------DEL SimpleName@@MethodName:round:[factorialDouble(n)] @AT@ 11789 @LENGTH@ 25
------------DEL MethodInvocation@@factorialDouble(n) @AT@ 11795 @LENGTH@ 18
---------------DEL SimpleName@@MethodName:factorialDouble:[n] @AT@ 11795 @LENGTH@ 18
------------------DEL SimpleName@@n @AT@ 11811 @LENGTH@ 1
, UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n > 20 @AT@ 11824 @LENGTH@ 154
---UPD InfixExpression@@result == Long.MAX_VALUE @TO@ n > 20 @AT@ 11828 @LENGTH@ 24
------UPD SimpleName@@result @TO@ n @AT@ 11828 @LENGTH@ 6
------UPD Operator@@== @TO@ > @AT@ 11834 @LENGTH@ 2
------DEL QualifiedName@@Long.MAX_VALUE @AT@ 11838 @LENGTH@ 14
---------DEL SimpleName@@Long @AT@ 11838 @LENGTH@ 4
---------DEL SimpleName@@MAX_VALUE @AT@ 11843 @LENGTH@ 9
------INS NumberLiteral@@20 @TO@ InfixExpression@@result == Long.MAX_VALUE @AT@ 11884 @LENGTH@ 2
, INS IfStatement@@InfixExpression:n < 21 @TO@ MethodDeclaration@@public, static, @@double, MethodName:factorialDouble, @@Argus:int+n+ @AT@ 13027 @LENGTH@ 56
---INS InfixExpression@@n < 21 @TO@ IfStatement@@InfixExpression:n < 21 @AT@ 13031 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 21 @AT@ 13031 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 21 @AT@ 13032 @LENGTH@ 1
------INS NumberLiteral@@21 @TO@ InfixExpression@@n < 21 @AT@ 13035 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:factorial(n) @TO@ IfStatement@@InfixExpression:n < 21 @AT@ 13053 @LENGTH@ 20
------INS MethodInvocation@@factorial(n) @TO@ ReturnStatement@@MethodInvocation:factorial(n) @AT@ 13060 @LENGTH@ 12
---------INS SimpleName@@MethodName:factorial:[n] @TO@ MethodInvocation@@factorial(n) @AT@ 13060 @LENGTH@ 12
------------INS SimpleName@@n @TO@ SimpleName@@MethodName:factorial:[n] @AT@ 13070 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 21 @TO@ MethodDeclaration@@public, static, @@double, MethodName:factorialLog, @@Argus:int+n+ @AT@ 13694 @LENGTH@ 66
---INS InfixExpression@@n < 21 @TO@ IfStatement@@InfixExpression:n < 21 @AT@ 13698 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 21 @AT@ 13698 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 21 @AT@ 13699 @LENGTH@ 1
------INS NumberLiteral@@21 @TO@ InfixExpression@@n < 21 @AT@ 13702 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:Math.log(factorial(n)) @TO@ IfStatement@@InfixExpression:n < 21 @AT@ 13720 @LENGTH@ 30
------INS MethodInvocation@@Math.log(factorial(n)) @TO@ ReturnStatement@@MethodInvocation:Math.log(factorial(n)) @AT@ 13727 @LENGTH@ 22
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(factorial(n)) @AT@ 13727 @LENGTH@ 4
---------INS SimpleName@@MethodName:log:[factorial(n)] @TO@ MethodInvocation@@Math.log(factorial(n)) @AT@ 13732 @LENGTH@ 17
------------INS MethodInvocation@@factorial(n) @TO@ SimpleName@@MethodName:log:[factorial(n)] @AT@ 13736 @LENGTH@ 12
---------------INS SimpleName@@MethodName:factorial:[n] @TO@ MethodInvocation@@factorial(n) @AT@ 13736 @LENGTH@ 12
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:factorial:[n] @AT@ 13746 @LENGTH@ 1
]

CII:
OP1:(UPD, IfStatement, null, OP2)
OP2:   (UPD, InfixExpression, OP1, OP3 OP4 OP5 OP8)
OP3:      (UPD, SimpleName, OP2, null)
OP4:      (UPD, Operator, OP2, null)
OP5:      (DEL, QualifiedName, OP2, OP6 OP7)
OP6:         (DEL, SimpleName, OP5, null)
OP7:         (DEL, SimpleName, OP5, null)
OP8:      (INS, NumberLiteral, OP2, null)





hASList: 
[INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static, @@long, MethodName:factorial, @@Argus:int+n+ @AT@ 11770 @LENGTH@ 97
---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 11774 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < 0 @AT@ 11774 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 0 @AT@ 11775 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 @AT@ 11778 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for n!") @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 11795 @LENGTH@ 62
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for n!"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for n!") @AT@ 11801 @LENGTH@ 55
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for n!"] @AT@ 11801 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for n!"] @AT@ 11805 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= 0 for n!" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for n!"] @AT@ 11830 @LENGTH@ 25
, DEL VariableDeclarationStatement@@long result=Math.round(factorialDouble(n)); @AT@ 11770 @LENGTH@ 45
---DEL PrimitiveType@@long @AT@ 11770 @LENGTH@ 4
---DEL VariableDeclarationFragment@@result=Math.round(factorialDouble(n)) @AT@ 11775 @LENGTH@ 39
------DEL SimpleName@@result @AT@ 11775 @LENGTH@ 6
------DEL MethodInvocation@@Math.round(factorialDouble(n)) @AT@ 11784 @LENGTH@ 30
---------DEL SimpleName@@Name:Math @AT@ 11784 @LENGTH@ 4
---------DEL SimpleName@@MethodName:round:[factorialDouble(n)] @AT@ 11789 @LENGTH@ 25
------------DEL MethodInvocation@@factorialDouble(n) @AT@ 11795 @LENGTH@ 18
---------------DEL SimpleName@@MethodName:factorialDouble:[n] @AT@ 11795 @LENGTH@ 18
------------------DEL SimpleName@@n @AT@ 11811 @LENGTH@ 1
, UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n > 20 @AT@ 11824 @LENGTH@ 154
---UPD InfixExpression@@result == Long.MAX_VALUE @TO@ n > 20 @AT@ 11828 @LENGTH@ 24
------UPD SimpleName@@result @TO@ n @AT@ 11828 @LENGTH@ 6
------UPD Operator@@== @TO@ > @AT@ 11834 @LENGTH@ 2
------DEL QualifiedName@@Long.MAX_VALUE @AT@ 11838 @LENGTH@ 14
---------DEL SimpleName@@Long @AT@ 11838 @LENGTH@ 4
---------DEL SimpleName@@MAX_VALUE @AT@ 11843 @LENGTH@ 9
------INS NumberLiteral@@20 @TO@ InfixExpression@@result == Long.MAX_VALUE @AT@ 11884 @LENGTH@ 2
, INS IfStatement@@InfixExpression:n < 21 @TO@ MethodDeclaration@@public, static, @@double, MethodName:factorialDouble, @@Argus:int+n+ @AT@ 13027 @LENGTH@ 56
---INS InfixExpression@@n < 21 @TO@ IfStatement@@InfixExpression:n < 21 @AT@ 13031 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 21 @AT@ 13031 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 21 @AT@ 13032 @LENGTH@ 1
------INS NumberLiteral@@21 @TO@ InfixExpression@@n < 21 @AT@ 13035 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:factorial(n) @TO@ IfStatement@@InfixExpression:n < 21 @AT@ 13053 @LENGTH@ 20
------INS MethodInvocation@@factorial(n) @TO@ ReturnStatement@@MethodInvocation:factorial(n) @AT@ 13060 @LENGTH@ 12
---------INS SimpleName@@MethodName:factorial:[n] @TO@ MethodInvocation@@factorial(n) @AT@ 13060 @LENGTH@ 12
------------INS SimpleName@@n @TO@ SimpleName@@MethodName:factorial:[n] @AT@ 13070 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 21 @TO@ MethodDeclaration@@public, static, @@double, MethodName:factorialLog, @@Argus:int+n+ @AT@ 13694 @LENGTH@ 66
---INS InfixExpression@@n < 21 @TO@ IfStatement@@InfixExpression:n < 21 @AT@ 13698 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 21 @AT@ 13698 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 21 @AT@ 13699 @LENGTH@ 1
------INS NumberLiteral@@21 @TO@ InfixExpression@@n < 21 @AT@ 13702 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:Math.log(factorial(n)) @TO@ IfStatement@@InfixExpression:n < 21 @AT@ 13720 @LENGTH@ 30
------INS MethodInvocation@@Math.log(factorial(n)) @TO@ ReturnStatement@@MethodInvocation:Math.log(factorial(n)) @AT@ 13727 @LENGTH@ 22
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(factorial(n)) @AT@ 13727 @LENGTH@ 4
---------INS SimpleName@@MethodName:log:[factorial(n)] @TO@ MethodInvocation@@Math.log(factorial(n)) @AT@ 13732 @LENGTH@ 17
------------INS MethodInvocation@@factorial(n) @TO@ SimpleName@@MethodName:log:[factorial(n)] @AT@ 13736 @LENGTH@ 12
---------------INS SimpleName@@MethodName:factorial:[n] @TO@ MethodInvocation@@factorial(n) @AT@ 13736 @LENGTH@ 12
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:factorial:[n] @AT@ 13746 @LENGTH@ 1
]

CII:
OP1:(INS, IfStatement, null, OP2 OP6)
OP2:   (INS, InfixExpression, OP1, OP3 OP4 OP5)
OP3:      (INS, SimpleName, OP2, null)
OP4:      (INS, Operator, OP2, null)
OP5:      (INS, NumberLiteral, OP2, null)
OP6:   (INS, ReturnStatement, OP1, OP7)
OP7:      (INS, MethodInvocation, OP6, OP8)
OP8:         (INS, SimpleName, OP7, OP9)
OP9:            (INS, SimpleName, OP8, null)





hASList: 
[INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static, @@long, MethodName:factorial, @@Argus:int+n+ @AT@ 11770 @LENGTH@ 97
---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 11774 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < 0 @AT@ 11774 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 0 @AT@ 11775 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 @AT@ 11778 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for n!") @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 11795 @LENGTH@ 62
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for n!"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for n!") @AT@ 11801 @LENGTH@ 55
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for n!"] @AT@ 11801 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for n!"] @AT@ 11805 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= 0 for n!" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for n!"] @AT@ 11830 @LENGTH@ 25
, DEL VariableDeclarationStatement@@long result=Math.round(factorialDouble(n)); @AT@ 11770 @LENGTH@ 45
---DEL PrimitiveType@@long @AT@ 11770 @LENGTH@ 4
---DEL VariableDeclarationFragment@@result=Math.round(factorialDouble(n)) @AT@ 11775 @LENGTH@ 39
------DEL SimpleName@@result @AT@ 11775 @LENGTH@ 6
------DEL MethodInvocation@@Math.round(factorialDouble(n)) @AT@ 11784 @LENGTH@ 30
---------DEL SimpleName@@Name:Math @AT@ 11784 @LENGTH@ 4
---------DEL SimpleName@@MethodName:round:[factorialDouble(n)] @AT@ 11789 @LENGTH@ 25
------------DEL MethodInvocation@@factorialDouble(n) @AT@ 11795 @LENGTH@ 18
---------------DEL SimpleName@@MethodName:factorialDouble:[n] @AT@ 11795 @LENGTH@ 18
------------------DEL SimpleName@@n @AT@ 11811 @LENGTH@ 1
, UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n > 20 @AT@ 11824 @LENGTH@ 154
---UPD InfixExpression@@result == Long.MAX_VALUE @TO@ n > 20 @AT@ 11828 @LENGTH@ 24
------UPD SimpleName@@result @TO@ n @AT@ 11828 @LENGTH@ 6
------UPD Operator@@== @TO@ > @AT@ 11834 @LENGTH@ 2
------DEL QualifiedName@@Long.MAX_VALUE @AT@ 11838 @LENGTH@ 14
---------DEL SimpleName@@Long @AT@ 11838 @LENGTH@ 4
---------DEL SimpleName@@MAX_VALUE @AT@ 11843 @LENGTH@ 9
------INS NumberLiteral@@20 @TO@ InfixExpression@@result == Long.MAX_VALUE @AT@ 11884 @LENGTH@ 2
, INS IfStatement@@InfixExpression:n < 21 @TO@ MethodDeclaration@@public, static, @@double, MethodName:factorialDouble, @@Argus:int+n+ @AT@ 13027 @LENGTH@ 56
---INS InfixExpression@@n < 21 @TO@ IfStatement@@InfixExpression:n < 21 @AT@ 13031 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 21 @AT@ 13031 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 21 @AT@ 13032 @LENGTH@ 1
------INS NumberLiteral@@21 @TO@ InfixExpression@@n < 21 @AT@ 13035 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:factorial(n) @TO@ IfStatement@@InfixExpression:n < 21 @AT@ 13053 @LENGTH@ 20
------INS MethodInvocation@@factorial(n) @TO@ ReturnStatement@@MethodInvocation:factorial(n) @AT@ 13060 @LENGTH@ 12
---------INS SimpleName@@MethodName:factorial:[n] @TO@ MethodInvocation@@factorial(n) @AT@ 13060 @LENGTH@ 12
------------INS SimpleName@@n @TO@ SimpleName@@MethodName:factorial:[n] @AT@ 13070 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 21 @TO@ MethodDeclaration@@public, static, @@double, MethodName:factorialLog, @@Argus:int+n+ @AT@ 13694 @LENGTH@ 66
---INS InfixExpression@@n < 21 @TO@ IfStatement@@InfixExpression:n < 21 @AT@ 13698 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 21 @AT@ 13698 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 21 @AT@ 13699 @LENGTH@ 1
------INS NumberLiteral@@21 @TO@ InfixExpression@@n < 21 @AT@ 13702 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:Math.log(factorial(n)) @TO@ IfStatement@@InfixExpression:n < 21 @AT@ 13720 @LENGTH@ 30
------INS MethodInvocation@@Math.log(factorial(n)) @TO@ ReturnStatement@@MethodInvocation:Math.log(factorial(n)) @AT@ 13727 @LENGTH@ 22
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(factorial(n)) @AT@ 13727 @LENGTH@ 4
---------INS SimpleName@@MethodName:log:[factorial(n)] @TO@ MethodInvocation@@Math.log(factorial(n)) @AT@ 13732 @LENGTH@ 17
------------INS MethodInvocation@@factorial(n) @TO@ SimpleName@@MethodName:log:[factorial(n)] @AT@ 13736 @LENGTH@ 12
---------------INS SimpleName@@MethodName:factorial:[n] @TO@ MethodInvocation@@factorial(n) @AT@ 13736 @LENGTH@ 12
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:factorial:[n] @AT@ 13746 @LENGTH@ 1
]

CII:
OP1:(INS, IfStatement, null, OP2 OP6)
OP2:   (INS, InfixExpression, OP1, OP3 OP4 OP5)
OP3:      (INS, SimpleName, OP2, null)
OP4:      (INS, Operator, OP2, null)
OP5:      (INS, NumberLiteral, OP2, null)
OP6:   (INS, ReturnStatement, OP1, OP7)
OP7:      (INS, MethodInvocation, OP6, OP8 OP9)
OP8:         (INS, SimpleName, OP7, null)
OP9:         (INS, SimpleName, OP7, OP10)
OP10:            (INS, MethodInvocation, OP9, OP11)
OP11:               (INS, SimpleName, OP10, OP12)
OP12:                  (INS, SimpleName, OP11, null)



