

hASList: 
[UPD VariableDeclarationStatement@@long result=Math.round(binomialCoefficientDouble(n,k)); @TO@ long result=1; @AT@ 6045 @LENGTH@ 58
---UPD VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @TO@ result=1 @AT@ 6050 @LENGTH@ 52
------UPD MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
---------UPD SimpleName@@MethodName:round:[binomialCoefficientDouble(n,k)] @TO@ MethodName:log:[binomialCoefficientDouble(n,k)] @AT@ 6064 @LENGTH@ 38
------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @AT@ 6391 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@long, MethodName:binomialCoefficient, @@Argus:int+n+int+k+ @AT@ 6081 @LENGTH@ 64
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6085 @LENGTH@ 9
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 6085 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 6086 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 6089 @LENGTH@ 5
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 6089 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 6090 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 6093 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6108 @LENGTH@ 37
------INS MethodInvocation@@binomialCoefficient(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
---------INS SimpleName@@MethodName:binomialCoefficient:[n, n - k] @TO@ MethodInvocation@@binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6135 @LENGTH@ 1
------------INS InfixExpression@@n - k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6138 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6138 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6139 @LENGTH@ 1
---------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6142 @LENGTH@ 1
, UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n <= 61 @AT@ 6112 @LENGTH@ 152
---DEL InfixExpression@@result == Long.MAX_VALUE @AT@ 6116 @LENGTH@ 24
------DEL QualifiedName@@Long.MAX_VALUE @AT@ 6126 @LENGTH@ 14
---------DEL SimpleName@@Long @AT@ 6126 @LENGTH@ 4
---------DEL SimpleName@@MAX_VALUE @AT@ 6131 @LENGTH@ 9
---DEL ThrowStatement@@ClassInstanceCreation:new ArithmeticException("result too large to represent in a long integer") @AT@ 6156 @LENGTH@ 98
------DEL ClassInstanceCreation@@ArithmeticException["result too large to represent in a long integer"] @AT@ 6162 @LENGTH@ 91
---------DEL New@@new @AT@ 6162 @LENGTH@ 3
---------DEL SimpleType@@ArithmeticException @AT@ 6166 @LENGTH@ 19
---------DEL StringLiteral@@"result too large to represent in a long integer" @AT@ 6203 @LENGTH@ 49
---INS InfixExpression@@n <= 61 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6406 @LENGTH@ 7
------INS SimpleName@@n @TO@ InfixExpression@@n <= 61 @AT@ 6406 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@n <= 61 @AT@ 6407 @LENGTH@ 2
------INS NumberLiteral@@61 @TO@ InfixExpression@@n <= 61 @AT@ 6411 @LENGTH@ 2
---INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6499 @LENGTH@ 105
------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6504 @LENGTH@ 24
---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6504 @LENGTH@ 3
---------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6508 @LENGTH@ 5
------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6508 @LENGTH@ 1
------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6512 @LENGTH@ 1
---------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6515 @LENGTH@ 13
------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6515 @LENGTH@ 1
------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6519 @LENGTH@ 9
---------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6519 @LENGTH@ 5
------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6519 @LENGTH@ 1
------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6520 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6523 @LENGTH@ 1
---------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6524 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6527 @LENGTH@ 1
------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6530 @LENGTH@ 6
---------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6530 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6531 @LENGTH@ 2
---------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6535 @LENGTH@ 1
------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6538 @LENGTH@ 3
---------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6538 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6540 @LENGTH@ 2
------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6543 @LENGTH@ 3
---------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6543 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6545 @LENGTH@ 2
------INS ExpressionStatement@@Assignment:result=result * i / j @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6566 @LENGTH@ 24
---------INS Assignment@@result=result * i / j @TO@ ExpressionStatement@@Assignment:result=result * i / j @AT@ 6566 @LENGTH@ 23
------------INS SimpleName@@result @TO@ Assignment@@result=result * i / j @AT@ 6566 @LENGTH@ 6
------------INS Operator@@= @TO@ Assignment@@result=result * i / j @AT@ 6572 @LENGTH@ 1
------------INS InfixExpression@@result * i / j @TO@ Assignment@@result=result * i / j @AT@ 6575 @LENGTH@ 14
---------------INS InfixExpression@@result * i @TO@ InfixExpression@@result * i / j @AT@ 6575 @LENGTH@ 10
------------------MOV SimpleName@@result @TO@ InfixExpression@@result * i @AT@ 6116 @LENGTH@ 6
------------------MOV Operator@@== @TO@ InfixExpression@@result * i @AT@ 6122 @LENGTH@ 2
------------------INS SimpleName@@i @TO@ InfixExpression@@result * i @AT@ 6584 @LENGTH@ 1
---------------INS Operator@@/ @TO@ InfixExpression@@result * i / j @AT@ 6585 @LENGTH@ 1
---------------INS SimpleName@@j @TO@ InfixExpression@@result * i / j @AT@ 6588 @LENGTH@ 1
---INS IfStatement@@InfixExpression:n <= 66 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6620 @LENGTH@ 1053
------INS InfixExpression@@n <= 66 @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6624 @LENGTH@ 7
---------INS SimpleName@@n @TO@ InfixExpression@@n <= 66 @AT@ 6624 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@n <= 66 @AT@ 6625 @LENGTH@ 2
---------INS NumberLiteral@@66 @TO@ InfixExpression@@n <= 66 @AT@ 6629 @LENGTH@ 2
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6788 @LENGTH@ 517
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6793 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6793 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6797 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6797 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6801 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6804 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6804 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6808 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6808 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6808 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6809 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6812 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6813 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6816 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6819 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6819 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6820 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6824 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6827 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6827 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6829 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6832 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6832 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6834 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7217 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7217 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7222 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7222 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7226 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7226 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7230 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7233 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7253 @LENGTH@ 38
------------INS Assignment@@result=(result / (j / d)) * (i / d) @TO@ ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 37
---------------INS SimpleName@@result @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7259 @LENGTH@ 1
---------------INS InfixExpression@@(result / (j / d)) * (i / d) @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 28
------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 18
---------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7263 @LENGTH@ 16
------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7263 @LENGTH@ 6
------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7269 @LENGTH@ 1
------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7272 @LENGTH@ 7
---------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7273 @LENGTH@ 5
------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7273 @LENGTH@ 1
------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7274 @LENGTH@ 1
------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7277 @LENGTH@ 1
------------------INS Operator@@* @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7280 @LENGTH@ 1
------------------INS ParenthesizedExpression@@(i / d) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7283 @LENGTH@ 7
---------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7284 @LENGTH@ 5
------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7284 @LENGTH@ 1
------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7285 @LENGTH@ 1
------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7288 @LENGTH@ 1
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 7496 @LENGTH@ 167
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7501 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7501 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7505 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 7505 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 7509 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7512 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7512 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7516 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 7516 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 7516 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 7517 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 7520 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 7521 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 7524 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7527 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 7527 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 7528 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 7532 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7535 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 7535 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 7537 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7540 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 7540 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 7542 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7563 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7563 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7568 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7568 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7572 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7572 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7576 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7579 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7599 @LENGTH@ 50
------------INS Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 49
---------------INS SimpleName@@result @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7605 @LENGTH@ 1
---------------INS MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
------------------INS SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @TO@ MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
---------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7620 @LENGTH@ 18
------------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7621 @LENGTH@ 16
---------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7621 @LENGTH@ 6
---------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7627 @LENGTH@ 1
---------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7630 @LENGTH@ 7
------------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7631 @LENGTH@ 5
---------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7631 @LENGTH@ 1
---------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7632 @LENGTH@ 1
---------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7635 @LENGTH@ 1
---------------------INS ParenthesizedExpression@@(i / d) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7640 @LENGTH@ 7
------------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7641 @LENGTH@ 5
---------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7641 @LENGTH@ 1
---------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7642 @LENGTH@ 1
---------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7645 @LENGTH@ 1
, DEL ReturnStatement@@MethodInvocation:Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8386 @LENGTH@ 64
---DEL MethodInvocation@@Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8393 @LENGTH@ 56
------DEL SimpleName@@Name:Math @AT@ 8393 @LENGTH@ 4
------DEL SimpleName@@MethodName:floor:[Math.exp(binomialCoefficientLog(n,k)) + 0.5] @AT@ 8398 @LENGTH@ 51
---------DEL InfixExpression@@Math.exp(binomialCoefficientLog(n,k)) + 0.5 @AT@ 8404 @LENGTH@ 44
------------DEL MethodInvocation@@Math.exp(binomialCoefficientLog(n,k)) @AT@ 8404 @LENGTH@ 38
---------------DEL SimpleName@@MethodName:exp:[binomialCoefficientLog(n,k)] @AT@ 8409 @LENGTH@ 33
------------------DEL MethodInvocation@@binomialCoefficientLog(n,k) @AT@ 8413 @LENGTH@ 28
, INS IfStatement@@InfixExpression:n < k @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8790 @LENGTH@ 138
---INS InfixExpression@@n < k @TO@ IfStatement@@InfixExpression:n < k @AT@ 8794 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < k @AT@ 8794 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < k @AT@ 8795 @LENGTH@ 1
------INS SimpleName@@k @TO@ InfixExpression@@n < k @AT@ 8798 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < k @AT@ 8815 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @AT@ 8821 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8821 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8825 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= k for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8867 @LENGTH@ 49
, INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8937 @LENGTH@ 138
---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8941 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < 0 @AT@ 8941 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 0 @AT@ 8942 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 @AT@ 8945 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8962 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @AT@ 8968 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8968 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8972 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= 0 for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 9014 @LENGTH@ 49
, INS IfStatement@@InfixExpression:(n == k) || (k == 0) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9084 @LENGTH@ 60
---INS InfixExpression@@(n == k) || (k == 0) @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 20
------INS ParenthesizedExpression@@(n == k) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 8
---------INS InfixExpression@@n == k @TO@ ParenthesizedExpression@@(n == k) @AT@ 9089 @LENGTH@ 6
------------INS SimpleName@@n @TO@ InfixExpression@@n == k @AT@ 9089 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@n == k @AT@ 9090 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@n == k @AT@ 9094 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9096 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == 0) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9100 @LENGTH@ 8
---------INS InfixExpression@@k == 0 @TO@ ParenthesizedExpression@@(k == 0) @AT@ 9101 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 0 @AT@ 9101 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 0 @AT@ 9102 @LENGTH@ 2
------------INS NumberLiteral@@0 @TO@ InfixExpression@@k == 0 @AT@ 9106 @LENGTH@ 1
---INS ReturnStatement@@NumberLiteral:1d @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9124 @LENGTH@ 10
------INS NumberLiteral@@1d @TO@ ReturnStatement@@NumberLiteral:1d @AT@ 9131 @LENGTH@ 2
, INS IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9153 @LENGTH@ 63
---INS InfixExpression@@(k == 1) || (k == n - 1) @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 24
------INS ParenthesizedExpression@@(k == 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 8
---------INS InfixExpression@@k == 1 @TO@ ParenthesizedExpression@@(k == 1) @AT@ 9158 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 1 @AT@ 9158 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 1 @AT@ 9159 @LENGTH@ 2
------------INS NumberLiteral@@1 @TO@ InfixExpression@@k == 1 @AT@ 9163 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9165 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == n - 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9169 @LENGTH@ 12
---------INS InfixExpression@@k == n - 1 @TO@ ParenthesizedExpression@@(k == n - 1) @AT@ 9170 @LENGTH@ 10
------------INS SimpleName@@k @TO@ InfixExpression@@k == n - 1 @AT@ 9170 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == n - 1 @AT@ 9171 @LENGTH@ 2
------------INS InfixExpression@@n - 1 @TO@ InfixExpression@@k == n - 1 @AT@ 9175 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - 1 @AT@ 9175 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - 1 @AT@ 9176 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - 1 @AT@ 9179 @LENGTH@ 1
---INS ReturnStatement@@SimpleName:n @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9197 @LENGTH@ 9
------INS SimpleName@@n @TO@ ReturnStatement@@SimpleName:n @AT@ 9204 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9225 @LENGTH@ 80
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9229 @LENGTH@ 7
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 9229 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 9230 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 9233 @LENGTH@ 3
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 9233 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 9234 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 9235 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9252 @LENGTH@ 43
------INS MethodInvocation@@binomialCoefficientDouble(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @AT@ 9259 @LENGTH@ 35
---------MOV SimpleName@@Name:Math @TO@ MethodInvocation@@binomialCoefficientDouble(n,n - k) @AT@ 8404 @LENGTH@ 4
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9314 @LENGTH@ 68
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9318 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 9318 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 9319 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 9322 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9340 @LENGTH@ 32
------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @AT@ 9347 @LENGTH@ 24
---------MOV SimpleName@@MethodName:binomialCoefficientLog:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 8413 @LENGTH@ 28
, INS VariableDeclarationStatement@@double result=1d; @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9400 @LENGTH@ 19
---INS PrimitiveType@@double @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9400 @LENGTH@ 6
---INS VariableDeclarationFragment@@result=1d @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9407 @LENGTH@ 11
------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=1d @AT@ 9407 @LENGTH@ 6
------INS NumberLiteral@@1d @TO@ VariableDeclarationFragment@@result=1d @AT@ 9416 @LENGTH@ 2
, INS ForStatement@@[int i=1];i <= k; [i++] @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9428 @LENGTH@ 96
---INS VariableDeclarationExpression@@int i=1 @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9433 @LENGTH@ 9
------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9433 @LENGTH@ 3
------INS VariableDeclarationFragment@@i=1 @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9437 @LENGTH@ 5
---------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=1 @AT@ 9437 @LENGTH@ 1
---------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@i=1 @AT@ 9441 @LENGTH@ 1
---INS InfixExpression@@i <= k @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9444 @LENGTH@ 6
------INS SimpleName@@i @TO@ InfixExpression@@i <= k @AT@ 9444 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@i <= k @AT@ 9445 @LENGTH@ 2
------INS SimpleName@@k @TO@ InfixExpression@@i <= k @AT@ 9449 @LENGTH@ 1
---INS PostfixExpression@@i++ @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9452 @LENGTH@ 3
------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 9452 @LENGTH@ 1
------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 9454 @LENGTH@ 2
---INS ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9472 @LENGTH@ 42
------INS Assignment@@result*=(double)(n - k + i) / (double)i @TO@ ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 41
---------INS SimpleName@@result @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 6
---------INS Operator@@*= @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9478 @LENGTH@ 2
---------INS InfixExpression@@(double)(n - k + i) / (double)i @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 31
------------INS CastExpression@@(double)(n - k + i) @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 19
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)(n - k + i) @AT@ 9483 @LENGTH@ 6
---------------INS ParenthesizedExpression@@(n - k + i) @TO@ CastExpression@@(double)(n - k + i) @AT@ 9490 @LENGTH@ 11
------------------INS InfixExpression@@n - k + i @TO@ ParenthesizedExpression@@(n - k + i) @AT@ 9491 @LENGTH@ 9
---------------------MOV Operator@@+ @TO@ InfixExpression@@n - k + i @AT@ 8442 @LENGTH@ 1
---------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + i @AT@ 9491 @LENGTH@ 5
------------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 9491 @LENGTH@ 1
------------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 9492 @LENGTH@ 1
------------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 9495 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ InfixExpression@@n - k + i @AT@ 9499 @LENGTH@ 1
------------INS Operator@@/ @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9501 @LENGTH@ 1
------------INS CastExpression@@(double)i @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9504 @LENGTH@ 9
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)i @AT@ 9505 @LENGTH@ 6
---------------INS SimpleName@@i @TO@ CastExpression@@(double)i @AT@ 9512 @LENGTH@ 1
, INS ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9536 @LENGTH@ 32
---INS MethodInvocation@@Math.floor(result + 0.5) @TO@ ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 24
------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 4
------INS SimpleName@@MethodName:floor:[result + 0.5] @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9548 @LENGTH@ 19
---------INS InfixExpression@@result + 0.5 @TO@ SimpleName@@MethodName:floor:[result + 0.5] @AT@ 9554 @LENGTH@ 12
------------MOV NumberLiteral@@0.5 @TO@ InfixExpression@@result + 0.5 @AT@ 8445 @LENGTH@ 3
------------INS SimpleName@@result @TO@ InfixExpression@@result + 0.5 @AT@ 9554 @LENGTH@ 6
------------INS Operator@@+ @TO@ InfixExpression@@result + 0.5 @AT@ 9560 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 10974 @LENGTH@ 80
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 10978 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 10978 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 10979 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 10982 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 11002 @LENGTH@ 42
------INS MethodInvocation@@Math.log(binomialCoefficient(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 34
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 4
---------INS SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11014 @LENGTH@ 29
------------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @AT@ 11018 @LENGTH@ 24
---------------INS SimpleName@@MethodName:binomialCoefficient:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 11018 @LENGTH@ 24
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11038 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11040 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 1030 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 11221 @LENGTH@ 88
---INS InfixExpression@@n < 1030 @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11225 @LENGTH@ 8
------INS SimpleName@@n @TO@ InfixExpression@@n < 1030 @AT@ 11225 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 1030 @AT@ 11226 @LENGTH@ 1
------INS NumberLiteral@@1030 @TO@ InfixExpression@@n < 1030 @AT@ 11229 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11250 @LENGTH@ 49
------MOV MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
]

CII:
OP1:(UPD, VariableDeclarationStatement, null, OP2)
OP2:   (UPD, VariableDeclarationFragment, OP1, OP3 OP5)
OP3:      (UPD, MethodInvocation, OP2, OP4)
OP4:         (UPD, SimpleName, OP3, null)
OP5:      (INS, NumberLiteral, OP2, null)





hASList: 
[UPD VariableDeclarationStatement@@long result=Math.round(binomialCoefficientDouble(n,k)); @TO@ long result=1; @AT@ 6045 @LENGTH@ 58
---UPD VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @TO@ result=1 @AT@ 6050 @LENGTH@ 52
------UPD MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
---------UPD SimpleName@@MethodName:round:[binomialCoefficientDouble(n,k)] @TO@ MethodName:log:[binomialCoefficientDouble(n,k)] @AT@ 6064 @LENGTH@ 38
------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @AT@ 6391 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@long, MethodName:binomialCoefficient, @@Argus:int+n+int+k+ @AT@ 6081 @LENGTH@ 64
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6085 @LENGTH@ 9
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 6085 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 6086 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 6089 @LENGTH@ 5
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 6089 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 6090 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 6093 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6108 @LENGTH@ 37
------INS MethodInvocation@@binomialCoefficient(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
---------INS SimpleName@@MethodName:binomialCoefficient:[n, n - k] @TO@ MethodInvocation@@binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6135 @LENGTH@ 1
------------INS InfixExpression@@n - k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6138 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6138 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6139 @LENGTH@ 1
---------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6142 @LENGTH@ 1
, UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n <= 61 @AT@ 6112 @LENGTH@ 152
---DEL InfixExpression@@result == Long.MAX_VALUE @AT@ 6116 @LENGTH@ 24
------DEL QualifiedName@@Long.MAX_VALUE @AT@ 6126 @LENGTH@ 14
---------DEL SimpleName@@Long @AT@ 6126 @LENGTH@ 4
---------DEL SimpleName@@MAX_VALUE @AT@ 6131 @LENGTH@ 9
---DEL ThrowStatement@@ClassInstanceCreation:new ArithmeticException("result too large to represent in a long integer") @AT@ 6156 @LENGTH@ 98
------DEL ClassInstanceCreation@@ArithmeticException["result too large to represent in a long integer"] @AT@ 6162 @LENGTH@ 91
---------DEL New@@new @AT@ 6162 @LENGTH@ 3
---------DEL SimpleType@@ArithmeticException @AT@ 6166 @LENGTH@ 19
---------DEL StringLiteral@@"result too large to represent in a long integer" @AT@ 6203 @LENGTH@ 49
---INS InfixExpression@@n <= 61 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6406 @LENGTH@ 7
------INS SimpleName@@n @TO@ InfixExpression@@n <= 61 @AT@ 6406 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@n <= 61 @AT@ 6407 @LENGTH@ 2
------INS NumberLiteral@@61 @TO@ InfixExpression@@n <= 61 @AT@ 6411 @LENGTH@ 2
---INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6499 @LENGTH@ 105
------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6504 @LENGTH@ 24
---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6504 @LENGTH@ 3
---------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6508 @LENGTH@ 5
------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6508 @LENGTH@ 1
------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6512 @LENGTH@ 1
---------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6515 @LENGTH@ 13
------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6515 @LENGTH@ 1
------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6519 @LENGTH@ 9
---------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6519 @LENGTH@ 5
------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6519 @LENGTH@ 1
------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6520 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6523 @LENGTH@ 1
---------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6524 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6527 @LENGTH@ 1
------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6530 @LENGTH@ 6
---------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6530 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6531 @LENGTH@ 2
---------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6535 @LENGTH@ 1
------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6538 @LENGTH@ 3
---------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6538 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6540 @LENGTH@ 2
------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6543 @LENGTH@ 3
---------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6543 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6545 @LENGTH@ 2
------INS ExpressionStatement@@Assignment:result=result * i / j @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6566 @LENGTH@ 24
---------INS Assignment@@result=result * i / j @TO@ ExpressionStatement@@Assignment:result=result * i / j @AT@ 6566 @LENGTH@ 23
------------INS SimpleName@@result @TO@ Assignment@@result=result * i / j @AT@ 6566 @LENGTH@ 6
------------INS Operator@@= @TO@ Assignment@@result=result * i / j @AT@ 6572 @LENGTH@ 1
------------INS InfixExpression@@result * i / j @TO@ Assignment@@result=result * i / j @AT@ 6575 @LENGTH@ 14
---------------INS InfixExpression@@result * i @TO@ InfixExpression@@result * i / j @AT@ 6575 @LENGTH@ 10
------------------MOV SimpleName@@result @TO@ InfixExpression@@result * i @AT@ 6116 @LENGTH@ 6
------------------MOV Operator@@== @TO@ InfixExpression@@result * i @AT@ 6122 @LENGTH@ 2
------------------INS SimpleName@@i @TO@ InfixExpression@@result * i @AT@ 6584 @LENGTH@ 1
---------------INS Operator@@/ @TO@ InfixExpression@@result * i / j @AT@ 6585 @LENGTH@ 1
---------------INS SimpleName@@j @TO@ InfixExpression@@result * i / j @AT@ 6588 @LENGTH@ 1
---INS IfStatement@@InfixExpression:n <= 66 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6620 @LENGTH@ 1053
------INS InfixExpression@@n <= 66 @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6624 @LENGTH@ 7
---------INS SimpleName@@n @TO@ InfixExpression@@n <= 66 @AT@ 6624 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@n <= 66 @AT@ 6625 @LENGTH@ 2
---------INS NumberLiteral@@66 @TO@ InfixExpression@@n <= 66 @AT@ 6629 @LENGTH@ 2
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6788 @LENGTH@ 517
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6793 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6793 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6797 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6797 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6801 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6804 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6804 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6808 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6808 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6808 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6809 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6812 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6813 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6816 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6819 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6819 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6820 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6824 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6827 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6827 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6829 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6832 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6832 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6834 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7217 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7217 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7222 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7222 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7226 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7226 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7230 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7233 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7253 @LENGTH@ 38
------------INS Assignment@@result=(result / (j / d)) * (i / d) @TO@ ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 37
---------------INS SimpleName@@result @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7259 @LENGTH@ 1
---------------INS InfixExpression@@(result / (j / d)) * (i / d) @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 28
------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 18
---------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7263 @LENGTH@ 16
------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7263 @LENGTH@ 6
------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7269 @LENGTH@ 1
------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7272 @LENGTH@ 7
---------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7273 @LENGTH@ 5
------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7273 @LENGTH@ 1
------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7274 @LENGTH@ 1
------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7277 @LENGTH@ 1
------------------INS Operator@@* @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7280 @LENGTH@ 1
------------------INS ParenthesizedExpression@@(i / d) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7283 @LENGTH@ 7
---------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7284 @LENGTH@ 5
------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7284 @LENGTH@ 1
------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7285 @LENGTH@ 1
------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7288 @LENGTH@ 1
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 7496 @LENGTH@ 167
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7501 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7501 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7505 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 7505 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 7509 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7512 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7512 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7516 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 7516 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 7516 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 7517 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 7520 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 7521 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 7524 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7527 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 7527 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 7528 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 7532 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7535 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 7535 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 7537 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7540 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 7540 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 7542 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7563 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7563 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7568 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7568 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7572 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7572 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7576 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7579 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7599 @LENGTH@ 50
------------INS Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 49
---------------INS SimpleName@@result @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7605 @LENGTH@ 1
---------------INS MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
------------------INS SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @TO@ MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
---------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7620 @LENGTH@ 18
------------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7621 @LENGTH@ 16
---------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7621 @LENGTH@ 6
---------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7627 @LENGTH@ 1
---------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7630 @LENGTH@ 7
------------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7631 @LENGTH@ 5
---------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7631 @LENGTH@ 1
---------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7632 @LENGTH@ 1
---------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7635 @LENGTH@ 1
---------------------INS ParenthesizedExpression@@(i / d) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7640 @LENGTH@ 7
------------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7641 @LENGTH@ 5
---------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7641 @LENGTH@ 1
---------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7642 @LENGTH@ 1
---------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7645 @LENGTH@ 1
, DEL ReturnStatement@@MethodInvocation:Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8386 @LENGTH@ 64
---DEL MethodInvocation@@Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8393 @LENGTH@ 56
------DEL SimpleName@@Name:Math @AT@ 8393 @LENGTH@ 4
------DEL SimpleName@@MethodName:floor:[Math.exp(binomialCoefficientLog(n,k)) + 0.5] @AT@ 8398 @LENGTH@ 51
---------DEL InfixExpression@@Math.exp(binomialCoefficientLog(n,k)) + 0.5 @AT@ 8404 @LENGTH@ 44
------------DEL MethodInvocation@@Math.exp(binomialCoefficientLog(n,k)) @AT@ 8404 @LENGTH@ 38
---------------DEL SimpleName@@MethodName:exp:[binomialCoefficientLog(n,k)] @AT@ 8409 @LENGTH@ 33
------------------DEL MethodInvocation@@binomialCoefficientLog(n,k) @AT@ 8413 @LENGTH@ 28
, INS IfStatement@@InfixExpression:n < k @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8790 @LENGTH@ 138
---INS InfixExpression@@n < k @TO@ IfStatement@@InfixExpression:n < k @AT@ 8794 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < k @AT@ 8794 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < k @AT@ 8795 @LENGTH@ 1
------INS SimpleName@@k @TO@ InfixExpression@@n < k @AT@ 8798 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < k @AT@ 8815 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @AT@ 8821 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8821 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8825 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= k for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8867 @LENGTH@ 49
, INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8937 @LENGTH@ 138
---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8941 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < 0 @AT@ 8941 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 0 @AT@ 8942 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 @AT@ 8945 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8962 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @AT@ 8968 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8968 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8972 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= 0 for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 9014 @LENGTH@ 49
, INS IfStatement@@InfixExpression:(n == k) || (k == 0) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9084 @LENGTH@ 60
---INS InfixExpression@@(n == k) || (k == 0) @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 20
------INS ParenthesizedExpression@@(n == k) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 8
---------INS InfixExpression@@n == k @TO@ ParenthesizedExpression@@(n == k) @AT@ 9089 @LENGTH@ 6
------------INS SimpleName@@n @TO@ InfixExpression@@n == k @AT@ 9089 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@n == k @AT@ 9090 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@n == k @AT@ 9094 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9096 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == 0) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9100 @LENGTH@ 8
---------INS InfixExpression@@k == 0 @TO@ ParenthesizedExpression@@(k == 0) @AT@ 9101 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 0 @AT@ 9101 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 0 @AT@ 9102 @LENGTH@ 2
------------INS NumberLiteral@@0 @TO@ InfixExpression@@k == 0 @AT@ 9106 @LENGTH@ 1
---INS ReturnStatement@@NumberLiteral:1d @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9124 @LENGTH@ 10
------INS NumberLiteral@@1d @TO@ ReturnStatement@@NumberLiteral:1d @AT@ 9131 @LENGTH@ 2
, INS IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9153 @LENGTH@ 63
---INS InfixExpression@@(k == 1) || (k == n - 1) @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 24
------INS ParenthesizedExpression@@(k == 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 8
---------INS InfixExpression@@k == 1 @TO@ ParenthesizedExpression@@(k == 1) @AT@ 9158 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 1 @AT@ 9158 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 1 @AT@ 9159 @LENGTH@ 2
------------INS NumberLiteral@@1 @TO@ InfixExpression@@k == 1 @AT@ 9163 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9165 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == n - 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9169 @LENGTH@ 12
---------INS InfixExpression@@k == n - 1 @TO@ ParenthesizedExpression@@(k == n - 1) @AT@ 9170 @LENGTH@ 10
------------INS SimpleName@@k @TO@ InfixExpression@@k == n - 1 @AT@ 9170 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == n - 1 @AT@ 9171 @LENGTH@ 2
------------INS InfixExpression@@n - 1 @TO@ InfixExpression@@k == n - 1 @AT@ 9175 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - 1 @AT@ 9175 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - 1 @AT@ 9176 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - 1 @AT@ 9179 @LENGTH@ 1
---INS ReturnStatement@@SimpleName:n @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9197 @LENGTH@ 9
------INS SimpleName@@n @TO@ ReturnStatement@@SimpleName:n @AT@ 9204 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9225 @LENGTH@ 80
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9229 @LENGTH@ 7
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 9229 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 9230 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 9233 @LENGTH@ 3
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 9233 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 9234 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 9235 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9252 @LENGTH@ 43
------INS MethodInvocation@@binomialCoefficientDouble(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @AT@ 9259 @LENGTH@ 35
---------MOV SimpleName@@Name:Math @TO@ MethodInvocation@@binomialCoefficientDouble(n,n - k) @AT@ 8404 @LENGTH@ 4
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9314 @LENGTH@ 68
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9318 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 9318 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 9319 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 9322 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9340 @LENGTH@ 32
------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @AT@ 9347 @LENGTH@ 24
---------MOV SimpleName@@MethodName:binomialCoefficientLog:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 8413 @LENGTH@ 28
, INS VariableDeclarationStatement@@double result=1d; @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9400 @LENGTH@ 19
---INS PrimitiveType@@double @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9400 @LENGTH@ 6
---INS VariableDeclarationFragment@@result=1d @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9407 @LENGTH@ 11
------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=1d @AT@ 9407 @LENGTH@ 6
------INS NumberLiteral@@1d @TO@ VariableDeclarationFragment@@result=1d @AT@ 9416 @LENGTH@ 2
, INS ForStatement@@[int i=1];i <= k; [i++] @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9428 @LENGTH@ 96
---INS VariableDeclarationExpression@@int i=1 @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9433 @LENGTH@ 9
------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9433 @LENGTH@ 3
------INS VariableDeclarationFragment@@i=1 @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9437 @LENGTH@ 5
---------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=1 @AT@ 9437 @LENGTH@ 1
---------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@i=1 @AT@ 9441 @LENGTH@ 1
---INS InfixExpression@@i <= k @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9444 @LENGTH@ 6
------INS SimpleName@@i @TO@ InfixExpression@@i <= k @AT@ 9444 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@i <= k @AT@ 9445 @LENGTH@ 2
------INS SimpleName@@k @TO@ InfixExpression@@i <= k @AT@ 9449 @LENGTH@ 1
---INS PostfixExpression@@i++ @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9452 @LENGTH@ 3
------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 9452 @LENGTH@ 1
------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 9454 @LENGTH@ 2
---INS ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9472 @LENGTH@ 42
------INS Assignment@@result*=(double)(n - k + i) / (double)i @TO@ ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 41
---------INS SimpleName@@result @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 6
---------INS Operator@@*= @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9478 @LENGTH@ 2
---------INS InfixExpression@@(double)(n - k + i) / (double)i @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 31
------------INS CastExpression@@(double)(n - k + i) @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 19
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)(n - k + i) @AT@ 9483 @LENGTH@ 6
---------------INS ParenthesizedExpression@@(n - k + i) @TO@ CastExpression@@(double)(n - k + i) @AT@ 9490 @LENGTH@ 11
------------------INS InfixExpression@@n - k + i @TO@ ParenthesizedExpression@@(n - k + i) @AT@ 9491 @LENGTH@ 9
---------------------MOV Operator@@+ @TO@ InfixExpression@@n - k + i @AT@ 8442 @LENGTH@ 1
---------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + i @AT@ 9491 @LENGTH@ 5
------------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 9491 @LENGTH@ 1
------------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 9492 @LENGTH@ 1
------------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 9495 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ InfixExpression@@n - k + i @AT@ 9499 @LENGTH@ 1
------------INS Operator@@/ @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9501 @LENGTH@ 1
------------INS CastExpression@@(double)i @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9504 @LENGTH@ 9
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)i @AT@ 9505 @LENGTH@ 6
---------------INS SimpleName@@i @TO@ CastExpression@@(double)i @AT@ 9512 @LENGTH@ 1
, INS ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9536 @LENGTH@ 32
---INS MethodInvocation@@Math.floor(result + 0.5) @TO@ ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 24
------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 4
------INS SimpleName@@MethodName:floor:[result + 0.5] @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9548 @LENGTH@ 19
---------INS InfixExpression@@result + 0.5 @TO@ SimpleName@@MethodName:floor:[result + 0.5] @AT@ 9554 @LENGTH@ 12
------------MOV NumberLiteral@@0.5 @TO@ InfixExpression@@result + 0.5 @AT@ 8445 @LENGTH@ 3
------------INS SimpleName@@result @TO@ InfixExpression@@result + 0.5 @AT@ 9554 @LENGTH@ 6
------------INS Operator@@+ @TO@ InfixExpression@@result + 0.5 @AT@ 9560 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 10974 @LENGTH@ 80
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 10978 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 10978 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 10979 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 10982 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 11002 @LENGTH@ 42
------INS MethodInvocation@@Math.log(binomialCoefficient(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 34
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 4
---------INS SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11014 @LENGTH@ 29
------------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @AT@ 11018 @LENGTH@ 24
---------------INS SimpleName@@MethodName:binomialCoefficient:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 11018 @LENGTH@ 24
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11038 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11040 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 1030 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 11221 @LENGTH@ 88
---INS InfixExpression@@n < 1030 @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11225 @LENGTH@ 8
------INS SimpleName@@n @TO@ InfixExpression@@n < 1030 @AT@ 11225 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 1030 @AT@ 11226 @LENGTH@ 1
------INS NumberLiteral@@1030 @TO@ InfixExpression@@n < 1030 @AT@ 11229 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11250 @LENGTH@ 49
------MOV MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
]

CII:
OP1:(INS, IfStatement, null, OP2 OP9)
OP2:   (INS, InfixExpression, OP1, OP3 OP4 OP5)
OP3:      (INS, SimpleName, OP2, null)
OP4:      (INS, Operator, OP2, null)
OP5:      (INS, InfixExpression, OP2, OP6 OP7 OP8)
OP6:         (INS, SimpleName, OP5, null)
OP7:         (INS, Operator, OP5, null)
OP8:         (INS, NumberLiteral, OP5, null)
OP9:   (INS, ReturnStatement, OP1, OP10)
OP10:      (INS, MethodInvocation, OP9, OP11)
OP11:         (INS, SimpleName, OP10, OP12 OP13)
OP12:            (INS, SimpleName, OP11, null)
OP13:            (INS, InfixExpression, OP11, OP14 OP15 OP16)
OP14:               (INS, SimpleName, OP13, null)
OP15:               (INS, Operator, OP13, null)
OP16:               (INS, SimpleName, OP13, null)





hASList: 
[UPD VariableDeclarationStatement@@long result=Math.round(binomialCoefficientDouble(n,k)); @TO@ long result=1; @AT@ 6045 @LENGTH@ 58
---UPD VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @TO@ result=1 @AT@ 6050 @LENGTH@ 52
------UPD MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
---------UPD SimpleName@@MethodName:round:[binomialCoefficientDouble(n,k)] @TO@ MethodName:log:[binomialCoefficientDouble(n,k)] @AT@ 6064 @LENGTH@ 38
------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @AT@ 6391 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@long, MethodName:binomialCoefficient, @@Argus:int+n+int+k+ @AT@ 6081 @LENGTH@ 64
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6085 @LENGTH@ 9
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 6085 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 6086 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 6089 @LENGTH@ 5
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 6089 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 6090 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 6093 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6108 @LENGTH@ 37
------INS MethodInvocation@@binomialCoefficient(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
---------INS SimpleName@@MethodName:binomialCoefficient:[n, n - k] @TO@ MethodInvocation@@binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6135 @LENGTH@ 1
------------INS InfixExpression@@n - k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6138 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6138 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6139 @LENGTH@ 1
---------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6142 @LENGTH@ 1
, UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n <= 61 @AT@ 6112 @LENGTH@ 152
---DEL InfixExpression@@result == Long.MAX_VALUE @AT@ 6116 @LENGTH@ 24
------DEL QualifiedName@@Long.MAX_VALUE @AT@ 6126 @LENGTH@ 14
---------DEL SimpleName@@Long @AT@ 6126 @LENGTH@ 4
---------DEL SimpleName@@MAX_VALUE @AT@ 6131 @LENGTH@ 9
---DEL ThrowStatement@@ClassInstanceCreation:new ArithmeticException("result too large to represent in a long integer") @AT@ 6156 @LENGTH@ 98
------DEL ClassInstanceCreation@@ArithmeticException["result too large to represent in a long integer"] @AT@ 6162 @LENGTH@ 91
---------DEL New@@new @AT@ 6162 @LENGTH@ 3
---------DEL SimpleType@@ArithmeticException @AT@ 6166 @LENGTH@ 19
---------DEL StringLiteral@@"result too large to represent in a long integer" @AT@ 6203 @LENGTH@ 49
---INS InfixExpression@@n <= 61 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6406 @LENGTH@ 7
------INS SimpleName@@n @TO@ InfixExpression@@n <= 61 @AT@ 6406 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@n <= 61 @AT@ 6407 @LENGTH@ 2
------INS NumberLiteral@@61 @TO@ InfixExpression@@n <= 61 @AT@ 6411 @LENGTH@ 2
---INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6499 @LENGTH@ 105
------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6504 @LENGTH@ 24
---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6504 @LENGTH@ 3
---------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6508 @LENGTH@ 5
------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6508 @LENGTH@ 1
------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6512 @LENGTH@ 1
---------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6515 @LENGTH@ 13
------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6515 @LENGTH@ 1
------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6519 @LENGTH@ 9
---------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6519 @LENGTH@ 5
------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6519 @LENGTH@ 1
------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6520 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6523 @LENGTH@ 1
---------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6524 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6527 @LENGTH@ 1
------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6530 @LENGTH@ 6
---------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6530 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6531 @LENGTH@ 2
---------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6535 @LENGTH@ 1
------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6538 @LENGTH@ 3
---------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6538 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6540 @LENGTH@ 2
------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6543 @LENGTH@ 3
---------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6543 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6545 @LENGTH@ 2
------INS ExpressionStatement@@Assignment:result=result * i / j @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6566 @LENGTH@ 24
---------INS Assignment@@result=result * i / j @TO@ ExpressionStatement@@Assignment:result=result * i / j @AT@ 6566 @LENGTH@ 23
------------INS SimpleName@@result @TO@ Assignment@@result=result * i / j @AT@ 6566 @LENGTH@ 6
------------INS Operator@@= @TO@ Assignment@@result=result * i / j @AT@ 6572 @LENGTH@ 1
------------INS InfixExpression@@result * i / j @TO@ Assignment@@result=result * i / j @AT@ 6575 @LENGTH@ 14
---------------INS InfixExpression@@result * i @TO@ InfixExpression@@result * i / j @AT@ 6575 @LENGTH@ 10
------------------MOV SimpleName@@result @TO@ InfixExpression@@result * i @AT@ 6116 @LENGTH@ 6
------------------MOV Operator@@== @TO@ InfixExpression@@result * i @AT@ 6122 @LENGTH@ 2
------------------INS SimpleName@@i @TO@ InfixExpression@@result * i @AT@ 6584 @LENGTH@ 1
---------------INS Operator@@/ @TO@ InfixExpression@@result * i / j @AT@ 6585 @LENGTH@ 1
---------------INS SimpleName@@j @TO@ InfixExpression@@result * i / j @AT@ 6588 @LENGTH@ 1
---INS IfStatement@@InfixExpression:n <= 66 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6620 @LENGTH@ 1053
------INS InfixExpression@@n <= 66 @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6624 @LENGTH@ 7
---------INS SimpleName@@n @TO@ InfixExpression@@n <= 66 @AT@ 6624 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@n <= 66 @AT@ 6625 @LENGTH@ 2
---------INS NumberLiteral@@66 @TO@ InfixExpression@@n <= 66 @AT@ 6629 @LENGTH@ 2
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6788 @LENGTH@ 517
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6793 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6793 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6797 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6797 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6801 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6804 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6804 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6808 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6808 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6808 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6809 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6812 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6813 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6816 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6819 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6819 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6820 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6824 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6827 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6827 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6829 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6832 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6832 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6834 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7217 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7217 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7222 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7222 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7226 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7226 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7230 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7233 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7253 @LENGTH@ 38
------------INS Assignment@@result=(result / (j / d)) * (i / d) @TO@ ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 37
---------------INS SimpleName@@result @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7259 @LENGTH@ 1
---------------INS InfixExpression@@(result / (j / d)) * (i / d) @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 28
------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 18
---------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7263 @LENGTH@ 16
------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7263 @LENGTH@ 6
------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7269 @LENGTH@ 1
------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7272 @LENGTH@ 7
---------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7273 @LENGTH@ 5
------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7273 @LENGTH@ 1
------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7274 @LENGTH@ 1
------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7277 @LENGTH@ 1
------------------INS Operator@@* @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7280 @LENGTH@ 1
------------------INS ParenthesizedExpression@@(i / d) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7283 @LENGTH@ 7
---------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7284 @LENGTH@ 5
------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7284 @LENGTH@ 1
------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7285 @LENGTH@ 1
------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7288 @LENGTH@ 1
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 7496 @LENGTH@ 167
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7501 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7501 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7505 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 7505 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 7509 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7512 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7512 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7516 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 7516 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 7516 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 7517 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 7520 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 7521 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 7524 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7527 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 7527 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 7528 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 7532 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7535 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 7535 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 7537 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7540 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 7540 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 7542 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7563 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7563 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7568 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7568 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7572 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7572 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7576 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7579 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7599 @LENGTH@ 50
------------INS Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 49
---------------INS SimpleName@@result @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7605 @LENGTH@ 1
---------------INS MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
------------------INS SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @TO@ MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
---------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7620 @LENGTH@ 18
------------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7621 @LENGTH@ 16
---------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7621 @LENGTH@ 6
---------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7627 @LENGTH@ 1
---------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7630 @LENGTH@ 7
------------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7631 @LENGTH@ 5
---------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7631 @LENGTH@ 1
---------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7632 @LENGTH@ 1
---------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7635 @LENGTH@ 1
---------------------INS ParenthesizedExpression@@(i / d) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7640 @LENGTH@ 7
------------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7641 @LENGTH@ 5
---------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7641 @LENGTH@ 1
---------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7642 @LENGTH@ 1
---------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7645 @LENGTH@ 1
, DEL ReturnStatement@@MethodInvocation:Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8386 @LENGTH@ 64
---DEL MethodInvocation@@Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8393 @LENGTH@ 56
------DEL SimpleName@@Name:Math @AT@ 8393 @LENGTH@ 4
------DEL SimpleName@@MethodName:floor:[Math.exp(binomialCoefficientLog(n,k)) + 0.5] @AT@ 8398 @LENGTH@ 51
---------DEL InfixExpression@@Math.exp(binomialCoefficientLog(n,k)) + 0.5 @AT@ 8404 @LENGTH@ 44
------------DEL MethodInvocation@@Math.exp(binomialCoefficientLog(n,k)) @AT@ 8404 @LENGTH@ 38
---------------DEL SimpleName@@MethodName:exp:[binomialCoefficientLog(n,k)] @AT@ 8409 @LENGTH@ 33
------------------DEL MethodInvocation@@binomialCoefficientLog(n,k) @AT@ 8413 @LENGTH@ 28
, INS IfStatement@@InfixExpression:n < k @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8790 @LENGTH@ 138
---INS InfixExpression@@n < k @TO@ IfStatement@@InfixExpression:n < k @AT@ 8794 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < k @AT@ 8794 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < k @AT@ 8795 @LENGTH@ 1
------INS SimpleName@@k @TO@ InfixExpression@@n < k @AT@ 8798 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < k @AT@ 8815 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @AT@ 8821 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8821 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8825 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= k for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8867 @LENGTH@ 49
, INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8937 @LENGTH@ 138
---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8941 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < 0 @AT@ 8941 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 0 @AT@ 8942 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 @AT@ 8945 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8962 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @AT@ 8968 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8968 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8972 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= 0 for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 9014 @LENGTH@ 49
, INS IfStatement@@InfixExpression:(n == k) || (k == 0) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9084 @LENGTH@ 60
---INS InfixExpression@@(n == k) || (k == 0) @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 20
------INS ParenthesizedExpression@@(n == k) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 8
---------INS InfixExpression@@n == k @TO@ ParenthesizedExpression@@(n == k) @AT@ 9089 @LENGTH@ 6
------------INS SimpleName@@n @TO@ InfixExpression@@n == k @AT@ 9089 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@n == k @AT@ 9090 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@n == k @AT@ 9094 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9096 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == 0) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9100 @LENGTH@ 8
---------INS InfixExpression@@k == 0 @TO@ ParenthesizedExpression@@(k == 0) @AT@ 9101 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 0 @AT@ 9101 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 0 @AT@ 9102 @LENGTH@ 2
------------INS NumberLiteral@@0 @TO@ InfixExpression@@k == 0 @AT@ 9106 @LENGTH@ 1
---INS ReturnStatement@@NumberLiteral:1d @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9124 @LENGTH@ 10
------INS NumberLiteral@@1d @TO@ ReturnStatement@@NumberLiteral:1d @AT@ 9131 @LENGTH@ 2
, INS IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9153 @LENGTH@ 63
---INS InfixExpression@@(k == 1) || (k == n - 1) @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 24
------INS ParenthesizedExpression@@(k == 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 8
---------INS InfixExpression@@k == 1 @TO@ ParenthesizedExpression@@(k == 1) @AT@ 9158 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 1 @AT@ 9158 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 1 @AT@ 9159 @LENGTH@ 2
------------INS NumberLiteral@@1 @TO@ InfixExpression@@k == 1 @AT@ 9163 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9165 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == n - 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9169 @LENGTH@ 12
---------INS InfixExpression@@k == n - 1 @TO@ ParenthesizedExpression@@(k == n - 1) @AT@ 9170 @LENGTH@ 10
------------INS SimpleName@@k @TO@ InfixExpression@@k == n - 1 @AT@ 9170 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == n - 1 @AT@ 9171 @LENGTH@ 2
------------INS InfixExpression@@n - 1 @TO@ InfixExpression@@k == n - 1 @AT@ 9175 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - 1 @AT@ 9175 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - 1 @AT@ 9176 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - 1 @AT@ 9179 @LENGTH@ 1
---INS ReturnStatement@@SimpleName:n @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9197 @LENGTH@ 9
------INS SimpleName@@n @TO@ ReturnStatement@@SimpleName:n @AT@ 9204 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9225 @LENGTH@ 80
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9229 @LENGTH@ 7
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 9229 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 9230 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 9233 @LENGTH@ 3
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 9233 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 9234 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 9235 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9252 @LENGTH@ 43
------INS MethodInvocation@@binomialCoefficientDouble(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @AT@ 9259 @LENGTH@ 35
---------MOV SimpleName@@Name:Math @TO@ MethodInvocation@@binomialCoefficientDouble(n,n - k) @AT@ 8404 @LENGTH@ 4
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9314 @LENGTH@ 68
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9318 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 9318 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 9319 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 9322 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9340 @LENGTH@ 32
------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @AT@ 9347 @LENGTH@ 24
---------MOV SimpleName@@MethodName:binomialCoefficientLog:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 8413 @LENGTH@ 28
, INS VariableDeclarationStatement@@double result=1d; @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9400 @LENGTH@ 19
---INS PrimitiveType@@double @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9400 @LENGTH@ 6
---INS VariableDeclarationFragment@@result=1d @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9407 @LENGTH@ 11
------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=1d @AT@ 9407 @LENGTH@ 6
------INS NumberLiteral@@1d @TO@ VariableDeclarationFragment@@result=1d @AT@ 9416 @LENGTH@ 2
, INS ForStatement@@[int i=1];i <= k; [i++] @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9428 @LENGTH@ 96
---INS VariableDeclarationExpression@@int i=1 @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9433 @LENGTH@ 9
------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9433 @LENGTH@ 3
------INS VariableDeclarationFragment@@i=1 @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9437 @LENGTH@ 5
---------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=1 @AT@ 9437 @LENGTH@ 1
---------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@i=1 @AT@ 9441 @LENGTH@ 1
---INS InfixExpression@@i <= k @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9444 @LENGTH@ 6
------INS SimpleName@@i @TO@ InfixExpression@@i <= k @AT@ 9444 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@i <= k @AT@ 9445 @LENGTH@ 2
------INS SimpleName@@k @TO@ InfixExpression@@i <= k @AT@ 9449 @LENGTH@ 1
---INS PostfixExpression@@i++ @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9452 @LENGTH@ 3
------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 9452 @LENGTH@ 1
------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 9454 @LENGTH@ 2
---INS ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9472 @LENGTH@ 42
------INS Assignment@@result*=(double)(n - k + i) / (double)i @TO@ ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 41
---------INS SimpleName@@result @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 6
---------INS Operator@@*= @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9478 @LENGTH@ 2
---------INS InfixExpression@@(double)(n - k + i) / (double)i @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 31
------------INS CastExpression@@(double)(n - k + i) @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 19
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)(n - k + i) @AT@ 9483 @LENGTH@ 6
---------------INS ParenthesizedExpression@@(n - k + i) @TO@ CastExpression@@(double)(n - k + i) @AT@ 9490 @LENGTH@ 11
------------------INS InfixExpression@@n - k + i @TO@ ParenthesizedExpression@@(n - k + i) @AT@ 9491 @LENGTH@ 9
---------------------MOV Operator@@+ @TO@ InfixExpression@@n - k + i @AT@ 8442 @LENGTH@ 1
---------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + i @AT@ 9491 @LENGTH@ 5
------------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 9491 @LENGTH@ 1
------------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 9492 @LENGTH@ 1
------------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 9495 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ InfixExpression@@n - k + i @AT@ 9499 @LENGTH@ 1
------------INS Operator@@/ @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9501 @LENGTH@ 1
------------INS CastExpression@@(double)i @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9504 @LENGTH@ 9
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)i @AT@ 9505 @LENGTH@ 6
---------------INS SimpleName@@i @TO@ CastExpression@@(double)i @AT@ 9512 @LENGTH@ 1
, INS ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9536 @LENGTH@ 32
---INS MethodInvocation@@Math.floor(result + 0.5) @TO@ ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 24
------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 4
------INS SimpleName@@MethodName:floor:[result + 0.5] @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9548 @LENGTH@ 19
---------INS InfixExpression@@result + 0.5 @TO@ SimpleName@@MethodName:floor:[result + 0.5] @AT@ 9554 @LENGTH@ 12
------------MOV NumberLiteral@@0.5 @TO@ InfixExpression@@result + 0.5 @AT@ 8445 @LENGTH@ 3
------------INS SimpleName@@result @TO@ InfixExpression@@result + 0.5 @AT@ 9554 @LENGTH@ 6
------------INS Operator@@+ @TO@ InfixExpression@@result + 0.5 @AT@ 9560 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 10974 @LENGTH@ 80
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 10978 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 10978 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 10979 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 10982 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 11002 @LENGTH@ 42
------INS MethodInvocation@@Math.log(binomialCoefficient(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 34
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 4
---------INS SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11014 @LENGTH@ 29
------------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @AT@ 11018 @LENGTH@ 24
---------------INS SimpleName@@MethodName:binomialCoefficient:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 11018 @LENGTH@ 24
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11038 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11040 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 1030 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 11221 @LENGTH@ 88
---INS InfixExpression@@n < 1030 @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11225 @LENGTH@ 8
------INS SimpleName@@n @TO@ InfixExpression@@n < 1030 @AT@ 11225 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 1030 @AT@ 11226 @LENGTH@ 1
------INS NumberLiteral@@1030 @TO@ InfixExpression@@n < 1030 @AT@ 11229 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11250 @LENGTH@ 49
------MOV MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
]

CII:
OP1:(UPD, IfStatement, null, OP2 OP6 OP11 OP15 OP51)
OP2:   (DEL, InfixExpression, OP1, OP3)
OP3:      (DEL, QualifiedName, OP2, OP4 OP5)
OP4:         (DEL, SimpleName, OP3, null)
OP5:         (DEL, SimpleName, OP3, null)
OP6:   (DEL, ThrowStatement, OP1, OP7)
OP7:      (DEL, ClassInstanceCreation, OP6, OP8 OP9 OP10)
OP8:         (DEL, New, OP7, null)
OP9:         (DEL, SimpleType, OP7, null)
OP10:         (DEL, StringLiteral, OP7, null)
OP11:   (INS, InfixExpression, OP1, OP12 OP13 OP14)
OP12:      (INS, SimpleName, OP11, null)
OP13:      (INS, Operator, OP11, null)
OP14:      (INS, NumberLiteral, OP11, null)
OP15:   (INS, ForStatement, OP1, OP16 OP30 OP34 OP37 OP40)
OP16:      (INS, VariableDeclarationExpression, OP15, OP17 OP18 OP21)
OP17:         (INS, PrimitiveType, OP16, null)
OP18:         (INS, VariableDeclarationFragment, OP16, OP19 OP20)
OP19:            (INS, SimpleName, OP18, null)
OP20:            (INS, NumberLiteral, OP18, null)
OP21:         (INS, VariableDeclarationFragment, OP16, OP22 OP23)
OP22:            (INS, SimpleName, OP21, null)
OP23:            (INS, InfixExpression, OP21, OP24 OP28 OP29)
OP24:               (INS, InfixExpression, OP23, OP25 OP26 OP27)
OP25:                  (INS, SimpleName, OP24, null)
OP26:                  (INS, Operator, OP24, null)
OP27:                  (INS, SimpleName, OP24, null)
OP28:               (INS, Operator, OP23, null)
OP29:               (INS, NumberLiteral, OP23, null)
OP30:      (INS, InfixExpression, OP15, OP31 OP32 OP33)
OP31:         (INS, SimpleName, OP30, null)
OP32:         (INS, Operator, OP30, null)
OP33:         (INS, SimpleName, OP30, null)
OP34:      (INS, PostfixExpression, OP15, OP35 OP36)
OP35:         (INS, SimpleName, OP34, null)
OP36:         (INS, Operator, OP34, null)
OP37:      (INS, PostfixExpression, OP15, OP38 OP39)
OP38:         (INS, SimpleName, OP37, null)
OP39:         (INS, Operator, OP37, null)
OP40:      (INS, ExpressionStatement, OP15, OP41)
OP41:         (INS, Assignment, OP40, OP42 OP43 OP44)
OP42:            (INS, SimpleName, OP41, null)
OP43:            (INS, Operator, OP41, null)
OP44:            (INS, InfixExpression, OP41, OP45 OP49 OP50)
OP45:               (INS, InfixExpression, OP44, OP46 OP47 OP48)
OP46:                  (MOV, SimpleName, OP45, null)
OP47:                  (MOV, Operator, OP45, null)
OP48:                  (INS, SimpleName, OP45, null)
OP49:               (INS, Operator, OP44, null)
OP50:               (INS, SimpleName, OP44, null)
OP51:   (INS, IfStatement, OP1, OP52 OP56 OP109)
OP52:      (INS, InfixExpression, OP51, OP53 OP54 OP55)
OP53:         (INS, SimpleName, OP52, null)
OP54:         (INS, Operator, OP52, null)
OP55:         (INS, NumberLiteral, OP52, null)
OP56:      (INS, ForStatement, OP51, OP57 OP71 OP75 OP78 OP81 OP89)
OP57:         (INS, VariableDeclarationExpression, OP56, OP58 OP59 OP62)
OP58:            (INS, PrimitiveType, OP57, null)
OP59:            (INS, VariableDeclarationFragment, OP57, OP60 OP61)
OP60:               (INS, SimpleName, OP59, null)
OP61:               (INS, NumberLiteral, OP59, null)
OP62:            (INS, VariableDeclarationFragment, OP57, OP63 OP64)
OP63:               (INS, SimpleName, OP62, null)
OP64:               (INS, InfixExpression, OP62, OP65 OP69 OP70)
OP65:                  (INS, InfixExpression, OP64, OP66 OP67 OP68)
OP66:                     (INS, SimpleName, OP65, null)
OP67:                     (INS, Operator, OP65, null)
OP68:                     (INS, SimpleName, OP65, null)
OP69:                  (INS, Operator, OP64, null)
OP70:                  (INS, NumberLiteral, OP64, null)
OP71:         (INS, InfixExpression, OP56, OP72 OP73 OP74)
OP72:            (INS, SimpleName, OP71, null)
OP73:            (INS, Operator, OP71, null)
OP74:            (INS, SimpleName, OP71, null)
OP75:         (INS, PostfixExpression, OP56, OP76 OP77)
OP76:            (INS, SimpleName, OP75, null)
OP77:            (INS, Operator, OP75, null)
OP78:         (INS, PostfixExpression, OP56, OP79 OP80)
OP79:            (INS, SimpleName, OP78, null)
OP80:            (INS, Operator, OP78, null)
OP81:         (INS, VariableDeclarationStatement, OP56, OP82 OP83)
OP82:            (INS, PrimitiveType, OP81, null)
OP83:            (INS, VariableDeclarationFragment, OP81, OP84 OP85)
OP84:               (INS, SimpleName, OP83, null)
OP85:               (INS, MethodInvocation, OP83, OP86)
OP86:                  (INS, SimpleName, OP85, OP87 OP88)
OP87:                     (INS, SimpleName, OP86, null)
OP88:                     (INS, SimpleName, OP86, null)
OP89:         (INS, ExpressionStatement, OP56, OP90)
OP90:            (INS, Assignment, OP89, OP91 OP92 OP93)
OP91:               (INS, SimpleName, OP90, null)
OP92:               (INS, Operator, OP90, null)
OP93:               (INS, InfixExpression, OP90, OP94 OP103 OP104)
OP94:                  (INS, ParenthesizedExpression, OP93, OP95)
OP95:                     (INS, InfixExpression, OP94, OP96 OP97 OP98)
OP96:                        (INS, SimpleName, OP95, null)
OP97:                        (INS, Operator, OP95, null)
OP98:                        (INS, ParenthesizedExpression, OP95, OP99)
OP99:                           (INS, InfixExpression, OP98, OP100 OP101 OP102)
OP100:                              (INS, SimpleName, OP99, null)
OP101:                              (INS, Operator, OP99, null)
OP102:                              (INS, SimpleName, OP99, null)
OP103:                  (INS, Operator, OP93, null)
OP104:                  (INS, ParenthesizedExpression, OP93, OP105)
OP105:                     (INS, InfixExpression, OP104, OP106 OP107 OP108)
OP106:                        (INS, SimpleName, OP105, null)
OP107:                        (INS, Operator, OP105, null)
OP108:                        (INS, SimpleName, OP105, null)
OP109:      (INS, ForStatement, OP51, OP110 OP124 OP128 OP131 OP134 OP142)
OP110:         (INS, VariableDeclarationExpression, OP109, OP111 OP112 OP115)
OP111:            (INS, PrimitiveType, OP110, null)
OP112:            (INS, VariableDeclarationFragment, OP110, OP113 OP114)
OP113:               (INS, SimpleName, OP112, null)
OP114:               (INS, NumberLiteral, OP112, null)
OP115:            (INS, VariableDeclarationFragment, OP110, OP116 OP117)
OP116:               (INS, SimpleName, OP115, null)
OP117:               (INS, InfixExpression, OP115, OP118 OP122 OP123)
OP118:                  (INS, InfixExpression, OP117, OP119 OP120 OP121)
OP119:                     (INS, SimpleName, OP118, null)
OP120:                     (INS, Operator, OP118, null)
OP121:                     (INS, SimpleName, OP118, null)
OP122:                  (INS, Operator, OP117, null)
OP123:                  (INS, NumberLiteral, OP117, null)
OP124:         (INS, InfixExpression, OP109, OP125 OP126 OP127)
OP125:            (INS, SimpleName, OP124, null)
OP126:            (INS, Operator, OP124, null)
OP127:            (INS, SimpleName, OP124, null)
OP128:         (INS, PostfixExpression, OP109, OP129 OP130)
OP129:            (INS, SimpleName, OP128, null)
OP130:            (INS, Operator, OP128, null)
OP131:         (INS, PostfixExpression, OP109, OP132 OP133)
OP132:            (INS, SimpleName, OP131, null)
OP133:            (INS, Operator, OP131, null)
OP134:         (INS, VariableDeclarationStatement, OP109, OP135 OP136)
OP135:            (INS, PrimitiveType, OP134, null)
OP136:            (INS, VariableDeclarationFragment, OP134, OP137 OP138)
OP137:               (INS, SimpleName, OP136, null)
OP138:               (INS, MethodInvocation, OP136, OP139)
OP139:                  (INS, SimpleName, OP138, OP140 OP141)
OP140:                     (INS, SimpleName, OP139, null)
OP141:                     (INS, SimpleName, OP139, null)
OP142:         (INS, ExpressionStatement, OP109, OP143)
OP143:            (INS, Assignment, OP142, OP144 OP145 OP146)
OP144:               (INS, SimpleName, OP143, null)
OP145:               (INS, Operator, OP143, null)
OP146:               (INS, MethodInvocation, OP143, OP147)
OP147:                  (INS, SimpleName, OP146, OP148 OP157)
OP148:                     (INS, ParenthesizedExpression, OP147, OP149)
OP149:                        (INS, InfixExpression, OP148, OP150 OP151 OP152)
OP150:                           (INS, SimpleName, OP149, null)
OP151:                           (INS, Operator, OP149, null)
OP152:                           (INS, ParenthesizedExpression, OP149, OP153)
OP153:                              (INS, InfixExpression, OP152, OP154 OP155 OP156)
OP154:                                 (INS, SimpleName, OP153, null)
OP155:                                 (INS, Operator, OP153, null)
OP156:                                 (INS, SimpleName, OP153, null)
OP157:                     (INS, ParenthesizedExpression, OP147, OP158)
OP158:                        (INS, InfixExpression, OP157, OP159 OP160 OP161)
OP159:                           (INS, SimpleName, OP158, null)
OP160:                           (INS, Operator, OP158, null)
OP161:                           (INS, SimpleName, OP158, null)





hASList: 
[UPD VariableDeclarationStatement@@long result=Math.round(binomialCoefficientDouble(n,k)); @TO@ long result=1; @AT@ 6045 @LENGTH@ 58
---UPD VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @TO@ result=1 @AT@ 6050 @LENGTH@ 52
------UPD MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
---------UPD SimpleName@@MethodName:round:[binomialCoefficientDouble(n,k)] @TO@ MethodName:log:[binomialCoefficientDouble(n,k)] @AT@ 6064 @LENGTH@ 38
------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @AT@ 6391 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@long, MethodName:binomialCoefficient, @@Argus:int+n+int+k+ @AT@ 6081 @LENGTH@ 64
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6085 @LENGTH@ 9
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 6085 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 6086 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 6089 @LENGTH@ 5
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 6089 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 6090 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 6093 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6108 @LENGTH@ 37
------INS MethodInvocation@@binomialCoefficient(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
---------INS SimpleName@@MethodName:binomialCoefficient:[n, n - k] @TO@ MethodInvocation@@binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6135 @LENGTH@ 1
------------INS InfixExpression@@n - k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6138 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6138 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6139 @LENGTH@ 1
---------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6142 @LENGTH@ 1
, UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n <= 61 @AT@ 6112 @LENGTH@ 152
---DEL InfixExpression@@result == Long.MAX_VALUE @AT@ 6116 @LENGTH@ 24
------DEL QualifiedName@@Long.MAX_VALUE @AT@ 6126 @LENGTH@ 14
---------DEL SimpleName@@Long @AT@ 6126 @LENGTH@ 4
---------DEL SimpleName@@MAX_VALUE @AT@ 6131 @LENGTH@ 9
---DEL ThrowStatement@@ClassInstanceCreation:new ArithmeticException("result too large to represent in a long integer") @AT@ 6156 @LENGTH@ 98
------DEL ClassInstanceCreation@@ArithmeticException["result too large to represent in a long integer"] @AT@ 6162 @LENGTH@ 91
---------DEL New@@new @AT@ 6162 @LENGTH@ 3
---------DEL SimpleType@@ArithmeticException @AT@ 6166 @LENGTH@ 19
---------DEL StringLiteral@@"result too large to represent in a long integer" @AT@ 6203 @LENGTH@ 49
---INS InfixExpression@@n <= 61 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6406 @LENGTH@ 7
------INS SimpleName@@n @TO@ InfixExpression@@n <= 61 @AT@ 6406 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@n <= 61 @AT@ 6407 @LENGTH@ 2
------INS NumberLiteral@@61 @TO@ InfixExpression@@n <= 61 @AT@ 6411 @LENGTH@ 2
---INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6499 @LENGTH@ 105
------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6504 @LENGTH@ 24
---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6504 @LENGTH@ 3
---------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6508 @LENGTH@ 5
------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6508 @LENGTH@ 1
------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6512 @LENGTH@ 1
---------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6515 @LENGTH@ 13
------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6515 @LENGTH@ 1
------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6519 @LENGTH@ 9
---------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6519 @LENGTH@ 5
------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6519 @LENGTH@ 1
------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6520 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6523 @LENGTH@ 1
---------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6524 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6527 @LENGTH@ 1
------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6530 @LENGTH@ 6
---------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6530 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6531 @LENGTH@ 2
---------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6535 @LENGTH@ 1
------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6538 @LENGTH@ 3
---------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6538 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6540 @LENGTH@ 2
------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6543 @LENGTH@ 3
---------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6543 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6545 @LENGTH@ 2
------INS ExpressionStatement@@Assignment:result=result * i / j @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6566 @LENGTH@ 24
---------INS Assignment@@result=result * i / j @TO@ ExpressionStatement@@Assignment:result=result * i / j @AT@ 6566 @LENGTH@ 23
------------INS SimpleName@@result @TO@ Assignment@@result=result * i / j @AT@ 6566 @LENGTH@ 6
------------INS Operator@@= @TO@ Assignment@@result=result * i / j @AT@ 6572 @LENGTH@ 1
------------INS InfixExpression@@result * i / j @TO@ Assignment@@result=result * i / j @AT@ 6575 @LENGTH@ 14
---------------INS InfixExpression@@result * i @TO@ InfixExpression@@result * i / j @AT@ 6575 @LENGTH@ 10
------------------MOV SimpleName@@result @TO@ InfixExpression@@result * i @AT@ 6116 @LENGTH@ 6
------------------MOV Operator@@== @TO@ InfixExpression@@result * i @AT@ 6122 @LENGTH@ 2
------------------INS SimpleName@@i @TO@ InfixExpression@@result * i @AT@ 6584 @LENGTH@ 1
---------------INS Operator@@/ @TO@ InfixExpression@@result * i / j @AT@ 6585 @LENGTH@ 1
---------------INS SimpleName@@j @TO@ InfixExpression@@result * i / j @AT@ 6588 @LENGTH@ 1
---INS IfStatement@@InfixExpression:n <= 66 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6620 @LENGTH@ 1053
------INS InfixExpression@@n <= 66 @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6624 @LENGTH@ 7
---------INS SimpleName@@n @TO@ InfixExpression@@n <= 66 @AT@ 6624 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@n <= 66 @AT@ 6625 @LENGTH@ 2
---------INS NumberLiteral@@66 @TO@ InfixExpression@@n <= 66 @AT@ 6629 @LENGTH@ 2
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6788 @LENGTH@ 517
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6793 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6793 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6797 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6797 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6801 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6804 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6804 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6808 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6808 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6808 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6809 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6812 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6813 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6816 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6819 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6819 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6820 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6824 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6827 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6827 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6829 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6832 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6832 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6834 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7217 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7217 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7222 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7222 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7226 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7226 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7230 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7233 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7253 @LENGTH@ 38
------------INS Assignment@@result=(result / (j / d)) * (i / d) @TO@ ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 37
---------------INS SimpleName@@result @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7259 @LENGTH@ 1
---------------INS InfixExpression@@(result / (j / d)) * (i / d) @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 28
------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 18
---------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7263 @LENGTH@ 16
------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7263 @LENGTH@ 6
------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7269 @LENGTH@ 1
------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7272 @LENGTH@ 7
---------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7273 @LENGTH@ 5
------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7273 @LENGTH@ 1
------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7274 @LENGTH@ 1
------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7277 @LENGTH@ 1
------------------INS Operator@@* @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7280 @LENGTH@ 1
------------------INS ParenthesizedExpression@@(i / d) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7283 @LENGTH@ 7
---------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7284 @LENGTH@ 5
------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7284 @LENGTH@ 1
------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7285 @LENGTH@ 1
------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7288 @LENGTH@ 1
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 7496 @LENGTH@ 167
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7501 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7501 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7505 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 7505 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 7509 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7512 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7512 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7516 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 7516 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 7516 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 7517 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 7520 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 7521 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 7524 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7527 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 7527 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 7528 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 7532 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7535 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 7535 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 7537 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7540 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 7540 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 7542 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7563 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7563 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7568 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7568 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7572 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7572 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7576 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7579 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7599 @LENGTH@ 50
------------INS Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 49
---------------INS SimpleName@@result @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7605 @LENGTH@ 1
---------------INS MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
------------------INS SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @TO@ MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
---------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7620 @LENGTH@ 18
------------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7621 @LENGTH@ 16
---------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7621 @LENGTH@ 6
---------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7627 @LENGTH@ 1
---------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7630 @LENGTH@ 7
------------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7631 @LENGTH@ 5
---------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7631 @LENGTH@ 1
---------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7632 @LENGTH@ 1
---------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7635 @LENGTH@ 1
---------------------INS ParenthesizedExpression@@(i / d) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7640 @LENGTH@ 7
------------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7641 @LENGTH@ 5
---------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7641 @LENGTH@ 1
---------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7642 @LENGTH@ 1
---------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7645 @LENGTH@ 1
, DEL ReturnStatement@@MethodInvocation:Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8386 @LENGTH@ 64
---DEL MethodInvocation@@Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8393 @LENGTH@ 56
------DEL SimpleName@@Name:Math @AT@ 8393 @LENGTH@ 4
------DEL SimpleName@@MethodName:floor:[Math.exp(binomialCoefficientLog(n,k)) + 0.5] @AT@ 8398 @LENGTH@ 51
---------DEL InfixExpression@@Math.exp(binomialCoefficientLog(n,k)) + 0.5 @AT@ 8404 @LENGTH@ 44
------------DEL MethodInvocation@@Math.exp(binomialCoefficientLog(n,k)) @AT@ 8404 @LENGTH@ 38
---------------DEL SimpleName@@MethodName:exp:[binomialCoefficientLog(n,k)] @AT@ 8409 @LENGTH@ 33
------------------DEL MethodInvocation@@binomialCoefficientLog(n,k) @AT@ 8413 @LENGTH@ 28
, INS IfStatement@@InfixExpression:n < k @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8790 @LENGTH@ 138
---INS InfixExpression@@n < k @TO@ IfStatement@@InfixExpression:n < k @AT@ 8794 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < k @AT@ 8794 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < k @AT@ 8795 @LENGTH@ 1
------INS SimpleName@@k @TO@ InfixExpression@@n < k @AT@ 8798 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < k @AT@ 8815 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @AT@ 8821 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8821 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8825 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= k for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8867 @LENGTH@ 49
, INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8937 @LENGTH@ 138
---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8941 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < 0 @AT@ 8941 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 0 @AT@ 8942 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 @AT@ 8945 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8962 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @AT@ 8968 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8968 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8972 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= 0 for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 9014 @LENGTH@ 49
, INS IfStatement@@InfixExpression:(n == k) || (k == 0) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9084 @LENGTH@ 60
---INS InfixExpression@@(n == k) || (k == 0) @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 20
------INS ParenthesizedExpression@@(n == k) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 8
---------INS InfixExpression@@n == k @TO@ ParenthesizedExpression@@(n == k) @AT@ 9089 @LENGTH@ 6
------------INS SimpleName@@n @TO@ InfixExpression@@n == k @AT@ 9089 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@n == k @AT@ 9090 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@n == k @AT@ 9094 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9096 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == 0) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9100 @LENGTH@ 8
---------INS InfixExpression@@k == 0 @TO@ ParenthesizedExpression@@(k == 0) @AT@ 9101 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 0 @AT@ 9101 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 0 @AT@ 9102 @LENGTH@ 2
------------INS NumberLiteral@@0 @TO@ InfixExpression@@k == 0 @AT@ 9106 @LENGTH@ 1
---INS ReturnStatement@@NumberLiteral:1d @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9124 @LENGTH@ 10
------INS NumberLiteral@@1d @TO@ ReturnStatement@@NumberLiteral:1d @AT@ 9131 @LENGTH@ 2
, INS IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9153 @LENGTH@ 63
---INS InfixExpression@@(k == 1) || (k == n - 1) @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 24
------INS ParenthesizedExpression@@(k == 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 8
---------INS InfixExpression@@k == 1 @TO@ ParenthesizedExpression@@(k == 1) @AT@ 9158 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 1 @AT@ 9158 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 1 @AT@ 9159 @LENGTH@ 2
------------INS NumberLiteral@@1 @TO@ InfixExpression@@k == 1 @AT@ 9163 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9165 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == n - 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9169 @LENGTH@ 12
---------INS InfixExpression@@k == n - 1 @TO@ ParenthesizedExpression@@(k == n - 1) @AT@ 9170 @LENGTH@ 10
------------INS SimpleName@@k @TO@ InfixExpression@@k == n - 1 @AT@ 9170 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == n - 1 @AT@ 9171 @LENGTH@ 2
------------INS InfixExpression@@n - 1 @TO@ InfixExpression@@k == n - 1 @AT@ 9175 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - 1 @AT@ 9175 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - 1 @AT@ 9176 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - 1 @AT@ 9179 @LENGTH@ 1
---INS ReturnStatement@@SimpleName:n @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9197 @LENGTH@ 9
------INS SimpleName@@n @TO@ ReturnStatement@@SimpleName:n @AT@ 9204 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9225 @LENGTH@ 80
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9229 @LENGTH@ 7
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 9229 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 9230 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 9233 @LENGTH@ 3
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 9233 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 9234 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 9235 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9252 @LENGTH@ 43
------INS MethodInvocation@@binomialCoefficientDouble(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @AT@ 9259 @LENGTH@ 35
---------MOV SimpleName@@Name:Math @TO@ MethodInvocation@@binomialCoefficientDouble(n,n - k) @AT@ 8404 @LENGTH@ 4
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9314 @LENGTH@ 68
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9318 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 9318 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 9319 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 9322 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9340 @LENGTH@ 32
------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @AT@ 9347 @LENGTH@ 24
---------MOV SimpleName@@MethodName:binomialCoefficientLog:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 8413 @LENGTH@ 28
, INS VariableDeclarationStatement@@double result=1d; @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9400 @LENGTH@ 19
---INS PrimitiveType@@double @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9400 @LENGTH@ 6
---INS VariableDeclarationFragment@@result=1d @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9407 @LENGTH@ 11
------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=1d @AT@ 9407 @LENGTH@ 6
------INS NumberLiteral@@1d @TO@ VariableDeclarationFragment@@result=1d @AT@ 9416 @LENGTH@ 2
, INS ForStatement@@[int i=1];i <= k; [i++] @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9428 @LENGTH@ 96
---INS VariableDeclarationExpression@@int i=1 @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9433 @LENGTH@ 9
------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9433 @LENGTH@ 3
------INS VariableDeclarationFragment@@i=1 @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9437 @LENGTH@ 5
---------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=1 @AT@ 9437 @LENGTH@ 1
---------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@i=1 @AT@ 9441 @LENGTH@ 1
---INS InfixExpression@@i <= k @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9444 @LENGTH@ 6
------INS SimpleName@@i @TO@ InfixExpression@@i <= k @AT@ 9444 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@i <= k @AT@ 9445 @LENGTH@ 2
------INS SimpleName@@k @TO@ InfixExpression@@i <= k @AT@ 9449 @LENGTH@ 1
---INS PostfixExpression@@i++ @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9452 @LENGTH@ 3
------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 9452 @LENGTH@ 1
------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 9454 @LENGTH@ 2
---INS ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9472 @LENGTH@ 42
------INS Assignment@@result*=(double)(n - k + i) / (double)i @TO@ ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 41
---------INS SimpleName@@result @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 6
---------INS Operator@@*= @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9478 @LENGTH@ 2
---------INS InfixExpression@@(double)(n - k + i) / (double)i @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 31
------------INS CastExpression@@(double)(n - k + i) @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 19
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)(n - k + i) @AT@ 9483 @LENGTH@ 6
---------------INS ParenthesizedExpression@@(n - k + i) @TO@ CastExpression@@(double)(n - k + i) @AT@ 9490 @LENGTH@ 11
------------------INS InfixExpression@@n - k + i @TO@ ParenthesizedExpression@@(n - k + i) @AT@ 9491 @LENGTH@ 9
---------------------MOV Operator@@+ @TO@ InfixExpression@@n - k + i @AT@ 8442 @LENGTH@ 1
---------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + i @AT@ 9491 @LENGTH@ 5
------------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 9491 @LENGTH@ 1
------------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 9492 @LENGTH@ 1
------------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 9495 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ InfixExpression@@n - k + i @AT@ 9499 @LENGTH@ 1
------------INS Operator@@/ @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9501 @LENGTH@ 1
------------INS CastExpression@@(double)i @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9504 @LENGTH@ 9
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)i @AT@ 9505 @LENGTH@ 6
---------------INS SimpleName@@i @TO@ CastExpression@@(double)i @AT@ 9512 @LENGTH@ 1
, INS ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9536 @LENGTH@ 32
---INS MethodInvocation@@Math.floor(result + 0.5) @TO@ ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 24
------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 4
------INS SimpleName@@MethodName:floor:[result + 0.5] @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9548 @LENGTH@ 19
---------INS InfixExpression@@result + 0.5 @TO@ SimpleName@@MethodName:floor:[result + 0.5] @AT@ 9554 @LENGTH@ 12
------------MOV NumberLiteral@@0.5 @TO@ InfixExpression@@result + 0.5 @AT@ 8445 @LENGTH@ 3
------------INS SimpleName@@result @TO@ InfixExpression@@result + 0.5 @AT@ 9554 @LENGTH@ 6
------------INS Operator@@+ @TO@ InfixExpression@@result + 0.5 @AT@ 9560 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 10974 @LENGTH@ 80
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 10978 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 10978 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 10979 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 10982 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 11002 @LENGTH@ 42
------INS MethodInvocation@@Math.log(binomialCoefficient(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 34
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 4
---------INS SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11014 @LENGTH@ 29
------------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @AT@ 11018 @LENGTH@ 24
---------------INS SimpleName@@MethodName:binomialCoefficient:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 11018 @LENGTH@ 24
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11038 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11040 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 1030 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 11221 @LENGTH@ 88
---INS InfixExpression@@n < 1030 @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11225 @LENGTH@ 8
------INS SimpleName@@n @TO@ InfixExpression@@n < 1030 @AT@ 11225 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 1030 @AT@ 11226 @LENGTH@ 1
------INS NumberLiteral@@1030 @TO@ InfixExpression@@n < 1030 @AT@ 11229 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11250 @LENGTH@ 49
------MOV MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
]

CII:
OP1:(DEL, ReturnStatement, null, OP2)
OP2:   (DEL, MethodInvocation, OP1, OP3 OP4)
OP3:      (DEL, SimpleName, OP2, null)
OP4:      (DEL, SimpleName, OP2, OP5)
OP5:         (DEL, InfixExpression, OP4, OP6)
OP6:            (DEL, MethodInvocation, OP5, OP7)
OP7:               (DEL, SimpleName, OP6, OP8)
OP8:                  (DEL, MethodInvocation, OP7, null)





hASList: 
[UPD VariableDeclarationStatement@@long result=Math.round(binomialCoefficientDouble(n,k)); @TO@ long result=1; @AT@ 6045 @LENGTH@ 58
---UPD VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @TO@ result=1 @AT@ 6050 @LENGTH@ 52
------UPD MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
---------UPD SimpleName@@MethodName:round:[binomialCoefficientDouble(n,k)] @TO@ MethodName:log:[binomialCoefficientDouble(n,k)] @AT@ 6064 @LENGTH@ 38
------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @AT@ 6391 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@long, MethodName:binomialCoefficient, @@Argus:int+n+int+k+ @AT@ 6081 @LENGTH@ 64
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6085 @LENGTH@ 9
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 6085 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 6086 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 6089 @LENGTH@ 5
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 6089 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 6090 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 6093 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6108 @LENGTH@ 37
------INS MethodInvocation@@binomialCoefficient(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
---------INS SimpleName@@MethodName:binomialCoefficient:[n, n - k] @TO@ MethodInvocation@@binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6135 @LENGTH@ 1
------------INS InfixExpression@@n - k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6138 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6138 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6139 @LENGTH@ 1
---------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6142 @LENGTH@ 1
, UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n <= 61 @AT@ 6112 @LENGTH@ 152
---DEL InfixExpression@@result == Long.MAX_VALUE @AT@ 6116 @LENGTH@ 24
------DEL QualifiedName@@Long.MAX_VALUE @AT@ 6126 @LENGTH@ 14
---------DEL SimpleName@@Long @AT@ 6126 @LENGTH@ 4
---------DEL SimpleName@@MAX_VALUE @AT@ 6131 @LENGTH@ 9
---DEL ThrowStatement@@ClassInstanceCreation:new ArithmeticException("result too large to represent in a long integer") @AT@ 6156 @LENGTH@ 98
------DEL ClassInstanceCreation@@ArithmeticException["result too large to represent in a long integer"] @AT@ 6162 @LENGTH@ 91
---------DEL New@@new @AT@ 6162 @LENGTH@ 3
---------DEL SimpleType@@ArithmeticException @AT@ 6166 @LENGTH@ 19
---------DEL StringLiteral@@"result too large to represent in a long integer" @AT@ 6203 @LENGTH@ 49
---INS InfixExpression@@n <= 61 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6406 @LENGTH@ 7
------INS SimpleName@@n @TO@ InfixExpression@@n <= 61 @AT@ 6406 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@n <= 61 @AT@ 6407 @LENGTH@ 2
------INS NumberLiteral@@61 @TO@ InfixExpression@@n <= 61 @AT@ 6411 @LENGTH@ 2
---INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6499 @LENGTH@ 105
------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6504 @LENGTH@ 24
---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6504 @LENGTH@ 3
---------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6508 @LENGTH@ 5
------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6508 @LENGTH@ 1
------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6512 @LENGTH@ 1
---------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6515 @LENGTH@ 13
------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6515 @LENGTH@ 1
------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6519 @LENGTH@ 9
---------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6519 @LENGTH@ 5
------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6519 @LENGTH@ 1
------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6520 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6523 @LENGTH@ 1
---------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6524 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6527 @LENGTH@ 1
------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6530 @LENGTH@ 6
---------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6530 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6531 @LENGTH@ 2
---------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6535 @LENGTH@ 1
------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6538 @LENGTH@ 3
---------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6538 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6540 @LENGTH@ 2
------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6543 @LENGTH@ 3
---------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6543 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6545 @LENGTH@ 2
------INS ExpressionStatement@@Assignment:result=result * i / j @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6566 @LENGTH@ 24
---------INS Assignment@@result=result * i / j @TO@ ExpressionStatement@@Assignment:result=result * i / j @AT@ 6566 @LENGTH@ 23
------------INS SimpleName@@result @TO@ Assignment@@result=result * i / j @AT@ 6566 @LENGTH@ 6
------------INS Operator@@= @TO@ Assignment@@result=result * i / j @AT@ 6572 @LENGTH@ 1
------------INS InfixExpression@@result * i / j @TO@ Assignment@@result=result * i / j @AT@ 6575 @LENGTH@ 14
---------------INS InfixExpression@@result * i @TO@ InfixExpression@@result * i / j @AT@ 6575 @LENGTH@ 10
------------------MOV SimpleName@@result @TO@ InfixExpression@@result * i @AT@ 6116 @LENGTH@ 6
------------------MOV Operator@@== @TO@ InfixExpression@@result * i @AT@ 6122 @LENGTH@ 2
------------------INS SimpleName@@i @TO@ InfixExpression@@result * i @AT@ 6584 @LENGTH@ 1
---------------INS Operator@@/ @TO@ InfixExpression@@result * i / j @AT@ 6585 @LENGTH@ 1
---------------INS SimpleName@@j @TO@ InfixExpression@@result * i / j @AT@ 6588 @LENGTH@ 1
---INS IfStatement@@InfixExpression:n <= 66 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6620 @LENGTH@ 1053
------INS InfixExpression@@n <= 66 @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6624 @LENGTH@ 7
---------INS SimpleName@@n @TO@ InfixExpression@@n <= 66 @AT@ 6624 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@n <= 66 @AT@ 6625 @LENGTH@ 2
---------INS NumberLiteral@@66 @TO@ InfixExpression@@n <= 66 @AT@ 6629 @LENGTH@ 2
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6788 @LENGTH@ 517
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6793 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6793 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6797 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6797 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6801 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6804 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6804 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6808 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6808 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6808 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6809 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6812 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6813 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6816 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6819 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6819 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6820 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6824 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6827 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6827 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6829 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6832 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6832 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6834 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7217 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7217 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7222 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7222 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7226 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7226 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7230 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7233 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7253 @LENGTH@ 38
------------INS Assignment@@result=(result / (j / d)) * (i / d) @TO@ ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 37
---------------INS SimpleName@@result @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7259 @LENGTH@ 1
---------------INS InfixExpression@@(result / (j / d)) * (i / d) @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 28
------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 18
---------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7263 @LENGTH@ 16
------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7263 @LENGTH@ 6
------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7269 @LENGTH@ 1
------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7272 @LENGTH@ 7
---------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7273 @LENGTH@ 5
------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7273 @LENGTH@ 1
------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7274 @LENGTH@ 1
------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7277 @LENGTH@ 1
------------------INS Operator@@* @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7280 @LENGTH@ 1
------------------INS ParenthesizedExpression@@(i / d) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7283 @LENGTH@ 7
---------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7284 @LENGTH@ 5
------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7284 @LENGTH@ 1
------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7285 @LENGTH@ 1
------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7288 @LENGTH@ 1
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 7496 @LENGTH@ 167
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7501 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7501 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7505 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 7505 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 7509 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7512 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7512 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7516 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 7516 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 7516 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 7517 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 7520 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 7521 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 7524 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7527 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 7527 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 7528 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 7532 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7535 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 7535 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 7537 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7540 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 7540 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 7542 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7563 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7563 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7568 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7568 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7572 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7572 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7576 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7579 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7599 @LENGTH@ 50
------------INS Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 49
---------------INS SimpleName@@result @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7605 @LENGTH@ 1
---------------INS MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
------------------INS SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @TO@ MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
---------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7620 @LENGTH@ 18
------------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7621 @LENGTH@ 16
---------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7621 @LENGTH@ 6
---------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7627 @LENGTH@ 1
---------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7630 @LENGTH@ 7
------------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7631 @LENGTH@ 5
---------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7631 @LENGTH@ 1
---------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7632 @LENGTH@ 1
---------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7635 @LENGTH@ 1
---------------------INS ParenthesizedExpression@@(i / d) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7640 @LENGTH@ 7
------------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7641 @LENGTH@ 5
---------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7641 @LENGTH@ 1
---------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7642 @LENGTH@ 1
---------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7645 @LENGTH@ 1
, DEL ReturnStatement@@MethodInvocation:Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8386 @LENGTH@ 64
---DEL MethodInvocation@@Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8393 @LENGTH@ 56
------DEL SimpleName@@Name:Math @AT@ 8393 @LENGTH@ 4
------DEL SimpleName@@MethodName:floor:[Math.exp(binomialCoefficientLog(n,k)) + 0.5] @AT@ 8398 @LENGTH@ 51
---------DEL InfixExpression@@Math.exp(binomialCoefficientLog(n,k)) + 0.5 @AT@ 8404 @LENGTH@ 44
------------DEL MethodInvocation@@Math.exp(binomialCoefficientLog(n,k)) @AT@ 8404 @LENGTH@ 38
---------------DEL SimpleName@@MethodName:exp:[binomialCoefficientLog(n,k)] @AT@ 8409 @LENGTH@ 33
------------------DEL MethodInvocation@@binomialCoefficientLog(n,k) @AT@ 8413 @LENGTH@ 28
, INS IfStatement@@InfixExpression:n < k @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8790 @LENGTH@ 138
---INS InfixExpression@@n < k @TO@ IfStatement@@InfixExpression:n < k @AT@ 8794 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < k @AT@ 8794 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < k @AT@ 8795 @LENGTH@ 1
------INS SimpleName@@k @TO@ InfixExpression@@n < k @AT@ 8798 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < k @AT@ 8815 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @AT@ 8821 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8821 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8825 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= k for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8867 @LENGTH@ 49
, INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8937 @LENGTH@ 138
---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8941 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < 0 @AT@ 8941 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 0 @AT@ 8942 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 @AT@ 8945 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8962 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @AT@ 8968 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8968 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8972 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= 0 for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 9014 @LENGTH@ 49
, INS IfStatement@@InfixExpression:(n == k) || (k == 0) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9084 @LENGTH@ 60
---INS InfixExpression@@(n == k) || (k == 0) @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 20
------INS ParenthesizedExpression@@(n == k) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 8
---------INS InfixExpression@@n == k @TO@ ParenthesizedExpression@@(n == k) @AT@ 9089 @LENGTH@ 6
------------INS SimpleName@@n @TO@ InfixExpression@@n == k @AT@ 9089 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@n == k @AT@ 9090 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@n == k @AT@ 9094 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9096 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == 0) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9100 @LENGTH@ 8
---------INS InfixExpression@@k == 0 @TO@ ParenthesizedExpression@@(k == 0) @AT@ 9101 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 0 @AT@ 9101 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 0 @AT@ 9102 @LENGTH@ 2
------------INS NumberLiteral@@0 @TO@ InfixExpression@@k == 0 @AT@ 9106 @LENGTH@ 1
---INS ReturnStatement@@NumberLiteral:1d @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9124 @LENGTH@ 10
------INS NumberLiteral@@1d @TO@ ReturnStatement@@NumberLiteral:1d @AT@ 9131 @LENGTH@ 2
, INS IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9153 @LENGTH@ 63
---INS InfixExpression@@(k == 1) || (k == n - 1) @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 24
------INS ParenthesizedExpression@@(k == 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 8
---------INS InfixExpression@@k == 1 @TO@ ParenthesizedExpression@@(k == 1) @AT@ 9158 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 1 @AT@ 9158 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 1 @AT@ 9159 @LENGTH@ 2
------------INS NumberLiteral@@1 @TO@ InfixExpression@@k == 1 @AT@ 9163 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9165 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == n - 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9169 @LENGTH@ 12
---------INS InfixExpression@@k == n - 1 @TO@ ParenthesizedExpression@@(k == n - 1) @AT@ 9170 @LENGTH@ 10
------------INS SimpleName@@k @TO@ InfixExpression@@k == n - 1 @AT@ 9170 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == n - 1 @AT@ 9171 @LENGTH@ 2
------------INS InfixExpression@@n - 1 @TO@ InfixExpression@@k == n - 1 @AT@ 9175 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - 1 @AT@ 9175 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - 1 @AT@ 9176 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - 1 @AT@ 9179 @LENGTH@ 1
---INS ReturnStatement@@SimpleName:n @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9197 @LENGTH@ 9
------INS SimpleName@@n @TO@ ReturnStatement@@SimpleName:n @AT@ 9204 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9225 @LENGTH@ 80
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9229 @LENGTH@ 7
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 9229 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 9230 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 9233 @LENGTH@ 3
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 9233 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 9234 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 9235 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9252 @LENGTH@ 43
------INS MethodInvocation@@binomialCoefficientDouble(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @AT@ 9259 @LENGTH@ 35
---------MOV SimpleName@@Name:Math @TO@ MethodInvocation@@binomialCoefficientDouble(n,n - k) @AT@ 8404 @LENGTH@ 4
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9314 @LENGTH@ 68
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9318 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 9318 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 9319 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 9322 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9340 @LENGTH@ 32
------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @AT@ 9347 @LENGTH@ 24
---------MOV SimpleName@@MethodName:binomialCoefficientLog:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 8413 @LENGTH@ 28
, INS VariableDeclarationStatement@@double result=1d; @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9400 @LENGTH@ 19
---INS PrimitiveType@@double @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9400 @LENGTH@ 6
---INS VariableDeclarationFragment@@result=1d @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9407 @LENGTH@ 11
------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=1d @AT@ 9407 @LENGTH@ 6
------INS NumberLiteral@@1d @TO@ VariableDeclarationFragment@@result=1d @AT@ 9416 @LENGTH@ 2
, INS ForStatement@@[int i=1];i <= k; [i++] @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9428 @LENGTH@ 96
---INS VariableDeclarationExpression@@int i=1 @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9433 @LENGTH@ 9
------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9433 @LENGTH@ 3
------INS VariableDeclarationFragment@@i=1 @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9437 @LENGTH@ 5
---------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=1 @AT@ 9437 @LENGTH@ 1
---------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@i=1 @AT@ 9441 @LENGTH@ 1
---INS InfixExpression@@i <= k @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9444 @LENGTH@ 6
------INS SimpleName@@i @TO@ InfixExpression@@i <= k @AT@ 9444 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@i <= k @AT@ 9445 @LENGTH@ 2
------INS SimpleName@@k @TO@ InfixExpression@@i <= k @AT@ 9449 @LENGTH@ 1
---INS PostfixExpression@@i++ @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9452 @LENGTH@ 3
------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 9452 @LENGTH@ 1
------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 9454 @LENGTH@ 2
---INS ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9472 @LENGTH@ 42
------INS Assignment@@result*=(double)(n - k + i) / (double)i @TO@ ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 41
---------INS SimpleName@@result @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 6
---------INS Operator@@*= @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9478 @LENGTH@ 2
---------INS InfixExpression@@(double)(n - k + i) / (double)i @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 31
------------INS CastExpression@@(double)(n - k + i) @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 19
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)(n - k + i) @AT@ 9483 @LENGTH@ 6
---------------INS ParenthesizedExpression@@(n - k + i) @TO@ CastExpression@@(double)(n - k + i) @AT@ 9490 @LENGTH@ 11
------------------INS InfixExpression@@n - k + i @TO@ ParenthesizedExpression@@(n - k + i) @AT@ 9491 @LENGTH@ 9
---------------------MOV Operator@@+ @TO@ InfixExpression@@n - k + i @AT@ 8442 @LENGTH@ 1
---------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + i @AT@ 9491 @LENGTH@ 5
------------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 9491 @LENGTH@ 1
------------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 9492 @LENGTH@ 1
------------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 9495 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ InfixExpression@@n - k + i @AT@ 9499 @LENGTH@ 1
------------INS Operator@@/ @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9501 @LENGTH@ 1
------------INS CastExpression@@(double)i @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9504 @LENGTH@ 9
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)i @AT@ 9505 @LENGTH@ 6
---------------INS SimpleName@@i @TO@ CastExpression@@(double)i @AT@ 9512 @LENGTH@ 1
, INS ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9536 @LENGTH@ 32
---INS MethodInvocation@@Math.floor(result + 0.5) @TO@ ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 24
------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 4
------INS SimpleName@@MethodName:floor:[result + 0.5] @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9548 @LENGTH@ 19
---------INS InfixExpression@@result + 0.5 @TO@ SimpleName@@MethodName:floor:[result + 0.5] @AT@ 9554 @LENGTH@ 12
------------MOV NumberLiteral@@0.5 @TO@ InfixExpression@@result + 0.5 @AT@ 8445 @LENGTH@ 3
------------INS SimpleName@@result @TO@ InfixExpression@@result + 0.5 @AT@ 9554 @LENGTH@ 6
------------INS Operator@@+ @TO@ InfixExpression@@result + 0.5 @AT@ 9560 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 10974 @LENGTH@ 80
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 10978 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 10978 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 10979 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 10982 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 11002 @LENGTH@ 42
------INS MethodInvocation@@Math.log(binomialCoefficient(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 34
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 4
---------INS SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11014 @LENGTH@ 29
------------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @AT@ 11018 @LENGTH@ 24
---------------INS SimpleName@@MethodName:binomialCoefficient:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 11018 @LENGTH@ 24
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11038 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11040 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 1030 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 11221 @LENGTH@ 88
---INS InfixExpression@@n < 1030 @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11225 @LENGTH@ 8
------INS SimpleName@@n @TO@ InfixExpression@@n < 1030 @AT@ 11225 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 1030 @AT@ 11226 @LENGTH@ 1
------INS NumberLiteral@@1030 @TO@ InfixExpression@@n < 1030 @AT@ 11229 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11250 @LENGTH@ 49
------MOV MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
]

CII:
OP1:(INS, IfStatement, null, OP2 OP6)
OP2:   (INS, InfixExpression, OP1, OP3 OP4 OP5)
OP3:      (INS, SimpleName, OP2, null)
OP4:      (INS, Operator, OP2, null)
OP5:      (INS, SimpleName, OP2, null)
OP6:   (INS, ThrowStatement, OP1, OP7)
OP7:      (INS, ClassInstanceCreation, OP6, OP8 OP9 OP10)
OP8:         (INS, New, OP7, null)
OP9:         (INS, SimpleType, OP7, null)
OP10:         (INS, StringLiteral, OP7, null)





hASList: 
[UPD VariableDeclarationStatement@@long result=Math.round(binomialCoefficientDouble(n,k)); @TO@ long result=1; @AT@ 6045 @LENGTH@ 58
---UPD VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @TO@ result=1 @AT@ 6050 @LENGTH@ 52
------UPD MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
---------UPD SimpleName@@MethodName:round:[binomialCoefficientDouble(n,k)] @TO@ MethodName:log:[binomialCoefficientDouble(n,k)] @AT@ 6064 @LENGTH@ 38
------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @AT@ 6391 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@long, MethodName:binomialCoefficient, @@Argus:int+n+int+k+ @AT@ 6081 @LENGTH@ 64
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6085 @LENGTH@ 9
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 6085 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 6086 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 6089 @LENGTH@ 5
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 6089 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 6090 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 6093 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6108 @LENGTH@ 37
------INS MethodInvocation@@binomialCoefficient(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
---------INS SimpleName@@MethodName:binomialCoefficient:[n, n - k] @TO@ MethodInvocation@@binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6135 @LENGTH@ 1
------------INS InfixExpression@@n - k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6138 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6138 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6139 @LENGTH@ 1
---------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6142 @LENGTH@ 1
, UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n <= 61 @AT@ 6112 @LENGTH@ 152
---DEL InfixExpression@@result == Long.MAX_VALUE @AT@ 6116 @LENGTH@ 24
------DEL QualifiedName@@Long.MAX_VALUE @AT@ 6126 @LENGTH@ 14
---------DEL SimpleName@@Long @AT@ 6126 @LENGTH@ 4
---------DEL SimpleName@@MAX_VALUE @AT@ 6131 @LENGTH@ 9
---DEL ThrowStatement@@ClassInstanceCreation:new ArithmeticException("result too large to represent in a long integer") @AT@ 6156 @LENGTH@ 98
------DEL ClassInstanceCreation@@ArithmeticException["result too large to represent in a long integer"] @AT@ 6162 @LENGTH@ 91
---------DEL New@@new @AT@ 6162 @LENGTH@ 3
---------DEL SimpleType@@ArithmeticException @AT@ 6166 @LENGTH@ 19
---------DEL StringLiteral@@"result too large to represent in a long integer" @AT@ 6203 @LENGTH@ 49
---INS InfixExpression@@n <= 61 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6406 @LENGTH@ 7
------INS SimpleName@@n @TO@ InfixExpression@@n <= 61 @AT@ 6406 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@n <= 61 @AT@ 6407 @LENGTH@ 2
------INS NumberLiteral@@61 @TO@ InfixExpression@@n <= 61 @AT@ 6411 @LENGTH@ 2
---INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6499 @LENGTH@ 105
------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6504 @LENGTH@ 24
---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6504 @LENGTH@ 3
---------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6508 @LENGTH@ 5
------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6508 @LENGTH@ 1
------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6512 @LENGTH@ 1
---------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6515 @LENGTH@ 13
------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6515 @LENGTH@ 1
------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6519 @LENGTH@ 9
---------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6519 @LENGTH@ 5
------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6519 @LENGTH@ 1
------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6520 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6523 @LENGTH@ 1
---------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6524 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6527 @LENGTH@ 1
------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6530 @LENGTH@ 6
---------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6530 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6531 @LENGTH@ 2
---------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6535 @LENGTH@ 1
------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6538 @LENGTH@ 3
---------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6538 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6540 @LENGTH@ 2
------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6543 @LENGTH@ 3
---------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6543 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6545 @LENGTH@ 2
------INS ExpressionStatement@@Assignment:result=result * i / j @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6566 @LENGTH@ 24
---------INS Assignment@@result=result * i / j @TO@ ExpressionStatement@@Assignment:result=result * i / j @AT@ 6566 @LENGTH@ 23
------------INS SimpleName@@result @TO@ Assignment@@result=result * i / j @AT@ 6566 @LENGTH@ 6
------------INS Operator@@= @TO@ Assignment@@result=result * i / j @AT@ 6572 @LENGTH@ 1
------------INS InfixExpression@@result * i / j @TO@ Assignment@@result=result * i / j @AT@ 6575 @LENGTH@ 14
---------------INS InfixExpression@@result * i @TO@ InfixExpression@@result * i / j @AT@ 6575 @LENGTH@ 10
------------------MOV SimpleName@@result @TO@ InfixExpression@@result * i @AT@ 6116 @LENGTH@ 6
------------------MOV Operator@@== @TO@ InfixExpression@@result * i @AT@ 6122 @LENGTH@ 2
------------------INS SimpleName@@i @TO@ InfixExpression@@result * i @AT@ 6584 @LENGTH@ 1
---------------INS Operator@@/ @TO@ InfixExpression@@result * i / j @AT@ 6585 @LENGTH@ 1
---------------INS SimpleName@@j @TO@ InfixExpression@@result * i / j @AT@ 6588 @LENGTH@ 1
---INS IfStatement@@InfixExpression:n <= 66 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6620 @LENGTH@ 1053
------INS InfixExpression@@n <= 66 @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6624 @LENGTH@ 7
---------INS SimpleName@@n @TO@ InfixExpression@@n <= 66 @AT@ 6624 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@n <= 66 @AT@ 6625 @LENGTH@ 2
---------INS NumberLiteral@@66 @TO@ InfixExpression@@n <= 66 @AT@ 6629 @LENGTH@ 2
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6788 @LENGTH@ 517
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6793 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6793 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6797 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6797 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6801 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6804 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6804 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6808 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6808 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6808 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6809 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6812 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6813 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6816 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6819 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6819 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6820 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6824 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6827 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6827 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6829 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6832 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6832 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6834 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7217 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7217 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7222 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7222 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7226 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7226 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7230 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7233 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7253 @LENGTH@ 38
------------INS Assignment@@result=(result / (j / d)) * (i / d) @TO@ ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 37
---------------INS SimpleName@@result @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7259 @LENGTH@ 1
---------------INS InfixExpression@@(result / (j / d)) * (i / d) @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 28
------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 18
---------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7263 @LENGTH@ 16
------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7263 @LENGTH@ 6
------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7269 @LENGTH@ 1
------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7272 @LENGTH@ 7
---------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7273 @LENGTH@ 5
------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7273 @LENGTH@ 1
------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7274 @LENGTH@ 1
------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7277 @LENGTH@ 1
------------------INS Operator@@* @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7280 @LENGTH@ 1
------------------INS ParenthesizedExpression@@(i / d) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7283 @LENGTH@ 7
---------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7284 @LENGTH@ 5
------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7284 @LENGTH@ 1
------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7285 @LENGTH@ 1
------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7288 @LENGTH@ 1
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 7496 @LENGTH@ 167
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7501 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7501 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7505 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 7505 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 7509 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7512 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7512 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7516 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 7516 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 7516 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 7517 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 7520 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 7521 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 7524 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7527 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 7527 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 7528 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 7532 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7535 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 7535 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 7537 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7540 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 7540 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 7542 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7563 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7563 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7568 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7568 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7572 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7572 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7576 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7579 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7599 @LENGTH@ 50
------------INS Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 49
---------------INS SimpleName@@result @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7605 @LENGTH@ 1
---------------INS MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
------------------INS SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @TO@ MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
---------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7620 @LENGTH@ 18
------------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7621 @LENGTH@ 16
---------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7621 @LENGTH@ 6
---------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7627 @LENGTH@ 1
---------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7630 @LENGTH@ 7
------------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7631 @LENGTH@ 5
---------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7631 @LENGTH@ 1
---------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7632 @LENGTH@ 1
---------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7635 @LENGTH@ 1
---------------------INS ParenthesizedExpression@@(i / d) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7640 @LENGTH@ 7
------------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7641 @LENGTH@ 5
---------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7641 @LENGTH@ 1
---------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7642 @LENGTH@ 1
---------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7645 @LENGTH@ 1
, DEL ReturnStatement@@MethodInvocation:Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8386 @LENGTH@ 64
---DEL MethodInvocation@@Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8393 @LENGTH@ 56
------DEL SimpleName@@Name:Math @AT@ 8393 @LENGTH@ 4
------DEL SimpleName@@MethodName:floor:[Math.exp(binomialCoefficientLog(n,k)) + 0.5] @AT@ 8398 @LENGTH@ 51
---------DEL InfixExpression@@Math.exp(binomialCoefficientLog(n,k)) + 0.5 @AT@ 8404 @LENGTH@ 44
------------DEL MethodInvocation@@Math.exp(binomialCoefficientLog(n,k)) @AT@ 8404 @LENGTH@ 38
---------------DEL SimpleName@@MethodName:exp:[binomialCoefficientLog(n,k)] @AT@ 8409 @LENGTH@ 33
------------------DEL MethodInvocation@@binomialCoefficientLog(n,k) @AT@ 8413 @LENGTH@ 28
, INS IfStatement@@InfixExpression:n < k @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8790 @LENGTH@ 138
---INS InfixExpression@@n < k @TO@ IfStatement@@InfixExpression:n < k @AT@ 8794 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < k @AT@ 8794 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < k @AT@ 8795 @LENGTH@ 1
------INS SimpleName@@k @TO@ InfixExpression@@n < k @AT@ 8798 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < k @AT@ 8815 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @AT@ 8821 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8821 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8825 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= k for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8867 @LENGTH@ 49
, INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8937 @LENGTH@ 138
---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8941 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < 0 @AT@ 8941 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 0 @AT@ 8942 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 @AT@ 8945 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8962 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @AT@ 8968 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8968 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8972 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= 0 for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 9014 @LENGTH@ 49
, INS IfStatement@@InfixExpression:(n == k) || (k == 0) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9084 @LENGTH@ 60
---INS InfixExpression@@(n == k) || (k == 0) @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 20
------INS ParenthesizedExpression@@(n == k) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 8
---------INS InfixExpression@@n == k @TO@ ParenthesizedExpression@@(n == k) @AT@ 9089 @LENGTH@ 6
------------INS SimpleName@@n @TO@ InfixExpression@@n == k @AT@ 9089 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@n == k @AT@ 9090 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@n == k @AT@ 9094 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9096 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == 0) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9100 @LENGTH@ 8
---------INS InfixExpression@@k == 0 @TO@ ParenthesizedExpression@@(k == 0) @AT@ 9101 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 0 @AT@ 9101 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 0 @AT@ 9102 @LENGTH@ 2
------------INS NumberLiteral@@0 @TO@ InfixExpression@@k == 0 @AT@ 9106 @LENGTH@ 1
---INS ReturnStatement@@NumberLiteral:1d @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9124 @LENGTH@ 10
------INS NumberLiteral@@1d @TO@ ReturnStatement@@NumberLiteral:1d @AT@ 9131 @LENGTH@ 2
, INS IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9153 @LENGTH@ 63
---INS InfixExpression@@(k == 1) || (k == n - 1) @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 24
------INS ParenthesizedExpression@@(k == 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 8
---------INS InfixExpression@@k == 1 @TO@ ParenthesizedExpression@@(k == 1) @AT@ 9158 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 1 @AT@ 9158 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 1 @AT@ 9159 @LENGTH@ 2
------------INS NumberLiteral@@1 @TO@ InfixExpression@@k == 1 @AT@ 9163 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9165 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == n - 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9169 @LENGTH@ 12
---------INS InfixExpression@@k == n - 1 @TO@ ParenthesizedExpression@@(k == n - 1) @AT@ 9170 @LENGTH@ 10
------------INS SimpleName@@k @TO@ InfixExpression@@k == n - 1 @AT@ 9170 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == n - 1 @AT@ 9171 @LENGTH@ 2
------------INS InfixExpression@@n - 1 @TO@ InfixExpression@@k == n - 1 @AT@ 9175 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - 1 @AT@ 9175 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - 1 @AT@ 9176 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - 1 @AT@ 9179 @LENGTH@ 1
---INS ReturnStatement@@SimpleName:n @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9197 @LENGTH@ 9
------INS SimpleName@@n @TO@ ReturnStatement@@SimpleName:n @AT@ 9204 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9225 @LENGTH@ 80
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9229 @LENGTH@ 7
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 9229 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 9230 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 9233 @LENGTH@ 3
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 9233 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 9234 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 9235 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9252 @LENGTH@ 43
------INS MethodInvocation@@binomialCoefficientDouble(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @AT@ 9259 @LENGTH@ 35
---------MOV SimpleName@@Name:Math @TO@ MethodInvocation@@binomialCoefficientDouble(n,n - k) @AT@ 8404 @LENGTH@ 4
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9314 @LENGTH@ 68
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9318 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 9318 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 9319 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 9322 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9340 @LENGTH@ 32
------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @AT@ 9347 @LENGTH@ 24
---------MOV SimpleName@@MethodName:binomialCoefficientLog:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 8413 @LENGTH@ 28
, INS VariableDeclarationStatement@@double result=1d; @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9400 @LENGTH@ 19
---INS PrimitiveType@@double @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9400 @LENGTH@ 6
---INS VariableDeclarationFragment@@result=1d @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9407 @LENGTH@ 11
------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=1d @AT@ 9407 @LENGTH@ 6
------INS NumberLiteral@@1d @TO@ VariableDeclarationFragment@@result=1d @AT@ 9416 @LENGTH@ 2
, INS ForStatement@@[int i=1];i <= k; [i++] @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9428 @LENGTH@ 96
---INS VariableDeclarationExpression@@int i=1 @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9433 @LENGTH@ 9
------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9433 @LENGTH@ 3
------INS VariableDeclarationFragment@@i=1 @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9437 @LENGTH@ 5
---------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=1 @AT@ 9437 @LENGTH@ 1
---------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@i=1 @AT@ 9441 @LENGTH@ 1
---INS InfixExpression@@i <= k @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9444 @LENGTH@ 6
------INS SimpleName@@i @TO@ InfixExpression@@i <= k @AT@ 9444 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@i <= k @AT@ 9445 @LENGTH@ 2
------INS SimpleName@@k @TO@ InfixExpression@@i <= k @AT@ 9449 @LENGTH@ 1
---INS PostfixExpression@@i++ @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9452 @LENGTH@ 3
------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 9452 @LENGTH@ 1
------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 9454 @LENGTH@ 2
---INS ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9472 @LENGTH@ 42
------INS Assignment@@result*=(double)(n - k + i) / (double)i @TO@ ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 41
---------INS SimpleName@@result @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 6
---------INS Operator@@*= @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9478 @LENGTH@ 2
---------INS InfixExpression@@(double)(n - k + i) / (double)i @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 31
------------INS CastExpression@@(double)(n - k + i) @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 19
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)(n - k + i) @AT@ 9483 @LENGTH@ 6
---------------INS ParenthesizedExpression@@(n - k + i) @TO@ CastExpression@@(double)(n - k + i) @AT@ 9490 @LENGTH@ 11
------------------INS InfixExpression@@n - k + i @TO@ ParenthesizedExpression@@(n - k + i) @AT@ 9491 @LENGTH@ 9
---------------------MOV Operator@@+ @TO@ InfixExpression@@n - k + i @AT@ 8442 @LENGTH@ 1
---------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + i @AT@ 9491 @LENGTH@ 5
------------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 9491 @LENGTH@ 1
------------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 9492 @LENGTH@ 1
------------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 9495 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ InfixExpression@@n - k + i @AT@ 9499 @LENGTH@ 1
------------INS Operator@@/ @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9501 @LENGTH@ 1
------------INS CastExpression@@(double)i @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9504 @LENGTH@ 9
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)i @AT@ 9505 @LENGTH@ 6
---------------INS SimpleName@@i @TO@ CastExpression@@(double)i @AT@ 9512 @LENGTH@ 1
, INS ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9536 @LENGTH@ 32
---INS MethodInvocation@@Math.floor(result + 0.5) @TO@ ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 24
------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 4
------INS SimpleName@@MethodName:floor:[result + 0.5] @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9548 @LENGTH@ 19
---------INS InfixExpression@@result + 0.5 @TO@ SimpleName@@MethodName:floor:[result + 0.5] @AT@ 9554 @LENGTH@ 12
------------MOV NumberLiteral@@0.5 @TO@ InfixExpression@@result + 0.5 @AT@ 8445 @LENGTH@ 3
------------INS SimpleName@@result @TO@ InfixExpression@@result + 0.5 @AT@ 9554 @LENGTH@ 6
------------INS Operator@@+ @TO@ InfixExpression@@result + 0.5 @AT@ 9560 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 10974 @LENGTH@ 80
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 10978 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 10978 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 10979 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 10982 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 11002 @LENGTH@ 42
------INS MethodInvocation@@Math.log(binomialCoefficient(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 34
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 4
---------INS SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11014 @LENGTH@ 29
------------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @AT@ 11018 @LENGTH@ 24
---------------INS SimpleName@@MethodName:binomialCoefficient:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 11018 @LENGTH@ 24
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11038 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11040 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 1030 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 11221 @LENGTH@ 88
---INS InfixExpression@@n < 1030 @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11225 @LENGTH@ 8
------INS SimpleName@@n @TO@ InfixExpression@@n < 1030 @AT@ 11225 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 1030 @AT@ 11226 @LENGTH@ 1
------INS NumberLiteral@@1030 @TO@ InfixExpression@@n < 1030 @AT@ 11229 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11250 @LENGTH@ 49
------MOV MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
]

CII:
OP1:(INS, IfStatement, null, OP2 OP6)
OP2:   (INS, InfixExpression, OP1, OP3 OP4 OP5)
OP3:      (INS, SimpleName, OP2, null)
OP4:      (INS, Operator, OP2, null)
OP5:      (INS, NumberLiteral, OP2, null)
OP6:   (INS, ThrowStatement, OP1, OP7)
OP7:      (INS, ClassInstanceCreation, OP6, OP8 OP9 OP10)
OP8:         (INS, New, OP7, null)
OP9:         (INS, SimpleType, OP7, null)
OP10:         (INS, StringLiteral, OP7, null)





hASList: 
[UPD VariableDeclarationStatement@@long result=Math.round(binomialCoefficientDouble(n,k)); @TO@ long result=1; @AT@ 6045 @LENGTH@ 58
---UPD VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @TO@ result=1 @AT@ 6050 @LENGTH@ 52
------UPD MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
---------UPD SimpleName@@MethodName:round:[binomialCoefficientDouble(n,k)] @TO@ MethodName:log:[binomialCoefficientDouble(n,k)] @AT@ 6064 @LENGTH@ 38
------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @AT@ 6391 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@long, MethodName:binomialCoefficient, @@Argus:int+n+int+k+ @AT@ 6081 @LENGTH@ 64
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6085 @LENGTH@ 9
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 6085 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 6086 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 6089 @LENGTH@ 5
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 6089 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 6090 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 6093 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6108 @LENGTH@ 37
------INS MethodInvocation@@binomialCoefficient(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
---------INS SimpleName@@MethodName:binomialCoefficient:[n, n - k] @TO@ MethodInvocation@@binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6135 @LENGTH@ 1
------------INS InfixExpression@@n - k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6138 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6138 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6139 @LENGTH@ 1
---------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6142 @LENGTH@ 1
, UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n <= 61 @AT@ 6112 @LENGTH@ 152
---DEL InfixExpression@@result == Long.MAX_VALUE @AT@ 6116 @LENGTH@ 24
------DEL QualifiedName@@Long.MAX_VALUE @AT@ 6126 @LENGTH@ 14
---------DEL SimpleName@@Long @AT@ 6126 @LENGTH@ 4
---------DEL SimpleName@@MAX_VALUE @AT@ 6131 @LENGTH@ 9
---DEL ThrowStatement@@ClassInstanceCreation:new ArithmeticException("result too large to represent in a long integer") @AT@ 6156 @LENGTH@ 98
------DEL ClassInstanceCreation@@ArithmeticException["result too large to represent in a long integer"] @AT@ 6162 @LENGTH@ 91
---------DEL New@@new @AT@ 6162 @LENGTH@ 3
---------DEL SimpleType@@ArithmeticException @AT@ 6166 @LENGTH@ 19
---------DEL StringLiteral@@"result too large to represent in a long integer" @AT@ 6203 @LENGTH@ 49
---INS InfixExpression@@n <= 61 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6406 @LENGTH@ 7
------INS SimpleName@@n @TO@ InfixExpression@@n <= 61 @AT@ 6406 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@n <= 61 @AT@ 6407 @LENGTH@ 2
------INS NumberLiteral@@61 @TO@ InfixExpression@@n <= 61 @AT@ 6411 @LENGTH@ 2
---INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6499 @LENGTH@ 105
------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6504 @LENGTH@ 24
---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6504 @LENGTH@ 3
---------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6508 @LENGTH@ 5
------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6508 @LENGTH@ 1
------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6512 @LENGTH@ 1
---------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6515 @LENGTH@ 13
------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6515 @LENGTH@ 1
------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6519 @LENGTH@ 9
---------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6519 @LENGTH@ 5
------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6519 @LENGTH@ 1
------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6520 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6523 @LENGTH@ 1
---------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6524 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6527 @LENGTH@ 1
------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6530 @LENGTH@ 6
---------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6530 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6531 @LENGTH@ 2
---------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6535 @LENGTH@ 1
------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6538 @LENGTH@ 3
---------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6538 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6540 @LENGTH@ 2
------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6543 @LENGTH@ 3
---------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6543 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6545 @LENGTH@ 2
------INS ExpressionStatement@@Assignment:result=result * i / j @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6566 @LENGTH@ 24
---------INS Assignment@@result=result * i / j @TO@ ExpressionStatement@@Assignment:result=result * i / j @AT@ 6566 @LENGTH@ 23
------------INS SimpleName@@result @TO@ Assignment@@result=result * i / j @AT@ 6566 @LENGTH@ 6
------------INS Operator@@= @TO@ Assignment@@result=result * i / j @AT@ 6572 @LENGTH@ 1
------------INS InfixExpression@@result * i / j @TO@ Assignment@@result=result * i / j @AT@ 6575 @LENGTH@ 14
---------------INS InfixExpression@@result * i @TO@ InfixExpression@@result * i / j @AT@ 6575 @LENGTH@ 10
------------------MOV SimpleName@@result @TO@ InfixExpression@@result * i @AT@ 6116 @LENGTH@ 6
------------------MOV Operator@@== @TO@ InfixExpression@@result * i @AT@ 6122 @LENGTH@ 2
------------------INS SimpleName@@i @TO@ InfixExpression@@result * i @AT@ 6584 @LENGTH@ 1
---------------INS Operator@@/ @TO@ InfixExpression@@result * i / j @AT@ 6585 @LENGTH@ 1
---------------INS SimpleName@@j @TO@ InfixExpression@@result * i / j @AT@ 6588 @LENGTH@ 1
---INS IfStatement@@InfixExpression:n <= 66 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6620 @LENGTH@ 1053
------INS InfixExpression@@n <= 66 @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6624 @LENGTH@ 7
---------INS SimpleName@@n @TO@ InfixExpression@@n <= 66 @AT@ 6624 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@n <= 66 @AT@ 6625 @LENGTH@ 2
---------INS NumberLiteral@@66 @TO@ InfixExpression@@n <= 66 @AT@ 6629 @LENGTH@ 2
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6788 @LENGTH@ 517
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6793 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6793 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6797 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6797 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6801 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6804 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6804 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6808 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6808 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6808 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6809 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6812 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6813 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6816 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6819 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6819 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6820 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6824 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6827 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6827 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6829 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6832 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6832 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6834 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7217 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7217 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7222 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7222 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7226 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7226 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7230 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7233 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7253 @LENGTH@ 38
------------INS Assignment@@result=(result / (j / d)) * (i / d) @TO@ ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 37
---------------INS SimpleName@@result @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7259 @LENGTH@ 1
---------------INS InfixExpression@@(result / (j / d)) * (i / d) @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 28
------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 18
---------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7263 @LENGTH@ 16
------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7263 @LENGTH@ 6
------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7269 @LENGTH@ 1
------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7272 @LENGTH@ 7
---------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7273 @LENGTH@ 5
------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7273 @LENGTH@ 1
------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7274 @LENGTH@ 1
------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7277 @LENGTH@ 1
------------------INS Operator@@* @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7280 @LENGTH@ 1
------------------INS ParenthesizedExpression@@(i / d) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7283 @LENGTH@ 7
---------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7284 @LENGTH@ 5
------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7284 @LENGTH@ 1
------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7285 @LENGTH@ 1
------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7288 @LENGTH@ 1
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 7496 @LENGTH@ 167
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7501 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7501 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7505 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 7505 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 7509 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7512 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7512 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7516 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 7516 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 7516 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 7517 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 7520 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 7521 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 7524 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7527 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 7527 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 7528 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 7532 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7535 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 7535 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 7537 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7540 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 7540 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 7542 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7563 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7563 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7568 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7568 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7572 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7572 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7576 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7579 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7599 @LENGTH@ 50
------------INS Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 49
---------------INS SimpleName@@result @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7605 @LENGTH@ 1
---------------INS MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
------------------INS SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @TO@ MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
---------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7620 @LENGTH@ 18
------------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7621 @LENGTH@ 16
---------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7621 @LENGTH@ 6
---------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7627 @LENGTH@ 1
---------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7630 @LENGTH@ 7
------------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7631 @LENGTH@ 5
---------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7631 @LENGTH@ 1
---------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7632 @LENGTH@ 1
---------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7635 @LENGTH@ 1
---------------------INS ParenthesizedExpression@@(i / d) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7640 @LENGTH@ 7
------------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7641 @LENGTH@ 5
---------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7641 @LENGTH@ 1
---------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7642 @LENGTH@ 1
---------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7645 @LENGTH@ 1
, DEL ReturnStatement@@MethodInvocation:Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8386 @LENGTH@ 64
---DEL MethodInvocation@@Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8393 @LENGTH@ 56
------DEL SimpleName@@Name:Math @AT@ 8393 @LENGTH@ 4
------DEL SimpleName@@MethodName:floor:[Math.exp(binomialCoefficientLog(n,k)) + 0.5] @AT@ 8398 @LENGTH@ 51
---------DEL InfixExpression@@Math.exp(binomialCoefficientLog(n,k)) + 0.5 @AT@ 8404 @LENGTH@ 44
------------DEL MethodInvocation@@Math.exp(binomialCoefficientLog(n,k)) @AT@ 8404 @LENGTH@ 38
---------------DEL SimpleName@@MethodName:exp:[binomialCoefficientLog(n,k)] @AT@ 8409 @LENGTH@ 33
------------------DEL MethodInvocation@@binomialCoefficientLog(n,k) @AT@ 8413 @LENGTH@ 28
, INS IfStatement@@InfixExpression:n < k @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8790 @LENGTH@ 138
---INS InfixExpression@@n < k @TO@ IfStatement@@InfixExpression:n < k @AT@ 8794 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < k @AT@ 8794 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < k @AT@ 8795 @LENGTH@ 1
------INS SimpleName@@k @TO@ InfixExpression@@n < k @AT@ 8798 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < k @AT@ 8815 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @AT@ 8821 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8821 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8825 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= k for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8867 @LENGTH@ 49
, INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8937 @LENGTH@ 138
---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8941 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < 0 @AT@ 8941 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 0 @AT@ 8942 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 @AT@ 8945 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8962 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @AT@ 8968 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8968 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8972 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= 0 for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 9014 @LENGTH@ 49
, INS IfStatement@@InfixExpression:(n == k) || (k == 0) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9084 @LENGTH@ 60
---INS InfixExpression@@(n == k) || (k == 0) @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 20
------INS ParenthesizedExpression@@(n == k) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 8
---------INS InfixExpression@@n == k @TO@ ParenthesizedExpression@@(n == k) @AT@ 9089 @LENGTH@ 6
------------INS SimpleName@@n @TO@ InfixExpression@@n == k @AT@ 9089 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@n == k @AT@ 9090 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@n == k @AT@ 9094 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9096 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == 0) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9100 @LENGTH@ 8
---------INS InfixExpression@@k == 0 @TO@ ParenthesizedExpression@@(k == 0) @AT@ 9101 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 0 @AT@ 9101 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 0 @AT@ 9102 @LENGTH@ 2
------------INS NumberLiteral@@0 @TO@ InfixExpression@@k == 0 @AT@ 9106 @LENGTH@ 1
---INS ReturnStatement@@NumberLiteral:1d @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9124 @LENGTH@ 10
------INS NumberLiteral@@1d @TO@ ReturnStatement@@NumberLiteral:1d @AT@ 9131 @LENGTH@ 2
, INS IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9153 @LENGTH@ 63
---INS InfixExpression@@(k == 1) || (k == n - 1) @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 24
------INS ParenthesizedExpression@@(k == 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 8
---------INS InfixExpression@@k == 1 @TO@ ParenthesizedExpression@@(k == 1) @AT@ 9158 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 1 @AT@ 9158 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 1 @AT@ 9159 @LENGTH@ 2
------------INS NumberLiteral@@1 @TO@ InfixExpression@@k == 1 @AT@ 9163 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9165 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == n - 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9169 @LENGTH@ 12
---------INS InfixExpression@@k == n - 1 @TO@ ParenthesizedExpression@@(k == n - 1) @AT@ 9170 @LENGTH@ 10
------------INS SimpleName@@k @TO@ InfixExpression@@k == n - 1 @AT@ 9170 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == n - 1 @AT@ 9171 @LENGTH@ 2
------------INS InfixExpression@@n - 1 @TO@ InfixExpression@@k == n - 1 @AT@ 9175 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - 1 @AT@ 9175 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - 1 @AT@ 9176 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - 1 @AT@ 9179 @LENGTH@ 1
---INS ReturnStatement@@SimpleName:n @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9197 @LENGTH@ 9
------INS SimpleName@@n @TO@ ReturnStatement@@SimpleName:n @AT@ 9204 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9225 @LENGTH@ 80
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9229 @LENGTH@ 7
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 9229 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 9230 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 9233 @LENGTH@ 3
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 9233 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 9234 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 9235 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9252 @LENGTH@ 43
------INS MethodInvocation@@binomialCoefficientDouble(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @AT@ 9259 @LENGTH@ 35
---------MOV SimpleName@@Name:Math @TO@ MethodInvocation@@binomialCoefficientDouble(n,n - k) @AT@ 8404 @LENGTH@ 4
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9314 @LENGTH@ 68
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9318 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 9318 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 9319 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 9322 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9340 @LENGTH@ 32
------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @AT@ 9347 @LENGTH@ 24
---------MOV SimpleName@@MethodName:binomialCoefficientLog:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 8413 @LENGTH@ 28
, INS VariableDeclarationStatement@@double result=1d; @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9400 @LENGTH@ 19
---INS PrimitiveType@@double @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9400 @LENGTH@ 6
---INS VariableDeclarationFragment@@result=1d @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9407 @LENGTH@ 11
------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=1d @AT@ 9407 @LENGTH@ 6
------INS NumberLiteral@@1d @TO@ VariableDeclarationFragment@@result=1d @AT@ 9416 @LENGTH@ 2
, INS ForStatement@@[int i=1];i <= k; [i++] @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9428 @LENGTH@ 96
---INS VariableDeclarationExpression@@int i=1 @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9433 @LENGTH@ 9
------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9433 @LENGTH@ 3
------INS VariableDeclarationFragment@@i=1 @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9437 @LENGTH@ 5
---------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=1 @AT@ 9437 @LENGTH@ 1
---------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@i=1 @AT@ 9441 @LENGTH@ 1
---INS InfixExpression@@i <= k @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9444 @LENGTH@ 6
------INS SimpleName@@i @TO@ InfixExpression@@i <= k @AT@ 9444 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@i <= k @AT@ 9445 @LENGTH@ 2
------INS SimpleName@@k @TO@ InfixExpression@@i <= k @AT@ 9449 @LENGTH@ 1
---INS PostfixExpression@@i++ @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9452 @LENGTH@ 3
------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 9452 @LENGTH@ 1
------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 9454 @LENGTH@ 2
---INS ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9472 @LENGTH@ 42
------INS Assignment@@result*=(double)(n - k + i) / (double)i @TO@ ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 41
---------INS SimpleName@@result @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 6
---------INS Operator@@*= @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9478 @LENGTH@ 2
---------INS InfixExpression@@(double)(n - k + i) / (double)i @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 31
------------INS CastExpression@@(double)(n - k + i) @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 19
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)(n - k + i) @AT@ 9483 @LENGTH@ 6
---------------INS ParenthesizedExpression@@(n - k + i) @TO@ CastExpression@@(double)(n - k + i) @AT@ 9490 @LENGTH@ 11
------------------INS InfixExpression@@n - k + i @TO@ ParenthesizedExpression@@(n - k + i) @AT@ 9491 @LENGTH@ 9
---------------------MOV Operator@@+ @TO@ InfixExpression@@n - k + i @AT@ 8442 @LENGTH@ 1
---------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + i @AT@ 9491 @LENGTH@ 5
------------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 9491 @LENGTH@ 1
------------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 9492 @LENGTH@ 1
------------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 9495 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ InfixExpression@@n - k + i @AT@ 9499 @LENGTH@ 1
------------INS Operator@@/ @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9501 @LENGTH@ 1
------------INS CastExpression@@(double)i @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9504 @LENGTH@ 9
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)i @AT@ 9505 @LENGTH@ 6
---------------INS SimpleName@@i @TO@ CastExpression@@(double)i @AT@ 9512 @LENGTH@ 1
, INS ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9536 @LENGTH@ 32
---INS MethodInvocation@@Math.floor(result + 0.5) @TO@ ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 24
------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 4
------INS SimpleName@@MethodName:floor:[result + 0.5] @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9548 @LENGTH@ 19
---------INS InfixExpression@@result + 0.5 @TO@ SimpleName@@MethodName:floor:[result + 0.5] @AT@ 9554 @LENGTH@ 12
------------MOV NumberLiteral@@0.5 @TO@ InfixExpression@@result + 0.5 @AT@ 8445 @LENGTH@ 3
------------INS SimpleName@@result @TO@ InfixExpression@@result + 0.5 @AT@ 9554 @LENGTH@ 6
------------INS Operator@@+ @TO@ InfixExpression@@result + 0.5 @AT@ 9560 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 10974 @LENGTH@ 80
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 10978 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 10978 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 10979 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 10982 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 11002 @LENGTH@ 42
------INS MethodInvocation@@Math.log(binomialCoefficient(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 34
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 4
---------INS SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11014 @LENGTH@ 29
------------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @AT@ 11018 @LENGTH@ 24
---------------INS SimpleName@@MethodName:binomialCoefficient:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 11018 @LENGTH@ 24
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11038 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11040 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 1030 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 11221 @LENGTH@ 88
---INS InfixExpression@@n < 1030 @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11225 @LENGTH@ 8
------INS SimpleName@@n @TO@ InfixExpression@@n < 1030 @AT@ 11225 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 1030 @AT@ 11226 @LENGTH@ 1
------INS NumberLiteral@@1030 @TO@ InfixExpression@@n < 1030 @AT@ 11229 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11250 @LENGTH@ 49
------MOV MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
]

CII:
OP1:(INS, IfStatement, null, OP2 OP14)
OP2:   (INS, InfixExpression, OP1, OP3 OP8 OP9)
OP3:      (INS, ParenthesizedExpression, OP2, OP4)
OP4:         (INS, InfixExpression, OP3, OP5 OP6 OP7)
OP5:            (INS, SimpleName, OP4, null)
OP6:            (INS, Operator, OP4, null)
OP7:            (INS, SimpleName, OP4, null)
OP8:      (INS, Operator, OP2, null)
OP9:      (INS, ParenthesizedExpression, OP2, OP10)
OP10:         (INS, InfixExpression, OP9, OP11 OP12 OP13)
OP11:            (INS, SimpleName, OP10, null)
OP12:            (INS, Operator, OP10, null)
OP13:            (INS, NumberLiteral, OP10, null)
OP14:   (INS, ReturnStatement, OP1, OP15)
OP15:      (INS, NumberLiteral, OP14, null)





hASList: 
[UPD VariableDeclarationStatement@@long result=Math.round(binomialCoefficientDouble(n,k)); @TO@ long result=1; @AT@ 6045 @LENGTH@ 58
---UPD VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @TO@ result=1 @AT@ 6050 @LENGTH@ 52
------UPD MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
---------UPD SimpleName@@MethodName:round:[binomialCoefficientDouble(n,k)] @TO@ MethodName:log:[binomialCoefficientDouble(n,k)] @AT@ 6064 @LENGTH@ 38
------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @AT@ 6391 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@long, MethodName:binomialCoefficient, @@Argus:int+n+int+k+ @AT@ 6081 @LENGTH@ 64
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6085 @LENGTH@ 9
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 6085 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 6086 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 6089 @LENGTH@ 5
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 6089 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 6090 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 6093 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6108 @LENGTH@ 37
------INS MethodInvocation@@binomialCoefficient(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
---------INS SimpleName@@MethodName:binomialCoefficient:[n, n - k] @TO@ MethodInvocation@@binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6135 @LENGTH@ 1
------------INS InfixExpression@@n - k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6138 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6138 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6139 @LENGTH@ 1
---------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6142 @LENGTH@ 1
, UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n <= 61 @AT@ 6112 @LENGTH@ 152
---DEL InfixExpression@@result == Long.MAX_VALUE @AT@ 6116 @LENGTH@ 24
------DEL QualifiedName@@Long.MAX_VALUE @AT@ 6126 @LENGTH@ 14
---------DEL SimpleName@@Long @AT@ 6126 @LENGTH@ 4
---------DEL SimpleName@@MAX_VALUE @AT@ 6131 @LENGTH@ 9
---DEL ThrowStatement@@ClassInstanceCreation:new ArithmeticException("result too large to represent in a long integer") @AT@ 6156 @LENGTH@ 98
------DEL ClassInstanceCreation@@ArithmeticException["result too large to represent in a long integer"] @AT@ 6162 @LENGTH@ 91
---------DEL New@@new @AT@ 6162 @LENGTH@ 3
---------DEL SimpleType@@ArithmeticException @AT@ 6166 @LENGTH@ 19
---------DEL StringLiteral@@"result too large to represent in a long integer" @AT@ 6203 @LENGTH@ 49
---INS InfixExpression@@n <= 61 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6406 @LENGTH@ 7
------INS SimpleName@@n @TO@ InfixExpression@@n <= 61 @AT@ 6406 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@n <= 61 @AT@ 6407 @LENGTH@ 2
------INS NumberLiteral@@61 @TO@ InfixExpression@@n <= 61 @AT@ 6411 @LENGTH@ 2
---INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6499 @LENGTH@ 105
------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6504 @LENGTH@ 24
---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6504 @LENGTH@ 3
---------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6508 @LENGTH@ 5
------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6508 @LENGTH@ 1
------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6512 @LENGTH@ 1
---------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6515 @LENGTH@ 13
------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6515 @LENGTH@ 1
------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6519 @LENGTH@ 9
---------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6519 @LENGTH@ 5
------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6519 @LENGTH@ 1
------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6520 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6523 @LENGTH@ 1
---------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6524 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6527 @LENGTH@ 1
------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6530 @LENGTH@ 6
---------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6530 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6531 @LENGTH@ 2
---------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6535 @LENGTH@ 1
------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6538 @LENGTH@ 3
---------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6538 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6540 @LENGTH@ 2
------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6543 @LENGTH@ 3
---------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6543 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6545 @LENGTH@ 2
------INS ExpressionStatement@@Assignment:result=result * i / j @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6566 @LENGTH@ 24
---------INS Assignment@@result=result * i / j @TO@ ExpressionStatement@@Assignment:result=result * i / j @AT@ 6566 @LENGTH@ 23
------------INS SimpleName@@result @TO@ Assignment@@result=result * i / j @AT@ 6566 @LENGTH@ 6
------------INS Operator@@= @TO@ Assignment@@result=result * i / j @AT@ 6572 @LENGTH@ 1
------------INS InfixExpression@@result * i / j @TO@ Assignment@@result=result * i / j @AT@ 6575 @LENGTH@ 14
---------------INS InfixExpression@@result * i @TO@ InfixExpression@@result * i / j @AT@ 6575 @LENGTH@ 10
------------------MOV SimpleName@@result @TO@ InfixExpression@@result * i @AT@ 6116 @LENGTH@ 6
------------------MOV Operator@@== @TO@ InfixExpression@@result * i @AT@ 6122 @LENGTH@ 2
------------------INS SimpleName@@i @TO@ InfixExpression@@result * i @AT@ 6584 @LENGTH@ 1
---------------INS Operator@@/ @TO@ InfixExpression@@result * i / j @AT@ 6585 @LENGTH@ 1
---------------INS SimpleName@@j @TO@ InfixExpression@@result * i / j @AT@ 6588 @LENGTH@ 1
---INS IfStatement@@InfixExpression:n <= 66 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6620 @LENGTH@ 1053
------INS InfixExpression@@n <= 66 @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6624 @LENGTH@ 7
---------INS SimpleName@@n @TO@ InfixExpression@@n <= 66 @AT@ 6624 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@n <= 66 @AT@ 6625 @LENGTH@ 2
---------INS NumberLiteral@@66 @TO@ InfixExpression@@n <= 66 @AT@ 6629 @LENGTH@ 2
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6788 @LENGTH@ 517
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6793 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6793 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6797 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6797 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6801 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6804 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6804 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6808 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6808 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6808 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6809 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6812 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6813 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6816 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6819 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6819 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6820 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6824 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6827 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6827 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6829 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6832 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6832 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6834 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7217 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7217 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7222 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7222 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7226 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7226 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7230 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7233 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7253 @LENGTH@ 38
------------INS Assignment@@result=(result / (j / d)) * (i / d) @TO@ ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 37
---------------INS SimpleName@@result @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7259 @LENGTH@ 1
---------------INS InfixExpression@@(result / (j / d)) * (i / d) @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 28
------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 18
---------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7263 @LENGTH@ 16
------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7263 @LENGTH@ 6
------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7269 @LENGTH@ 1
------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7272 @LENGTH@ 7
---------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7273 @LENGTH@ 5
------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7273 @LENGTH@ 1
------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7274 @LENGTH@ 1
------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7277 @LENGTH@ 1
------------------INS Operator@@* @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7280 @LENGTH@ 1
------------------INS ParenthesizedExpression@@(i / d) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7283 @LENGTH@ 7
---------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7284 @LENGTH@ 5
------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7284 @LENGTH@ 1
------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7285 @LENGTH@ 1
------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7288 @LENGTH@ 1
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 7496 @LENGTH@ 167
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7501 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7501 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7505 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 7505 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 7509 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7512 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7512 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7516 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 7516 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 7516 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 7517 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 7520 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 7521 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 7524 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7527 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 7527 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 7528 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 7532 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7535 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 7535 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 7537 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7540 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 7540 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 7542 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7563 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7563 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7568 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7568 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7572 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7572 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7576 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7579 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7599 @LENGTH@ 50
------------INS Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 49
---------------INS SimpleName@@result @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7605 @LENGTH@ 1
---------------INS MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
------------------INS SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @TO@ MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
---------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7620 @LENGTH@ 18
------------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7621 @LENGTH@ 16
---------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7621 @LENGTH@ 6
---------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7627 @LENGTH@ 1
---------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7630 @LENGTH@ 7
------------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7631 @LENGTH@ 5
---------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7631 @LENGTH@ 1
---------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7632 @LENGTH@ 1
---------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7635 @LENGTH@ 1
---------------------INS ParenthesizedExpression@@(i / d) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7640 @LENGTH@ 7
------------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7641 @LENGTH@ 5
---------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7641 @LENGTH@ 1
---------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7642 @LENGTH@ 1
---------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7645 @LENGTH@ 1
, DEL ReturnStatement@@MethodInvocation:Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8386 @LENGTH@ 64
---DEL MethodInvocation@@Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8393 @LENGTH@ 56
------DEL SimpleName@@Name:Math @AT@ 8393 @LENGTH@ 4
------DEL SimpleName@@MethodName:floor:[Math.exp(binomialCoefficientLog(n,k)) + 0.5] @AT@ 8398 @LENGTH@ 51
---------DEL InfixExpression@@Math.exp(binomialCoefficientLog(n,k)) + 0.5 @AT@ 8404 @LENGTH@ 44
------------DEL MethodInvocation@@Math.exp(binomialCoefficientLog(n,k)) @AT@ 8404 @LENGTH@ 38
---------------DEL SimpleName@@MethodName:exp:[binomialCoefficientLog(n,k)] @AT@ 8409 @LENGTH@ 33
------------------DEL MethodInvocation@@binomialCoefficientLog(n,k) @AT@ 8413 @LENGTH@ 28
, INS IfStatement@@InfixExpression:n < k @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8790 @LENGTH@ 138
---INS InfixExpression@@n < k @TO@ IfStatement@@InfixExpression:n < k @AT@ 8794 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < k @AT@ 8794 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < k @AT@ 8795 @LENGTH@ 1
------INS SimpleName@@k @TO@ InfixExpression@@n < k @AT@ 8798 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < k @AT@ 8815 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @AT@ 8821 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8821 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8825 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= k for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8867 @LENGTH@ 49
, INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8937 @LENGTH@ 138
---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8941 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < 0 @AT@ 8941 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 0 @AT@ 8942 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 @AT@ 8945 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8962 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @AT@ 8968 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8968 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8972 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= 0 for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 9014 @LENGTH@ 49
, INS IfStatement@@InfixExpression:(n == k) || (k == 0) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9084 @LENGTH@ 60
---INS InfixExpression@@(n == k) || (k == 0) @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 20
------INS ParenthesizedExpression@@(n == k) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 8
---------INS InfixExpression@@n == k @TO@ ParenthesizedExpression@@(n == k) @AT@ 9089 @LENGTH@ 6
------------INS SimpleName@@n @TO@ InfixExpression@@n == k @AT@ 9089 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@n == k @AT@ 9090 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@n == k @AT@ 9094 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9096 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == 0) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9100 @LENGTH@ 8
---------INS InfixExpression@@k == 0 @TO@ ParenthesizedExpression@@(k == 0) @AT@ 9101 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 0 @AT@ 9101 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 0 @AT@ 9102 @LENGTH@ 2
------------INS NumberLiteral@@0 @TO@ InfixExpression@@k == 0 @AT@ 9106 @LENGTH@ 1
---INS ReturnStatement@@NumberLiteral:1d @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9124 @LENGTH@ 10
------INS NumberLiteral@@1d @TO@ ReturnStatement@@NumberLiteral:1d @AT@ 9131 @LENGTH@ 2
, INS IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9153 @LENGTH@ 63
---INS InfixExpression@@(k == 1) || (k == n - 1) @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 24
------INS ParenthesizedExpression@@(k == 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 8
---------INS InfixExpression@@k == 1 @TO@ ParenthesizedExpression@@(k == 1) @AT@ 9158 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 1 @AT@ 9158 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 1 @AT@ 9159 @LENGTH@ 2
------------INS NumberLiteral@@1 @TO@ InfixExpression@@k == 1 @AT@ 9163 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9165 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == n - 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9169 @LENGTH@ 12
---------INS InfixExpression@@k == n - 1 @TO@ ParenthesizedExpression@@(k == n - 1) @AT@ 9170 @LENGTH@ 10
------------INS SimpleName@@k @TO@ InfixExpression@@k == n - 1 @AT@ 9170 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == n - 1 @AT@ 9171 @LENGTH@ 2
------------INS InfixExpression@@n - 1 @TO@ InfixExpression@@k == n - 1 @AT@ 9175 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - 1 @AT@ 9175 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - 1 @AT@ 9176 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - 1 @AT@ 9179 @LENGTH@ 1
---INS ReturnStatement@@SimpleName:n @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9197 @LENGTH@ 9
------INS SimpleName@@n @TO@ ReturnStatement@@SimpleName:n @AT@ 9204 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9225 @LENGTH@ 80
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9229 @LENGTH@ 7
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 9229 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 9230 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 9233 @LENGTH@ 3
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 9233 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 9234 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 9235 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9252 @LENGTH@ 43
------INS MethodInvocation@@binomialCoefficientDouble(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @AT@ 9259 @LENGTH@ 35
---------MOV SimpleName@@Name:Math @TO@ MethodInvocation@@binomialCoefficientDouble(n,n - k) @AT@ 8404 @LENGTH@ 4
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9314 @LENGTH@ 68
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9318 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 9318 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 9319 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 9322 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9340 @LENGTH@ 32
------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @AT@ 9347 @LENGTH@ 24
---------MOV SimpleName@@MethodName:binomialCoefficientLog:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 8413 @LENGTH@ 28
, INS VariableDeclarationStatement@@double result=1d; @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9400 @LENGTH@ 19
---INS PrimitiveType@@double @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9400 @LENGTH@ 6
---INS VariableDeclarationFragment@@result=1d @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9407 @LENGTH@ 11
------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=1d @AT@ 9407 @LENGTH@ 6
------INS NumberLiteral@@1d @TO@ VariableDeclarationFragment@@result=1d @AT@ 9416 @LENGTH@ 2
, INS ForStatement@@[int i=1];i <= k; [i++] @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9428 @LENGTH@ 96
---INS VariableDeclarationExpression@@int i=1 @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9433 @LENGTH@ 9
------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9433 @LENGTH@ 3
------INS VariableDeclarationFragment@@i=1 @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9437 @LENGTH@ 5
---------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=1 @AT@ 9437 @LENGTH@ 1
---------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@i=1 @AT@ 9441 @LENGTH@ 1
---INS InfixExpression@@i <= k @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9444 @LENGTH@ 6
------INS SimpleName@@i @TO@ InfixExpression@@i <= k @AT@ 9444 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@i <= k @AT@ 9445 @LENGTH@ 2
------INS SimpleName@@k @TO@ InfixExpression@@i <= k @AT@ 9449 @LENGTH@ 1
---INS PostfixExpression@@i++ @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9452 @LENGTH@ 3
------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 9452 @LENGTH@ 1
------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 9454 @LENGTH@ 2
---INS ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9472 @LENGTH@ 42
------INS Assignment@@result*=(double)(n - k + i) / (double)i @TO@ ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 41
---------INS SimpleName@@result @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 6
---------INS Operator@@*= @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9478 @LENGTH@ 2
---------INS InfixExpression@@(double)(n - k + i) / (double)i @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 31
------------INS CastExpression@@(double)(n - k + i) @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 19
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)(n - k + i) @AT@ 9483 @LENGTH@ 6
---------------INS ParenthesizedExpression@@(n - k + i) @TO@ CastExpression@@(double)(n - k + i) @AT@ 9490 @LENGTH@ 11
------------------INS InfixExpression@@n - k + i @TO@ ParenthesizedExpression@@(n - k + i) @AT@ 9491 @LENGTH@ 9
---------------------MOV Operator@@+ @TO@ InfixExpression@@n - k + i @AT@ 8442 @LENGTH@ 1
---------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + i @AT@ 9491 @LENGTH@ 5
------------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 9491 @LENGTH@ 1
------------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 9492 @LENGTH@ 1
------------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 9495 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ InfixExpression@@n - k + i @AT@ 9499 @LENGTH@ 1
------------INS Operator@@/ @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9501 @LENGTH@ 1
------------INS CastExpression@@(double)i @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9504 @LENGTH@ 9
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)i @AT@ 9505 @LENGTH@ 6
---------------INS SimpleName@@i @TO@ CastExpression@@(double)i @AT@ 9512 @LENGTH@ 1
, INS ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9536 @LENGTH@ 32
---INS MethodInvocation@@Math.floor(result + 0.5) @TO@ ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 24
------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 4
------INS SimpleName@@MethodName:floor:[result + 0.5] @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9548 @LENGTH@ 19
---------INS InfixExpression@@result + 0.5 @TO@ SimpleName@@MethodName:floor:[result + 0.5] @AT@ 9554 @LENGTH@ 12
------------MOV NumberLiteral@@0.5 @TO@ InfixExpression@@result + 0.5 @AT@ 8445 @LENGTH@ 3
------------INS SimpleName@@result @TO@ InfixExpression@@result + 0.5 @AT@ 9554 @LENGTH@ 6
------------INS Operator@@+ @TO@ InfixExpression@@result + 0.5 @AT@ 9560 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 10974 @LENGTH@ 80
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 10978 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 10978 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 10979 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 10982 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 11002 @LENGTH@ 42
------INS MethodInvocation@@Math.log(binomialCoefficient(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 34
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 4
---------INS SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11014 @LENGTH@ 29
------------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @AT@ 11018 @LENGTH@ 24
---------------INS SimpleName@@MethodName:binomialCoefficient:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 11018 @LENGTH@ 24
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11038 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11040 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 1030 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 11221 @LENGTH@ 88
---INS InfixExpression@@n < 1030 @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11225 @LENGTH@ 8
------INS SimpleName@@n @TO@ InfixExpression@@n < 1030 @AT@ 11225 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 1030 @AT@ 11226 @LENGTH@ 1
------INS NumberLiteral@@1030 @TO@ InfixExpression@@n < 1030 @AT@ 11229 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11250 @LENGTH@ 49
------MOV MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
]

CII:
OP1:(INS, IfStatement, null, OP2 OP17)
OP2:   (INS, InfixExpression, OP1, OP3 OP8 OP9)
OP3:      (INS, ParenthesizedExpression, OP2, OP4)
OP4:         (INS, InfixExpression, OP3, OP5 OP6 OP7)
OP5:            (INS, SimpleName, OP4, null)
OP6:            (INS, Operator, OP4, null)
OP7:            (INS, NumberLiteral, OP4, null)
OP8:      (INS, Operator, OP2, null)
OP9:      (INS, ParenthesizedExpression, OP2, OP10)
OP10:         (INS, InfixExpression, OP9, OP11 OP12 OP13)
OP11:            (INS, SimpleName, OP10, null)
OP12:            (INS, Operator, OP10, null)
OP13:            (INS, InfixExpression, OP10, OP14 OP15 OP16)
OP14:               (INS, SimpleName, OP13, null)
OP15:               (INS, Operator, OP13, null)
OP16:               (INS, NumberLiteral, OP13, null)
OP17:   (INS, ReturnStatement, OP1, OP18)
OP18:      (INS, SimpleName, OP17, null)





hASList: 
[UPD VariableDeclarationStatement@@long result=Math.round(binomialCoefficientDouble(n,k)); @TO@ long result=1; @AT@ 6045 @LENGTH@ 58
---UPD VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @TO@ result=1 @AT@ 6050 @LENGTH@ 52
------UPD MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
---------UPD SimpleName@@MethodName:round:[binomialCoefficientDouble(n,k)] @TO@ MethodName:log:[binomialCoefficientDouble(n,k)] @AT@ 6064 @LENGTH@ 38
------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @AT@ 6391 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@long, MethodName:binomialCoefficient, @@Argus:int+n+int+k+ @AT@ 6081 @LENGTH@ 64
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6085 @LENGTH@ 9
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 6085 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 6086 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 6089 @LENGTH@ 5
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 6089 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 6090 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 6093 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6108 @LENGTH@ 37
------INS MethodInvocation@@binomialCoefficient(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
---------INS SimpleName@@MethodName:binomialCoefficient:[n, n - k] @TO@ MethodInvocation@@binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6135 @LENGTH@ 1
------------INS InfixExpression@@n - k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6138 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6138 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6139 @LENGTH@ 1
---------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6142 @LENGTH@ 1
, UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n <= 61 @AT@ 6112 @LENGTH@ 152
---DEL InfixExpression@@result == Long.MAX_VALUE @AT@ 6116 @LENGTH@ 24
------DEL QualifiedName@@Long.MAX_VALUE @AT@ 6126 @LENGTH@ 14
---------DEL SimpleName@@Long @AT@ 6126 @LENGTH@ 4
---------DEL SimpleName@@MAX_VALUE @AT@ 6131 @LENGTH@ 9
---DEL ThrowStatement@@ClassInstanceCreation:new ArithmeticException("result too large to represent in a long integer") @AT@ 6156 @LENGTH@ 98
------DEL ClassInstanceCreation@@ArithmeticException["result too large to represent in a long integer"] @AT@ 6162 @LENGTH@ 91
---------DEL New@@new @AT@ 6162 @LENGTH@ 3
---------DEL SimpleType@@ArithmeticException @AT@ 6166 @LENGTH@ 19
---------DEL StringLiteral@@"result too large to represent in a long integer" @AT@ 6203 @LENGTH@ 49
---INS InfixExpression@@n <= 61 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6406 @LENGTH@ 7
------INS SimpleName@@n @TO@ InfixExpression@@n <= 61 @AT@ 6406 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@n <= 61 @AT@ 6407 @LENGTH@ 2
------INS NumberLiteral@@61 @TO@ InfixExpression@@n <= 61 @AT@ 6411 @LENGTH@ 2
---INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6499 @LENGTH@ 105
------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6504 @LENGTH@ 24
---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6504 @LENGTH@ 3
---------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6508 @LENGTH@ 5
------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6508 @LENGTH@ 1
------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6512 @LENGTH@ 1
---------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6515 @LENGTH@ 13
------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6515 @LENGTH@ 1
------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6519 @LENGTH@ 9
---------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6519 @LENGTH@ 5
------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6519 @LENGTH@ 1
------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6520 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6523 @LENGTH@ 1
---------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6524 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6527 @LENGTH@ 1
------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6530 @LENGTH@ 6
---------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6530 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6531 @LENGTH@ 2
---------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6535 @LENGTH@ 1
------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6538 @LENGTH@ 3
---------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6538 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6540 @LENGTH@ 2
------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6543 @LENGTH@ 3
---------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6543 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6545 @LENGTH@ 2
------INS ExpressionStatement@@Assignment:result=result * i / j @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6566 @LENGTH@ 24
---------INS Assignment@@result=result * i / j @TO@ ExpressionStatement@@Assignment:result=result * i / j @AT@ 6566 @LENGTH@ 23
------------INS SimpleName@@result @TO@ Assignment@@result=result * i / j @AT@ 6566 @LENGTH@ 6
------------INS Operator@@= @TO@ Assignment@@result=result * i / j @AT@ 6572 @LENGTH@ 1
------------INS InfixExpression@@result * i / j @TO@ Assignment@@result=result * i / j @AT@ 6575 @LENGTH@ 14
---------------INS InfixExpression@@result * i @TO@ InfixExpression@@result * i / j @AT@ 6575 @LENGTH@ 10
------------------MOV SimpleName@@result @TO@ InfixExpression@@result * i @AT@ 6116 @LENGTH@ 6
------------------MOV Operator@@== @TO@ InfixExpression@@result * i @AT@ 6122 @LENGTH@ 2
------------------INS SimpleName@@i @TO@ InfixExpression@@result * i @AT@ 6584 @LENGTH@ 1
---------------INS Operator@@/ @TO@ InfixExpression@@result * i / j @AT@ 6585 @LENGTH@ 1
---------------INS SimpleName@@j @TO@ InfixExpression@@result * i / j @AT@ 6588 @LENGTH@ 1
---INS IfStatement@@InfixExpression:n <= 66 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6620 @LENGTH@ 1053
------INS InfixExpression@@n <= 66 @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6624 @LENGTH@ 7
---------INS SimpleName@@n @TO@ InfixExpression@@n <= 66 @AT@ 6624 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@n <= 66 @AT@ 6625 @LENGTH@ 2
---------INS NumberLiteral@@66 @TO@ InfixExpression@@n <= 66 @AT@ 6629 @LENGTH@ 2
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6788 @LENGTH@ 517
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6793 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6793 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6797 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6797 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6801 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6804 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6804 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6808 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6808 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6808 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6809 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6812 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6813 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6816 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6819 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6819 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6820 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6824 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6827 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6827 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6829 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6832 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6832 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6834 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7217 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7217 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7222 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7222 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7226 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7226 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7230 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7233 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7253 @LENGTH@ 38
------------INS Assignment@@result=(result / (j / d)) * (i / d) @TO@ ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 37
---------------INS SimpleName@@result @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7259 @LENGTH@ 1
---------------INS InfixExpression@@(result / (j / d)) * (i / d) @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 28
------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 18
---------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7263 @LENGTH@ 16
------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7263 @LENGTH@ 6
------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7269 @LENGTH@ 1
------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7272 @LENGTH@ 7
---------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7273 @LENGTH@ 5
------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7273 @LENGTH@ 1
------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7274 @LENGTH@ 1
------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7277 @LENGTH@ 1
------------------INS Operator@@* @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7280 @LENGTH@ 1
------------------INS ParenthesizedExpression@@(i / d) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7283 @LENGTH@ 7
---------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7284 @LENGTH@ 5
------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7284 @LENGTH@ 1
------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7285 @LENGTH@ 1
------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7288 @LENGTH@ 1
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 7496 @LENGTH@ 167
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7501 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7501 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7505 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 7505 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 7509 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7512 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7512 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7516 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 7516 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 7516 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 7517 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 7520 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 7521 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 7524 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7527 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 7527 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 7528 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 7532 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7535 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 7535 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 7537 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7540 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 7540 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 7542 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7563 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7563 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7568 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7568 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7572 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7572 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7576 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7579 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7599 @LENGTH@ 50
------------INS Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 49
---------------INS SimpleName@@result @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7605 @LENGTH@ 1
---------------INS MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
------------------INS SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @TO@ MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
---------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7620 @LENGTH@ 18
------------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7621 @LENGTH@ 16
---------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7621 @LENGTH@ 6
---------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7627 @LENGTH@ 1
---------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7630 @LENGTH@ 7
------------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7631 @LENGTH@ 5
---------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7631 @LENGTH@ 1
---------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7632 @LENGTH@ 1
---------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7635 @LENGTH@ 1
---------------------INS ParenthesizedExpression@@(i / d) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7640 @LENGTH@ 7
------------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7641 @LENGTH@ 5
---------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7641 @LENGTH@ 1
---------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7642 @LENGTH@ 1
---------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7645 @LENGTH@ 1
, DEL ReturnStatement@@MethodInvocation:Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8386 @LENGTH@ 64
---DEL MethodInvocation@@Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8393 @LENGTH@ 56
------DEL SimpleName@@Name:Math @AT@ 8393 @LENGTH@ 4
------DEL SimpleName@@MethodName:floor:[Math.exp(binomialCoefficientLog(n,k)) + 0.5] @AT@ 8398 @LENGTH@ 51
---------DEL InfixExpression@@Math.exp(binomialCoefficientLog(n,k)) + 0.5 @AT@ 8404 @LENGTH@ 44
------------DEL MethodInvocation@@Math.exp(binomialCoefficientLog(n,k)) @AT@ 8404 @LENGTH@ 38
---------------DEL SimpleName@@MethodName:exp:[binomialCoefficientLog(n,k)] @AT@ 8409 @LENGTH@ 33
------------------DEL MethodInvocation@@binomialCoefficientLog(n,k) @AT@ 8413 @LENGTH@ 28
, INS IfStatement@@InfixExpression:n < k @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8790 @LENGTH@ 138
---INS InfixExpression@@n < k @TO@ IfStatement@@InfixExpression:n < k @AT@ 8794 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < k @AT@ 8794 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < k @AT@ 8795 @LENGTH@ 1
------INS SimpleName@@k @TO@ InfixExpression@@n < k @AT@ 8798 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < k @AT@ 8815 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @AT@ 8821 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8821 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8825 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= k for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8867 @LENGTH@ 49
, INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8937 @LENGTH@ 138
---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8941 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < 0 @AT@ 8941 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 0 @AT@ 8942 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 @AT@ 8945 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8962 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @AT@ 8968 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8968 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8972 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= 0 for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 9014 @LENGTH@ 49
, INS IfStatement@@InfixExpression:(n == k) || (k == 0) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9084 @LENGTH@ 60
---INS InfixExpression@@(n == k) || (k == 0) @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 20
------INS ParenthesizedExpression@@(n == k) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 8
---------INS InfixExpression@@n == k @TO@ ParenthesizedExpression@@(n == k) @AT@ 9089 @LENGTH@ 6
------------INS SimpleName@@n @TO@ InfixExpression@@n == k @AT@ 9089 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@n == k @AT@ 9090 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@n == k @AT@ 9094 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9096 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == 0) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9100 @LENGTH@ 8
---------INS InfixExpression@@k == 0 @TO@ ParenthesizedExpression@@(k == 0) @AT@ 9101 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 0 @AT@ 9101 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 0 @AT@ 9102 @LENGTH@ 2
------------INS NumberLiteral@@0 @TO@ InfixExpression@@k == 0 @AT@ 9106 @LENGTH@ 1
---INS ReturnStatement@@NumberLiteral:1d @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9124 @LENGTH@ 10
------INS NumberLiteral@@1d @TO@ ReturnStatement@@NumberLiteral:1d @AT@ 9131 @LENGTH@ 2
, INS IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9153 @LENGTH@ 63
---INS InfixExpression@@(k == 1) || (k == n - 1) @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 24
------INS ParenthesizedExpression@@(k == 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 8
---------INS InfixExpression@@k == 1 @TO@ ParenthesizedExpression@@(k == 1) @AT@ 9158 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 1 @AT@ 9158 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 1 @AT@ 9159 @LENGTH@ 2
------------INS NumberLiteral@@1 @TO@ InfixExpression@@k == 1 @AT@ 9163 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9165 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == n - 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9169 @LENGTH@ 12
---------INS InfixExpression@@k == n - 1 @TO@ ParenthesizedExpression@@(k == n - 1) @AT@ 9170 @LENGTH@ 10
------------INS SimpleName@@k @TO@ InfixExpression@@k == n - 1 @AT@ 9170 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == n - 1 @AT@ 9171 @LENGTH@ 2
------------INS InfixExpression@@n - 1 @TO@ InfixExpression@@k == n - 1 @AT@ 9175 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - 1 @AT@ 9175 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - 1 @AT@ 9176 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - 1 @AT@ 9179 @LENGTH@ 1
---INS ReturnStatement@@SimpleName:n @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9197 @LENGTH@ 9
------INS SimpleName@@n @TO@ ReturnStatement@@SimpleName:n @AT@ 9204 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9225 @LENGTH@ 80
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9229 @LENGTH@ 7
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 9229 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 9230 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 9233 @LENGTH@ 3
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 9233 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 9234 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 9235 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9252 @LENGTH@ 43
------INS MethodInvocation@@binomialCoefficientDouble(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @AT@ 9259 @LENGTH@ 35
---------MOV SimpleName@@Name:Math @TO@ MethodInvocation@@binomialCoefficientDouble(n,n - k) @AT@ 8404 @LENGTH@ 4
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9314 @LENGTH@ 68
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9318 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 9318 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 9319 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 9322 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9340 @LENGTH@ 32
------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @AT@ 9347 @LENGTH@ 24
---------MOV SimpleName@@MethodName:binomialCoefficientLog:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 8413 @LENGTH@ 28
, INS VariableDeclarationStatement@@double result=1d; @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9400 @LENGTH@ 19
---INS PrimitiveType@@double @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9400 @LENGTH@ 6
---INS VariableDeclarationFragment@@result=1d @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9407 @LENGTH@ 11
------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=1d @AT@ 9407 @LENGTH@ 6
------INS NumberLiteral@@1d @TO@ VariableDeclarationFragment@@result=1d @AT@ 9416 @LENGTH@ 2
, INS ForStatement@@[int i=1];i <= k; [i++] @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9428 @LENGTH@ 96
---INS VariableDeclarationExpression@@int i=1 @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9433 @LENGTH@ 9
------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9433 @LENGTH@ 3
------INS VariableDeclarationFragment@@i=1 @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9437 @LENGTH@ 5
---------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=1 @AT@ 9437 @LENGTH@ 1
---------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@i=1 @AT@ 9441 @LENGTH@ 1
---INS InfixExpression@@i <= k @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9444 @LENGTH@ 6
------INS SimpleName@@i @TO@ InfixExpression@@i <= k @AT@ 9444 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@i <= k @AT@ 9445 @LENGTH@ 2
------INS SimpleName@@k @TO@ InfixExpression@@i <= k @AT@ 9449 @LENGTH@ 1
---INS PostfixExpression@@i++ @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9452 @LENGTH@ 3
------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 9452 @LENGTH@ 1
------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 9454 @LENGTH@ 2
---INS ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9472 @LENGTH@ 42
------INS Assignment@@result*=(double)(n - k + i) / (double)i @TO@ ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 41
---------INS SimpleName@@result @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 6
---------INS Operator@@*= @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9478 @LENGTH@ 2
---------INS InfixExpression@@(double)(n - k + i) / (double)i @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 31
------------INS CastExpression@@(double)(n - k + i) @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 19
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)(n - k + i) @AT@ 9483 @LENGTH@ 6
---------------INS ParenthesizedExpression@@(n - k + i) @TO@ CastExpression@@(double)(n - k + i) @AT@ 9490 @LENGTH@ 11
------------------INS InfixExpression@@n - k + i @TO@ ParenthesizedExpression@@(n - k + i) @AT@ 9491 @LENGTH@ 9
---------------------MOV Operator@@+ @TO@ InfixExpression@@n - k + i @AT@ 8442 @LENGTH@ 1
---------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + i @AT@ 9491 @LENGTH@ 5
------------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 9491 @LENGTH@ 1
------------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 9492 @LENGTH@ 1
------------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 9495 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ InfixExpression@@n - k + i @AT@ 9499 @LENGTH@ 1
------------INS Operator@@/ @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9501 @LENGTH@ 1
------------INS CastExpression@@(double)i @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9504 @LENGTH@ 9
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)i @AT@ 9505 @LENGTH@ 6
---------------INS SimpleName@@i @TO@ CastExpression@@(double)i @AT@ 9512 @LENGTH@ 1
, INS ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9536 @LENGTH@ 32
---INS MethodInvocation@@Math.floor(result + 0.5) @TO@ ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 24
------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 4
------INS SimpleName@@MethodName:floor:[result + 0.5] @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9548 @LENGTH@ 19
---------INS InfixExpression@@result + 0.5 @TO@ SimpleName@@MethodName:floor:[result + 0.5] @AT@ 9554 @LENGTH@ 12
------------MOV NumberLiteral@@0.5 @TO@ InfixExpression@@result + 0.5 @AT@ 8445 @LENGTH@ 3
------------INS SimpleName@@result @TO@ InfixExpression@@result + 0.5 @AT@ 9554 @LENGTH@ 6
------------INS Operator@@+ @TO@ InfixExpression@@result + 0.5 @AT@ 9560 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 10974 @LENGTH@ 80
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 10978 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 10978 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 10979 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 10982 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 11002 @LENGTH@ 42
------INS MethodInvocation@@Math.log(binomialCoefficient(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 34
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 4
---------INS SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11014 @LENGTH@ 29
------------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @AT@ 11018 @LENGTH@ 24
---------------INS SimpleName@@MethodName:binomialCoefficient:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 11018 @LENGTH@ 24
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11038 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11040 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 1030 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 11221 @LENGTH@ 88
---INS InfixExpression@@n < 1030 @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11225 @LENGTH@ 8
------INS SimpleName@@n @TO@ InfixExpression@@n < 1030 @AT@ 11225 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 1030 @AT@ 11226 @LENGTH@ 1
------INS NumberLiteral@@1030 @TO@ InfixExpression@@n < 1030 @AT@ 11229 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11250 @LENGTH@ 49
------MOV MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
]

CII:
OP1:(INS, IfStatement, null, OP2 OP9)
OP2:   (INS, InfixExpression, OP1, OP3 OP4 OP5)
OP3:      (INS, SimpleName, OP2, null)
OP4:      (INS, Operator, OP2, null)
OP5:      (INS, InfixExpression, OP2, OP6 OP7 OP8)
OP6:         (INS, SimpleName, OP5, null)
OP7:         (INS, Operator, OP5, null)
OP8:         (INS, NumberLiteral, OP5, null)
OP9:   (INS, ReturnStatement, OP1, OP10)
OP10:      (INS, MethodInvocation, OP9, OP11)
OP11:         (MOV, SimpleName, OP10, null)





hASList: 
[UPD VariableDeclarationStatement@@long result=Math.round(binomialCoefficientDouble(n,k)); @TO@ long result=1; @AT@ 6045 @LENGTH@ 58
---UPD VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @TO@ result=1 @AT@ 6050 @LENGTH@ 52
------UPD MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
---------UPD SimpleName@@MethodName:round:[binomialCoefficientDouble(n,k)] @TO@ MethodName:log:[binomialCoefficientDouble(n,k)] @AT@ 6064 @LENGTH@ 38
------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @AT@ 6391 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@long, MethodName:binomialCoefficient, @@Argus:int+n+int+k+ @AT@ 6081 @LENGTH@ 64
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6085 @LENGTH@ 9
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 6085 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 6086 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 6089 @LENGTH@ 5
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 6089 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 6090 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 6093 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6108 @LENGTH@ 37
------INS MethodInvocation@@binomialCoefficient(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
---------INS SimpleName@@MethodName:binomialCoefficient:[n, n - k] @TO@ MethodInvocation@@binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6135 @LENGTH@ 1
------------INS InfixExpression@@n - k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6138 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6138 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6139 @LENGTH@ 1
---------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6142 @LENGTH@ 1
, UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n <= 61 @AT@ 6112 @LENGTH@ 152
---DEL InfixExpression@@result == Long.MAX_VALUE @AT@ 6116 @LENGTH@ 24
------DEL QualifiedName@@Long.MAX_VALUE @AT@ 6126 @LENGTH@ 14
---------DEL SimpleName@@Long @AT@ 6126 @LENGTH@ 4
---------DEL SimpleName@@MAX_VALUE @AT@ 6131 @LENGTH@ 9
---DEL ThrowStatement@@ClassInstanceCreation:new ArithmeticException("result too large to represent in a long integer") @AT@ 6156 @LENGTH@ 98
------DEL ClassInstanceCreation@@ArithmeticException["result too large to represent in a long integer"] @AT@ 6162 @LENGTH@ 91
---------DEL New@@new @AT@ 6162 @LENGTH@ 3
---------DEL SimpleType@@ArithmeticException @AT@ 6166 @LENGTH@ 19
---------DEL StringLiteral@@"result too large to represent in a long integer" @AT@ 6203 @LENGTH@ 49
---INS InfixExpression@@n <= 61 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6406 @LENGTH@ 7
------INS SimpleName@@n @TO@ InfixExpression@@n <= 61 @AT@ 6406 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@n <= 61 @AT@ 6407 @LENGTH@ 2
------INS NumberLiteral@@61 @TO@ InfixExpression@@n <= 61 @AT@ 6411 @LENGTH@ 2
---INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6499 @LENGTH@ 105
------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6504 @LENGTH@ 24
---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6504 @LENGTH@ 3
---------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6508 @LENGTH@ 5
------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6508 @LENGTH@ 1
------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6512 @LENGTH@ 1
---------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6515 @LENGTH@ 13
------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6515 @LENGTH@ 1
------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6519 @LENGTH@ 9
---------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6519 @LENGTH@ 5
------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6519 @LENGTH@ 1
------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6520 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6523 @LENGTH@ 1
---------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6524 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6527 @LENGTH@ 1
------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6530 @LENGTH@ 6
---------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6530 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6531 @LENGTH@ 2
---------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6535 @LENGTH@ 1
------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6538 @LENGTH@ 3
---------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6538 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6540 @LENGTH@ 2
------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6543 @LENGTH@ 3
---------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6543 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6545 @LENGTH@ 2
------INS ExpressionStatement@@Assignment:result=result * i / j @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6566 @LENGTH@ 24
---------INS Assignment@@result=result * i / j @TO@ ExpressionStatement@@Assignment:result=result * i / j @AT@ 6566 @LENGTH@ 23
------------INS SimpleName@@result @TO@ Assignment@@result=result * i / j @AT@ 6566 @LENGTH@ 6
------------INS Operator@@= @TO@ Assignment@@result=result * i / j @AT@ 6572 @LENGTH@ 1
------------INS InfixExpression@@result * i / j @TO@ Assignment@@result=result * i / j @AT@ 6575 @LENGTH@ 14
---------------INS InfixExpression@@result * i @TO@ InfixExpression@@result * i / j @AT@ 6575 @LENGTH@ 10
------------------MOV SimpleName@@result @TO@ InfixExpression@@result * i @AT@ 6116 @LENGTH@ 6
------------------MOV Operator@@== @TO@ InfixExpression@@result * i @AT@ 6122 @LENGTH@ 2
------------------INS SimpleName@@i @TO@ InfixExpression@@result * i @AT@ 6584 @LENGTH@ 1
---------------INS Operator@@/ @TO@ InfixExpression@@result * i / j @AT@ 6585 @LENGTH@ 1
---------------INS SimpleName@@j @TO@ InfixExpression@@result * i / j @AT@ 6588 @LENGTH@ 1
---INS IfStatement@@InfixExpression:n <= 66 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6620 @LENGTH@ 1053
------INS InfixExpression@@n <= 66 @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6624 @LENGTH@ 7
---------INS SimpleName@@n @TO@ InfixExpression@@n <= 66 @AT@ 6624 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@n <= 66 @AT@ 6625 @LENGTH@ 2
---------INS NumberLiteral@@66 @TO@ InfixExpression@@n <= 66 @AT@ 6629 @LENGTH@ 2
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6788 @LENGTH@ 517
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6793 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6793 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6797 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6797 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6801 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6804 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6804 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6808 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6808 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6808 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6809 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6812 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6813 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6816 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6819 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6819 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6820 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6824 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6827 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6827 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6829 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6832 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6832 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6834 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7217 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7217 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7222 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7222 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7226 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7226 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7230 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7233 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7253 @LENGTH@ 38
------------INS Assignment@@result=(result / (j / d)) * (i / d) @TO@ ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 37
---------------INS SimpleName@@result @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7259 @LENGTH@ 1
---------------INS InfixExpression@@(result / (j / d)) * (i / d) @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 28
------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 18
---------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7263 @LENGTH@ 16
------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7263 @LENGTH@ 6
------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7269 @LENGTH@ 1
------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7272 @LENGTH@ 7
---------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7273 @LENGTH@ 5
------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7273 @LENGTH@ 1
------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7274 @LENGTH@ 1
------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7277 @LENGTH@ 1
------------------INS Operator@@* @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7280 @LENGTH@ 1
------------------INS ParenthesizedExpression@@(i / d) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7283 @LENGTH@ 7
---------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7284 @LENGTH@ 5
------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7284 @LENGTH@ 1
------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7285 @LENGTH@ 1
------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7288 @LENGTH@ 1
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 7496 @LENGTH@ 167
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7501 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7501 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7505 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 7505 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 7509 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7512 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7512 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7516 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 7516 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 7516 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 7517 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 7520 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 7521 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 7524 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7527 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 7527 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 7528 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 7532 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7535 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 7535 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 7537 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7540 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 7540 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 7542 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7563 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7563 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7568 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7568 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7572 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7572 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7576 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7579 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7599 @LENGTH@ 50
------------INS Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 49
---------------INS SimpleName@@result @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7605 @LENGTH@ 1
---------------INS MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
------------------INS SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @TO@ MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
---------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7620 @LENGTH@ 18
------------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7621 @LENGTH@ 16
---------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7621 @LENGTH@ 6
---------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7627 @LENGTH@ 1
---------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7630 @LENGTH@ 7
------------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7631 @LENGTH@ 5
---------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7631 @LENGTH@ 1
---------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7632 @LENGTH@ 1
---------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7635 @LENGTH@ 1
---------------------INS ParenthesizedExpression@@(i / d) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7640 @LENGTH@ 7
------------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7641 @LENGTH@ 5
---------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7641 @LENGTH@ 1
---------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7642 @LENGTH@ 1
---------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7645 @LENGTH@ 1
, DEL ReturnStatement@@MethodInvocation:Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8386 @LENGTH@ 64
---DEL MethodInvocation@@Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8393 @LENGTH@ 56
------DEL SimpleName@@Name:Math @AT@ 8393 @LENGTH@ 4
------DEL SimpleName@@MethodName:floor:[Math.exp(binomialCoefficientLog(n,k)) + 0.5] @AT@ 8398 @LENGTH@ 51
---------DEL InfixExpression@@Math.exp(binomialCoefficientLog(n,k)) + 0.5 @AT@ 8404 @LENGTH@ 44
------------DEL MethodInvocation@@Math.exp(binomialCoefficientLog(n,k)) @AT@ 8404 @LENGTH@ 38
---------------DEL SimpleName@@MethodName:exp:[binomialCoefficientLog(n,k)] @AT@ 8409 @LENGTH@ 33
------------------DEL MethodInvocation@@binomialCoefficientLog(n,k) @AT@ 8413 @LENGTH@ 28
, INS IfStatement@@InfixExpression:n < k @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8790 @LENGTH@ 138
---INS InfixExpression@@n < k @TO@ IfStatement@@InfixExpression:n < k @AT@ 8794 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < k @AT@ 8794 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < k @AT@ 8795 @LENGTH@ 1
------INS SimpleName@@k @TO@ InfixExpression@@n < k @AT@ 8798 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < k @AT@ 8815 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @AT@ 8821 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8821 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8825 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= k for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8867 @LENGTH@ 49
, INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8937 @LENGTH@ 138
---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8941 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < 0 @AT@ 8941 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 0 @AT@ 8942 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 @AT@ 8945 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8962 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @AT@ 8968 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8968 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8972 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= 0 for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 9014 @LENGTH@ 49
, INS IfStatement@@InfixExpression:(n == k) || (k == 0) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9084 @LENGTH@ 60
---INS InfixExpression@@(n == k) || (k == 0) @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 20
------INS ParenthesizedExpression@@(n == k) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 8
---------INS InfixExpression@@n == k @TO@ ParenthesizedExpression@@(n == k) @AT@ 9089 @LENGTH@ 6
------------INS SimpleName@@n @TO@ InfixExpression@@n == k @AT@ 9089 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@n == k @AT@ 9090 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@n == k @AT@ 9094 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9096 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == 0) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9100 @LENGTH@ 8
---------INS InfixExpression@@k == 0 @TO@ ParenthesizedExpression@@(k == 0) @AT@ 9101 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 0 @AT@ 9101 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 0 @AT@ 9102 @LENGTH@ 2
------------INS NumberLiteral@@0 @TO@ InfixExpression@@k == 0 @AT@ 9106 @LENGTH@ 1
---INS ReturnStatement@@NumberLiteral:1d @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9124 @LENGTH@ 10
------INS NumberLiteral@@1d @TO@ ReturnStatement@@NumberLiteral:1d @AT@ 9131 @LENGTH@ 2
, INS IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9153 @LENGTH@ 63
---INS InfixExpression@@(k == 1) || (k == n - 1) @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 24
------INS ParenthesizedExpression@@(k == 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 8
---------INS InfixExpression@@k == 1 @TO@ ParenthesizedExpression@@(k == 1) @AT@ 9158 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 1 @AT@ 9158 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 1 @AT@ 9159 @LENGTH@ 2
------------INS NumberLiteral@@1 @TO@ InfixExpression@@k == 1 @AT@ 9163 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9165 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == n - 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9169 @LENGTH@ 12
---------INS InfixExpression@@k == n - 1 @TO@ ParenthesizedExpression@@(k == n - 1) @AT@ 9170 @LENGTH@ 10
------------INS SimpleName@@k @TO@ InfixExpression@@k == n - 1 @AT@ 9170 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == n - 1 @AT@ 9171 @LENGTH@ 2
------------INS InfixExpression@@n - 1 @TO@ InfixExpression@@k == n - 1 @AT@ 9175 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - 1 @AT@ 9175 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - 1 @AT@ 9176 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - 1 @AT@ 9179 @LENGTH@ 1
---INS ReturnStatement@@SimpleName:n @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9197 @LENGTH@ 9
------INS SimpleName@@n @TO@ ReturnStatement@@SimpleName:n @AT@ 9204 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9225 @LENGTH@ 80
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9229 @LENGTH@ 7
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 9229 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 9230 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 9233 @LENGTH@ 3
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 9233 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 9234 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 9235 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9252 @LENGTH@ 43
------INS MethodInvocation@@binomialCoefficientDouble(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @AT@ 9259 @LENGTH@ 35
---------MOV SimpleName@@Name:Math @TO@ MethodInvocation@@binomialCoefficientDouble(n,n - k) @AT@ 8404 @LENGTH@ 4
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9314 @LENGTH@ 68
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9318 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 9318 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 9319 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 9322 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9340 @LENGTH@ 32
------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @AT@ 9347 @LENGTH@ 24
---------MOV SimpleName@@MethodName:binomialCoefficientLog:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 8413 @LENGTH@ 28
, INS VariableDeclarationStatement@@double result=1d; @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9400 @LENGTH@ 19
---INS PrimitiveType@@double @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9400 @LENGTH@ 6
---INS VariableDeclarationFragment@@result=1d @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9407 @LENGTH@ 11
------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=1d @AT@ 9407 @LENGTH@ 6
------INS NumberLiteral@@1d @TO@ VariableDeclarationFragment@@result=1d @AT@ 9416 @LENGTH@ 2
, INS ForStatement@@[int i=1];i <= k; [i++] @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9428 @LENGTH@ 96
---INS VariableDeclarationExpression@@int i=1 @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9433 @LENGTH@ 9
------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9433 @LENGTH@ 3
------INS VariableDeclarationFragment@@i=1 @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9437 @LENGTH@ 5
---------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=1 @AT@ 9437 @LENGTH@ 1
---------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@i=1 @AT@ 9441 @LENGTH@ 1
---INS InfixExpression@@i <= k @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9444 @LENGTH@ 6
------INS SimpleName@@i @TO@ InfixExpression@@i <= k @AT@ 9444 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@i <= k @AT@ 9445 @LENGTH@ 2
------INS SimpleName@@k @TO@ InfixExpression@@i <= k @AT@ 9449 @LENGTH@ 1
---INS PostfixExpression@@i++ @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9452 @LENGTH@ 3
------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 9452 @LENGTH@ 1
------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 9454 @LENGTH@ 2
---INS ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9472 @LENGTH@ 42
------INS Assignment@@result*=(double)(n - k + i) / (double)i @TO@ ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 41
---------INS SimpleName@@result @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 6
---------INS Operator@@*= @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9478 @LENGTH@ 2
---------INS InfixExpression@@(double)(n - k + i) / (double)i @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 31
------------INS CastExpression@@(double)(n - k + i) @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 19
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)(n - k + i) @AT@ 9483 @LENGTH@ 6
---------------INS ParenthesizedExpression@@(n - k + i) @TO@ CastExpression@@(double)(n - k + i) @AT@ 9490 @LENGTH@ 11
------------------INS InfixExpression@@n - k + i @TO@ ParenthesizedExpression@@(n - k + i) @AT@ 9491 @LENGTH@ 9
---------------------MOV Operator@@+ @TO@ InfixExpression@@n - k + i @AT@ 8442 @LENGTH@ 1
---------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + i @AT@ 9491 @LENGTH@ 5
------------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 9491 @LENGTH@ 1
------------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 9492 @LENGTH@ 1
------------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 9495 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ InfixExpression@@n - k + i @AT@ 9499 @LENGTH@ 1
------------INS Operator@@/ @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9501 @LENGTH@ 1
------------INS CastExpression@@(double)i @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9504 @LENGTH@ 9
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)i @AT@ 9505 @LENGTH@ 6
---------------INS SimpleName@@i @TO@ CastExpression@@(double)i @AT@ 9512 @LENGTH@ 1
, INS ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9536 @LENGTH@ 32
---INS MethodInvocation@@Math.floor(result + 0.5) @TO@ ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 24
------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 4
------INS SimpleName@@MethodName:floor:[result + 0.5] @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9548 @LENGTH@ 19
---------INS InfixExpression@@result + 0.5 @TO@ SimpleName@@MethodName:floor:[result + 0.5] @AT@ 9554 @LENGTH@ 12
------------MOV NumberLiteral@@0.5 @TO@ InfixExpression@@result + 0.5 @AT@ 8445 @LENGTH@ 3
------------INS SimpleName@@result @TO@ InfixExpression@@result + 0.5 @AT@ 9554 @LENGTH@ 6
------------INS Operator@@+ @TO@ InfixExpression@@result + 0.5 @AT@ 9560 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 10974 @LENGTH@ 80
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 10978 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 10978 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 10979 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 10982 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 11002 @LENGTH@ 42
------INS MethodInvocation@@Math.log(binomialCoefficient(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 34
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 4
---------INS SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11014 @LENGTH@ 29
------------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @AT@ 11018 @LENGTH@ 24
---------------INS SimpleName@@MethodName:binomialCoefficient:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 11018 @LENGTH@ 24
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11038 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11040 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 1030 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 11221 @LENGTH@ 88
---INS InfixExpression@@n < 1030 @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11225 @LENGTH@ 8
------INS SimpleName@@n @TO@ InfixExpression@@n < 1030 @AT@ 11225 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 1030 @AT@ 11226 @LENGTH@ 1
------INS NumberLiteral@@1030 @TO@ InfixExpression@@n < 1030 @AT@ 11229 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11250 @LENGTH@ 49
------MOV MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
]

CII:
OP1:(INS, IfStatement, null, OP2 OP6)
OP2:   (INS, InfixExpression, OP1, OP3 OP4 OP5)
OP3:      (INS, SimpleName, OP2, null)
OP4:      (INS, Operator, OP2, null)
OP5:      (INS, NumberLiteral, OP2, null)
OP6:   (INS, ReturnStatement, OP1, OP7)
OP7:      (INS, MethodInvocation, OP6, OP8)
OP8:         (MOV, SimpleName, OP7, null)





hASList: 
[UPD VariableDeclarationStatement@@long result=Math.round(binomialCoefficientDouble(n,k)); @TO@ long result=1; @AT@ 6045 @LENGTH@ 58
---UPD VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @TO@ result=1 @AT@ 6050 @LENGTH@ 52
------UPD MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
---------UPD SimpleName@@MethodName:round:[binomialCoefficientDouble(n,k)] @TO@ MethodName:log:[binomialCoefficientDouble(n,k)] @AT@ 6064 @LENGTH@ 38
------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @AT@ 6391 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@long, MethodName:binomialCoefficient, @@Argus:int+n+int+k+ @AT@ 6081 @LENGTH@ 64
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6085 @LENGTH@ 9
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 6085 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 6086 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 6089 @LENGTH@ 5
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 6089 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 6090 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 6093 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6108 @LENGTH@ 37
------INS MethodInvocation@@binomialCoefficient(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
---------INS SimpleName@@MethodName:binomialCoefficient:[n, n - k] @TO@ MethodInvocation@@binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6135 @LENGTH@ 1
------------INS InfixExpression@@n - k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6138 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6138 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6139 @LENGTH@ 1
---------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6142 @LENGTH@ 1
, UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n <= 61 @AT@ 6112 @LENGTH@ 152
---DEL InfixExpression@@result == Long.MAX_VALUE @AT@ 6116 @LENGTH@ 24
------DEL QualifiedName@@Long.MAX_VALUE @AT@ 6126 @LENGTH@ 14
---------DEL SimpleName@@Long @AT@ 6126 @LENGTH@ 4
---------DEL SimpleName@@MAX_VALUE @AT@ 6131 @LENGTH@ 9
---DEL ThrowStatement@@ClassInstanceCreation:new ArithmeticException("result too large to represent in a long integer") @AT@ 6156 @LENGTH@ 98
------DEL ClassInstanceCreation@@ArithmeticException["result too large to represent in a long integer"] @AT@ 6162 @LENGTH@ 91
---------DEL New@@new @AT@ 6162 @LENGTH@ 3
---------DEL SimpleType@@ArithmeticException @AT@ 6166 @LENGTH@ 19
---------DEL StringLiteral@@"result too large to represent in a long integer" @AT@ 6203 @LENGTH@ 49
---INS InfixExpression@@n <= 61 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6406 @LENGTH@ 7
------INS SimpleName@@n @TO@ InfixExpression@@n <= 61 @AT@ 6406 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@n <= 61 @AT@ 6407 @LENGTH@ 2
------INS NumberLiteral@@61 @TO@ InfixExpression@@n <= 61 @AT@ 6411 @LENGTH@ 2
---INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6499 @LENGTH@ 105
------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6504 @LENGTH@ 24
---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6504 @LENGTH@ 3
---------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6508 @LENGTH@ 5
------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6508 @LENGTH@ 1
------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6512 @LENGTH@ 1
---------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6515 @LENGTH@ 13
------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6515 @LENGTH@ 1
------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6519 @LENGTH@ 9
---------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6519 @LENGTH@ 5
------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6519 @LENGTH@ 1
------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6520 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6523 @LENGTH@ 1
---------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6524 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6527 @LENGTH@ 1
------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6530 @LENGTH@ 6
---------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6530 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6531 @LENGTH@ 2
---------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6535 @LENGTH@ 1
------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6538 @LENGTH@ 3
---------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6538 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6540 @LENGTH@ 2
------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6543 @LENGTH@ 3
---------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6543 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6545 @LENGTH@ 2
------INS ExpressionStatement@@Assignment:result=result * i / j @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6566 @LENGTH@ 24
---------INS Assignment@@result=result * i / j @TO@ ExpressionStatement@@Assignment:result=result * i / j @AT@ 6566 @LENGTH@ 23
------------INS SimpleName@@result @TO@ Assignment@@result=result * i / j @AT@ 6566 @LENGTH@ 6
------------INS Operator@@= @TO@ Assignment@@result=result * i / j @AT@ 6572 @LENGTH@ 1
------------INS InfixExpression@@result * i / j @TO@ Assignment@@result=result * i / j @AT@ 6575 @LENGTH@ 14
---------------INS InfixExpression@@result * i @TO@ InfixExpression@@result * i / j @AT@ 6575 @LENGTH@ 10
------------------MOV SimpleName@@result @TO@ InfixExpression@@result * i @AT@ 6116 @LENGTH@ 6
------------------MOV Operator@@== @TO@ InfixExpression@@result * i @AT@ 6122 @LENGTH@ 2
------------------INS SimpleName@@i @TO@ InfixExpression@@result * i @AT@ 6584 @LENGTH@ 1
---------------INS Operator@@/ @TO@ InfixExpression@@result * i / j @AT@ 6585 @LENGTH@ 1
---------------INS SimpleName@@j @TO@ InfixExpression@@result * i / j @AT@ 6588 @LENGTH@ 1
---INS IfStatement@@InfixExpression:n <= 66 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6620 @LENGTH@ 1053
------INS InfixExpression@@n <= 66 @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6624 @LENGTH@ 7
---------INS SimpleName@@n @TO@ InfixExpression@@n <= 66 @AT@ 6624 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@n <= 66 @AT@ 6625 @LENGTH@ 2
---------INS NumberLiteral@@66 @TO@ InfixExpression@@n <= 66 @AT@ 6629 @LENGTH@ 2
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6788 @LENGTH@ 517
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6793 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6793 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6797 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6797 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6801 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6804 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6804 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6808 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6808 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6808 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6809 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6812 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6813 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6816 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6819 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6819 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6820 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6824 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6827 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6827 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6829 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6832 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6832 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6834 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7217 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7217 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7222 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7222 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7226 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7226 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7230 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7233 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7253 @LENGTH@ 38
------------INS Assignment@@result=(result / (j / d)) * (i / d) @TO@ ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 37
---------------INS SimpleName@@result @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7259 @LENGTH@ 1
---------------INS InfixExpression@@(result / (j / d)) * (i / d) @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 28
------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 18
---------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7263 @LENGTH@ 16
------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7263 @LENGTH@ 6
------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7269 @LENGTH@ 1
------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7272 @LENGTH@ 7
---------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7273 @LENGTH@ 5
------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7273 @LENGTH@ 1
------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7274 @LENGTH@ 1
------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7277 @LENGTH@ 1
------------------INS Operator@@* @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7280 @LENGTH@ 1
------------------INS ParenthesizedExpression@@(i / d) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7283 @LENGTH@ 7
---------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7284 @LENGTH@ 5
------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7284 @LENGTH@ 1
------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7285 @LENGTH@ 1
------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7288 @LENGTH@ 1
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 7496 @LENGTH@ 167
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7501 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7501 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7505 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 7505 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 7509 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7512 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7512 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7516 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 7516 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 7516 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 7517 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 7520 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 7521 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 7524 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7527 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 7527 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 7528 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 7532 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7535 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 7535 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 7537 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7540 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 7540 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 7542 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7563 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7563 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7568 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7568 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7572 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7572 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7576 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7579 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7599 @LENGTH@ 50
------------INS Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 49
---------------INS SimpleName@@result @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7605 @LENGTH@ 1
---------------INS MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
------------------INS SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @TO@ MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
---------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7620 @LENGTH@ 18
------------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7621 @LENGTH@ 16
---------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7621 @LENGTH@ 6
---------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7627 @LENGTH@ 1
---------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7630 @LENGTH@ 7
------------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7631 @LENGTH@ 5
---------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7631 @LENGTH@ 1
---------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7632 @LENGTH@ 1
---------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7635 @LENGTH@ 1
---------------------INS ParenthesizedExpression@@(i / d) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7640 @LENGTH@ 7
------------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7641 @LENGTH@ 5
---------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7641 @LENGTH@ 1
---------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7642 @LENGTH@ 1
---------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7645 @LENGTH@ 1
, DEL ReturnStatement@@MethodInvocation:Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8386 @LENGTH@ 64
---DEL MethodInvocation@@Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8393 @LENGTH@ 56
------DEL SimpleName@@Name:Math @AT@ 8393 @LENGTH@ 4
------DEL SimpleName@@MethodName:floor:[Math.exp(binomialCoefficientLog(n,k)) + 0.5] @AT@ 8398 @LENGTH@ 51
---------DEL InfixExpression@@Math.exp(binomialCoefficientLog(n,k)) + 0.5 @AT@ 8404 @LENGTH@ 44
------------DEL MethodInvocation@@Math.exp(binomialCoefficientLog(n,k)) @AT@ 8404 @LENGTH@ 38
---------------DEL SimpleName@@MethodName:exp:[binomialCoefficientLog(n,k)] @AT@ 8409 @LENGTH@ 33
------------------DEL MethodInvocation@@binomialCoefficientLog(n,k) @AT@ 8413 @LENGTH@ 28
, INS IfStatement@@InfixExpression:n < k @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8790 @LENGTH@ 138
---INS InfixExpression@@n < k @TO@ IfStatement@@InfixExpression:n < k @AT@ 8794 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < k @AT@ 8794 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < k @AT@ 8795 @LENGTH@ 1
------INS SimpleName@@k @TO@ InfixExpression@@n < k @AT@ 8798 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < k @AT@ 8815 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @AT@ 8821 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8821 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8825 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= k for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8867 @LENGTH@ 49
, INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8937 @LENGTH@ 138
---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8941 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < 0 @AT@ 8941 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 0 @AT@ 8942 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 @AT@ 8945 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8962 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @AT@ 8968 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8968 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8972 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= 0 for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 9014 @LENGTH@ 49
, INS IfStatement@@InfixExpression:(n == k) || (k == 0) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9084 @LENGTH@ 60
---INS InfixExpression@@(n == k) || (k == 0) @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 20
------INS ParenthesizedExpression@@(n == k) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 8
---------INS InfixExpression@@n == k @TO@ ParenthesizedExpression@@(n == k) @AT@ 9089 @LENGTH@ 6
------------INS SimpleName@@n @TO@ InfixExpression@@n == k @AT@ 9089 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@n == k @AT@ 9090 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@n == k @AT@ 9094 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9096 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == 0) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9100 @LENGTH@ 8
---------INS InfixExpression@@k == 0 @TO@ ParenthesizedExpression@@(k == 0) @AT@ 9101 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 0 @AT@ 9101 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 0 @AT@ 9102 @LENGTH@ 2
------------INS NumberLiteral@@0 @TO@ InfixExpression@@k == 0 @AT@ 9106 @LENGTH@ 1
---INS ReturnStatement@@NumberLiteral:1d @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9124 @LENGTH@ 10
------INS NumberLiteral@@1d @TO@ ReturnStatement@@NumberLiteral:1d @AT@ 9131 @LENGTH@ 2
, INS IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9153 @LENGTH@ 63
---INS InfixExpression@@(k == 1) || (k == n - 1) @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 24
------INS ParenthesizedExpression@@(k == 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 8
---------INS InfixExpression@@k == 1 @TO@ ParenthesizedExpression@@(k == 1) @AT@ 9158 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 1 @AT@ 9158 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 1 @AT@ 9159 @LENGTH@ 2
------------INS NumberLiteral@@1 @TO@ InfixExpression@@k == 1 @AT@ 9163 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9165 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == n - 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9169 @LENGTH@ 12
---------INS InfixExpression@@k == n - 1 @TO@ ParenthesizedExpression@@(k == n - 1) @AT@ 9170 @LENGTH@ 10
------------INS SimpleName@@k @TO@ InfixExpression@@k == n - 1 @AT@ 9170 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == n - 1 @AT@ 9171 @LENGTH@ 2
------------INS InfixExpression@@n - 1 @TO@ InfixExpression@@k == n - 1 @AT@ 9175 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - 1 @AT@ 9175 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - 1 @AT@ 9176 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - 1 @AT@ 9179 @LENGTH@ 1
---INS ReturnStatement@@SimpleName:n @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9197 @LENGTH@ 9
------INS SimpleName@@n @TO@ ReturnStatement@@SimpleName:n @AT@ 9204 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9225 @LENGTH@ 80
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9229 @LENGTH@ 7
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 9229 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 9230 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 9233 @LENGTH@ 3
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 9233 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 9234 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 9235 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9252 @LENGTH@ 43
------INS MethodInvocation@@binomialCoefficientDouble(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @AT@ 9259 @LENGTH@ 35
---------MOV SimpleName@@Name:Math @TO@ MethodInvocation@@binomialCoefficientDouble(n,n - k) @AT@ 8404 @LENGTH@ 4
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9314 @LENGTH@ 68
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9318 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 9318 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 9319 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 9322 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9340 @LENGTH@ 32
------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @AT@ 9347 @LENGTH@ 24
---------MOV SimpleName@@MethodName:binomialCoefficientLog:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 8413 @LENGTH@ 28
, INS VariableDeclarationStatement@@double result=1d; @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9400 @LENGTH@ 19
---INS PrimitiveType@@double @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9400 @LENGTH@ 6
---INS VariableDeclarationFragment@@result=1d @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9407 @LENGTH@ 11
------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=1d @AT@ 9407 @LENGTH@ 6
------INS NumberLiteral@@1d @TO@ VariableDeclarationFragment@@result=1d @AT@ 9416 @LENGTH@ 2
, INS ForStatement@@[int i=1];i <= k; [i++] @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9428 @LENGTH@ 96
---INS VariableDeclarationExpression@@int i=1 @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9433 @LENGTH@ 9
------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9433 @LENGTH@ 3
------INS VariableDeclarationFragment@@i=1 @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9437 @LENGTH@ 5
---------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=1 @AT@ 9437 @LENGTH@ 1
---------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@i=1 @AT@ 9441 @LENGTH@ 1
---INS InfixExpression@@i <= k @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9444 @LENGTH@ 6
------INS SimpleName@@i @TO@ InfixExpression@@i <= k @AT@ 9444 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@i <= k @AT@ 9445 @LENGTH@ 2
------INS SimpleName@@k @TO@ InfixExpression@@i <= k @AT@ 9449 @LENGTH@ 1
---INS PostfixExpression@@i++ @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9452 @LENGTH@ 3
------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 9452 @LENGTH@ 1
------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 9454 @LENGTH@ 2
---INS ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9472 @LENGTH@ 42
------INS Assignment@@result*=(double)(n - k + i) / (double)i @TO@ ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 41
---------INS SimpleName@@result @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 6
---------INS Operator@@*= @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9478 @LENGTH@ 2
---------INS InfixExpression@@(double)(n - k + i) / (double)i @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 31
------------INS CastExpression@@(double)(n - k + i) @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 19
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)(n - k + i) @AT@ 9483 @LENGTH@ 6
---------------INS ParenthesizedExpression@@(n - k + i) @TO@ CastExpression@@(double)(n - k + i) @AT@ 9490 @LENGTH@ 11
------------------INS InfixExpression@@n - k + i @TO@ ParenthesizedExpression@@(n - k + i) @AT@ 9491 @LENGTH@ 9
---------------------MOV Operator@@+ @TO@ InfixExpression@@n - k + i @AT@ 8442 @LENGTH@ 1
---------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + i @AT@ 9491 @LENGTH@ 5
------------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 9491 @LENGTH@ 1
------------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 9492 @LENGTH@ 1
------------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 9495 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ InfixExpression@@n - k + i @AT@ 9499 @LENGTH@ 1
------------INS Operator@@/ @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9501 @LENGTH@ 1
------------INS CastExpression@@(double)i @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9504 @LENGTH@ 9
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)i @AT@ 9505 @LENGTH@ 6
---------------INS SimpleName@@i @TO@ CastExpression@@(double)i @AT@ 9512 @LENGTH@ 1
, INS ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9536 @LENGTH@ 32
---INS MethodInvocation@@Math.floor(result + 0.5) @TO@ ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 24
------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 4
------INS SimpleName@@MethodName:floor:[result + 0.5] @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9548 @LENGTH@ 19
---------INS InfixExpression@@result + 0.5 @TO@ SimpleName@@MethodName:floor:[result + 0.5] @AT@ 9554 @LENGTH@ 12
------------MOV NumberLiteral@@0.5 @TO@ InfixExpression@@result + 0.5 @AT@ 8445 @LENGTH@ 3
------------INS SimpleName@@result @TO@ InfixExpression@@result + 0.5 @AT@ 9554 @LENGTH@ 6
------------INS Operator@@+ @TO@ InfixExpression@@result + 0.5 @AT@ 9560 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 10974 @LENGTH@ 80
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 10978 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 10978 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 10979 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 10982 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 11002 @LENGTH@ 42
------INS MethodInvocation@@Math.log(binomialCoefficient(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 34
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 4
---------INS SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11014 @LENGTH@ 29
------------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @AT@ 11018 @LENGTH@ 24
---------------INS SimpleName@@MethodName:binomialCoefficient:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 11018 @LENGTH@ 24
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11038 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11040 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 1030 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 11221 @LENGTH@ 88
---INS InfixExpression@@n < 1030 @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11225 @LENGTH@ 8
------INS SimpleName@@n @TO@ InfixExpression@@n < 1030 @AT@ 11225 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 1030 @AT@ 11226 @LENGTH@ 1
------INS NumberLiteral@@1030 @TO@ InfixExpression@@n < 1030 @AT@ 11229 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11250 @LENGTH@ 49
------MOV MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
]

CII:
OP1:(INS, VariableDeclarationStatement, null, OP2 OP3)
OP2:   (INS, PrimitiveType, OP1, null)
OP3:   (INS, VariableDeclarationFragment, OP1, OP4 OP5)
OP4:      (INS, SimpleName, OP3, null)
OP5:      (INS, NumberLiteral, OP3, null)





hASList: 
[UPD VariableDeclarationStatement@@long result=Math.round(binomialCoefficientDouble(n,k)); @TO@ long result=1; @AT@ 6045 @LENGTH@ 58
---UPD VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @TO@ result=1 @AT@ 6050 @LENGTH@ 52
------UPD MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
---------UPD SimpleName@@MethodName:round:[binomialCoefficientDouble(n,k)] @TO@ MethodName:log:[binomialCoefficientDouble(n,k)] @AT@ 6064 @LENGTH@ 38
------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @AT@ 6391 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@long, MethodName:binomialCoefficient, @@Argus:int+n+int+k+ @AT@ 6081 @LENGTH@ 64
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6085 @LENGTH@ 9
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 6085 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 6086 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 6089 @LENGTH@ 5
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 6089 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 6090 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 6093 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6108 @LENGTH@ 37
------INS MethodInvocation@@binomialCoefficient(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
---------INS SimpleName@@MethodName:binomialCoefficient:[n, n - k] @TO@ MethodInvocation@@binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6135 @LENGTH@ 1
------------INS InfixExpression@@n - k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6138 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6138 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6139 @LENGTH@ 1
---------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6142 @LENGTH@ 1
, UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n <= 61 @AT@ 6112 @LENGTH@ 152
---DEL InfixExpression@@result == Long.MAX_VALUE @AT@ 6116 @LENGTH@ 24
------DEL QualifiedName@@Long.MAX_VALUE @AT@ 6126 @LENGTH@ 14
---------DEL SimpleName@@Long @AT@ 6126 @LENGTH@ 4
---------DEL SimpleName@@MAX_VALUE @AT@ 6131 @LENGTH@ 9
---DEL ThrowStatement@@ClassInstanceCreation:new ArithmeticException("result too large to represent in a long integer") @AT@ 6156 @LENGTH@ 98
------DEL ClassInstanceCreation@@ArithmeticException["result too large to represent in a long integer"] @AT@ 6162 @LENGTH@ 91
---------DEL New@@new @AT@ 6162 @LENGTH@ 3
---------DEL SimpleType@@ArithmeticException @AT@ 6166 @LENGTH@ 19
---------DEL StringLiteral@@"result too large to represent in a long integer" @AT@ 6203 @LENGTH@ 49
---INS InfixExpression@@n <= 61 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6406 @LENGTH@ 7
------INS SimpleName@@n @TO@ InfixExpression@@n <= 61 @AT@ 6406 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@n <= 61 @AT@ 6407 @LENGTH@ 2
------INS NumberLiteral@@61 @TO@ InfixExpression@@n <= 61 @AT@ 6411 @LENGTH@ 2
---INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6499 @LENGTH@ 105
------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6504 @LENGTH@ 24
---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6504 @LENGTH@ 3
---------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6508 @LENGTH@ 5
------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6508 @LENGTH@ 1
------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6512 @LENGTH@ 1
---------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6515 @LENGTH@ 13
------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6515 @LENGTH@ 1
------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6519 @LENGTH@ 9
---------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6519 @LENGTH@ 5
------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6519 @LENGTH@ 1
------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6520 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6523 @LENGTH@ 1
---------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6524 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6527 @LENGTH@ 1
------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6530 @LENGTH@ 6
---------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6530 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6531 @LENGTH@ 2
---------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6535 @LENGTH@ 1
------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6538 @LENGTH@ 3
---------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6538 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6540 @LENGTH@ 2
------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6543 @LENGTH@ 3
---------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6543 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6545 @LENGTH@ 2
------INS ExpressionStatement@@Assignment:result=result * i / j @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6566 @LENGTH@ 24
---------INS Assignment@@result=result * i / j @TO@ ExpressionStatement@@Assignment:result=result * i / j @AT@ 6566 @LENGTH@ 23
------------INS SimpleName@@result @TO@ Assignment@@result=result * i / j @AT@ 6566 @LENGTH@ 6
------------INS Operator@@= @TO@ Assignment@@result=result * i / j @AT@ 6572 @LENGTH@ 1
------------INS InfixExpression@@result * i / j @TO@ Assignment@@result=result * i / j @AT@ 6575 @LENGTH@ 14
---------------INS InfixExpression@@result * i @TO@ InfixExpression@@result * i / j @AT@ 6575 @LENGTH@ 10
------------------MOV SimpleName@@result @TO@ InfixExpression@@result * i @AT@ 6116 @LENGTH@ 6
------------------MOV Operator@@== @TO@ InfixExpression@@result * i @AT@ 6122 @LENGTH@ 2
------------------INS SimpleName@@i @TO@ InfixExpression@@result * i @AT@ 6584 @LENGTH@ 1
---------------INS Operator@@/ @TO@ InfixExpression@@result * i / j @AT@ 6585 @LENGTH@ 1
---------------INS SimpleName@@j @TO@ InfixExpression@@result * i / j @AT@ 6588 @LENGTH@ 1
---INS IfStatement@@InfixExpression:n <= 66 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6620 @LENGTH@ 1053
------INS InfixExpression@@n <= 66 @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6624 @LENGTH@ 7
---------INS SimpleName@@n @TO@ InfixExpression@@n <= 66 @AT@ 6624 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@n <= 66 @AT@ 6625 @LENGTH@ 2
---------INS NumberLiteral@@66 @TO@ InfixExpression@@n <= 66 @AT@ 6629 @LENGTH@ 2
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6788 @LENGTH@ 517
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6793 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6793 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6797 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6797 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6801 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6804 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6804 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6808 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6808 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6808 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6809 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6812 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6813 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6816 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6819 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6819 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6820 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6824 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6827 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6827 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6829 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6832 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6832 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6834 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7217 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7217 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7222 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7222 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7226 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7226 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7230 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7233 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7253 @LENGTH@ 38
------------INS Assignment@@result=(result / (j / d)) * (i / d) @TO@ ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 37
---------------INS SimpleName@@result @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7259 @LENGTH@ 1
---------------INS InfixExpression@@(result / (j / d)) * (i / d) @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 28
------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 18
---------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7263 @LENGTH@ 16
------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7263 @LENGTH@ 6
------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7269 @LENGTH@ 1
------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7272 @LENGTH@ 7
---------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7273 @LENGTH@ 5
------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7273 @LENGTH@ 1
------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7274 @LENGTH@ 1
------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7277 @LENGTH@ 1
------------------INS Operator@@* @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7280 @LENGTH@ 1
------------------INS ParenthesizedExpression@@(i / d) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7283 @LENGTH@ 7
---------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7284 @LENGTH@ 5
------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7284 @LENGTH@ 1
------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7285 @LENGTH@ 1
------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7288 @LENGTH@ 1
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 7496 @LENGTH@ 167
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7501 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7501 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7505 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 7505 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 7509 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7512 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7512 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7516 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 7516 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 7516 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 7517 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 7520 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 7521 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 7524 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7527 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 7527 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 7528 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 7532 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7535 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 7535 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 7537 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7540 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 7540 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 7542 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7563 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7563 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7568 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7568 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7572 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7572 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7576 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7579 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7599 @LENGTH@ 50
------------INS Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 49
---------------INS SimpleName@@result @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7605 @LENGTH@ 1
---------------INS MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
------------------INS SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @TO@ MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
---------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7620 @LENGTH@ 18
------------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7621 @LENGTH@ 16
---------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7621 @LENGTH@ 6
---------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7627 @LENGTH@ 1
---------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7630 @LENGTH@ 7
------------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7631 @LENGTH@ 5
---------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7631 @LENGTH@ 1
---------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7632 @LENGTH@ 1
---------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7635 @LENGTH@ 1
---------------------INS ParenthesizedExpression@@(i / d) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7640 @LENGTH@ 7
------------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7641 @LENGTH@ 5
---------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7641 @LENGTH@ 1
---------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7642 @LENGTH@ 1
---------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7645 @LENGTH@ 1
, DEL ReturnStatement@@MethodInvocation:Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8386 @LENGTH@ 64
---DEL MethodInvocation@@Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8393 @LENGTH@ 56
------DEL SimpleName@@Name:Math @AT@ 8393 @LENGTH@ 4
------DEL SimpleName@@MethodName:floor:[Math.exp(binomialCoefficientLog(n,k)) + 0.5] @AT@ 8398 @LENGTH@ 51
---------DEL InfixExpression@@Math.exp(binomialCoefficientLog(n,k)) + 0.5 @AT@ 8404 @LENGTH@ 44
------------DEL MethodInvocation@@Math.exp(binomialCoefficientLog(n,k)) @AT@ 8404 @LENGTH@ 38
---------------DEL SimpleName@@MethodName:exp:[binomialCoefficientLog(n,k)] @AT@ 8409 @LENGTH@ 33
------------------DEL MethodInvocation@@binomialCoefficientLog(n,k) @AT@ 8413 @LENGTH@ 28
, INS IfStatement@@InfixExpression:n < k @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8790 @LENGTH@ 138
---INS InfixExpression@@n < k @TO@ IfStatement@@InfixExpression:n < k @AT@ 8794 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < k @AT@ 8794 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < k @AT@ 8795 @LENGTH@ 1
------INS SimpleName@@k @TO@ InfixExpression@@n < k @AT@ 8798 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < k @AT@ 8815 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @AT@ 8821 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8821 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8825 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= k for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8867 @LENGTH@ 49
, INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8937 @LENGTH@ 138
---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8941 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < 0 @AT@ 8941 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 0 @AT@ 8942 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 @AT@ 8945 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8962 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @AT@ 8968 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8968 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8972 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= 0 for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 9014 @LENGTH@ 49
, INS IfStatement@@InfixExpression:(n == k) || (k == 0) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9084 @LENGTH@ 60
---INS InfixExpression@@(n == k) || (k == 0) @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 20
------INS ParenthesizedExpression@@(n == k) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 8
---------INS InfixExpression@@n == k @TO@ ParenthesizedExpression@@(n == k) @AT@ 9089 @LENGTH@ 6
------------INS SimpleName@@n @TO@ InfixExpression@@n == k @AT@ 9089 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@n == k @AT@ 9090 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@n == k @AT@ 9094 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9096 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == 0) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9100 @LENGTH@ 8
---------INS InfixExpression@@k == 0 @TO@ ParenthesizedExpression@@(k == 0) @AT@ 9101 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 0 @AT@ 9101 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 0 @AT@ 9102 @LENGTH@ 2
------------INS NumberLiteral@@0 @TO@ InfixExpression@@k == 0 @AT@ 9106 @LENGTH@ 1
---INS ReturnStatement@@NumberLiteral:1d @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9124 @LENGTH@ 10
------INS NumberLiteral@@1d @TO@ ReturnStatement@@NumberLiteral:1d @AT@ 9131 @LENGTH@ 2
, INS IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9153 @LENGTH@ 63
---INS InfixExpression@@(k == 1) || (k == n - 1) @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 24
------INS ParenthesizedExpression@@(k == 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 8
---------INS InfixExpression@@k == 1 @TO@ ParenthesizedExpression@@(k == 1) @AT@ 9158 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 1 @AT@ 9158 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 1 @AT@ 9159 @LENGTH@ 2
------------INS NumberLiteral@@1 @TO@ InfixExpression@@k == 1 @AT@ 9163 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9165 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == n - 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9169 @LENGTH@ 12
---------INS InfixExpression@@k == n - 1 @TO@ ParenthesizedExpression@@(k == n - 1) @AT@ 9170 @LENGTH@ 10
------------INS SimpleName@@k @TO@ InfixExpression@@k == n - 1 @AT@ 9170 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == n - 1 @AT@ 9171 @LENGTH@ 2
------------INS InfixExpression@@n - 1 @TO@ InfixExpression@@k == n - 1 @AT@ 9175 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - 1 @AT@ 9175 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - 1 @AT@ 9176 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - 1 @AT@ 9179 @LENGTH@ 1
---INS ReturnStatement@@SimpleName:n @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9197 @LENGTH@ 9
------INS SimpleName@@n @TO@ ReturnStatement@@SimpleName:n @AT@ 9204 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9225 @LENGTH@ 80
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9229 @LENGTH@ 7
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 9229 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 9230 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 9233 @LENGTH@ 3
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 9233 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 9234 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 9235 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9252 @LENGTH@ 43
------INS MethodInvocation@@binomialCoefficientDouble(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @AT@ 9259 @LENGTH@ 35
---------MOV SimpleName@@Name:Math @TO@ MethodInvocation@@binomialCoefficientDouble(n,n - k) @AT@ 8404 @LENGTH@ 4
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9314 @LENGTH@ 68
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9318 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 9318 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 9319 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 9322 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9340 @LENGTH@ 32
------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @AT@ 9347 @LENGTH@ 24
---------MOV SimpleName@@MethodName:binomialCoefficientLog:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 8413 @LENGTH@ 28
, INS VariableDeclarationStatement@@double result=1d; @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9400 @LENGTH@ 19
---INS PrimitiveType@@double @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9400 @LENGTH@ 6
---INS VariableDeclarationFragment@@result=1d @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9407 @LENGTH@ 11
------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=1d @AT@ 9407 @LENGTH@ 6
------INS NumberLiteral@@1d @TO@ VariableDeclarationFragment@@result=1d @AT@ 9416 @LENGTH@ 2
, INS ForStatement@@[int i=1];i <= k; [i++] @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9428 @LENGTH@ 96
---INS VariableDeclarationExpression@@int i=1 @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9433 @LENGTH@ 9
------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9433 @LENGTH@ 3
------INS VariableDeclarationFragment@@i=1 @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9437 @LENGTH@ 5
---------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=1 @AT@ 9437 @LENGTH@ 1
---------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@i=1 @AT@ 9441 @LENGTH@ 1
---INS InfixExpression@@i <= k @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9444 @LENGTH@ 6
------INS SimpleName@@i @TO@ InfixExpression@@i <= k @AT@ 9444 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@i <= k @AT@ 9445 @LENGTH@ 2
------INS SimpleName@@k @TO@ InfixExpression@@i <= k @AT@ 9449 @LENGTH@ 1
---INS PostfixExpression@@i++ @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9452 @LENGTH@ 3
------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 9452 @LENGTH@ 1
------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 9454 @LENGTH@ 2
---INS ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9472 @LENGTH@ 42
------INS Assignment@@result*=(double)(n - k + i) / (double)i @TO@ ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 41
---------INS SimpleName@@result @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 6
---------INS Operator@@*= @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9478 @LENGTH@ 2
---------INS InfixExpression@@(double)(n - k + i) / (double)i @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 31
------------INS CastExpression@@(double)(n - k + i) @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 19
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)(n - k + i) @AT@ 9483 @LENGTH@ 6
---------------INS ParenthesizedExpression@@(n - k + i) @TO@ CastExpression@@(double)(n - k + i) @AT@ 9490 @LENGTH@ 11
------------------INS InfixExpression@@n - k + i @TO@ ParenthesizedExpression@@(n - k + i) @AT@ 9491 @LENGTH@ 9
---------------------MOV Operator@@+ @TO@ InfixExpression@@n - k + i @AT@ 8442 @LENGTH@ 1
---------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + i @AT@ 9491 @LENGTH@ 5
------------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 9491 @LENGTH@ 1
------------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 9492 @LENGTH@ 1
------------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 9495 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ InfixExpression@@n - k + i @AT@ 9499 @LENGTH@ 1
------------INS Operator@@/ @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9501 @LENGTH@ 1
------------INS CastExpression@@(double)i @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9504 @LENGTH@ 9
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)i @AT@ 9505 @LENGTH@ 6
---------------INS SimpleName@@i @TO@ CastExpression@@(double)i @AT@ 9512 @LENGTH@ 1
, INS ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9536 @LENGTH@ 32
---INS MethodInvocation@@Math.floor(result + 0.5) @TO@ ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 24
------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 4
------INS SimpleName@@MethodName:floor:[result + 0.5] @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9548 @LENGTH@ 19
---------INS InfixExpression@@result + 0.5 @TO@ SimpleName@@MethodName:floor:[result + 0.5] @AT@ 9554 @LENGTH@ 12
------------MOV NumberLiteral@@0.5 @TO@ InfixExpression@@result + 0.5 @AT@ 8445 @LENGTH@ 3
------------INS SimpleName@@result @TO@ InfixExpression@@result + 0.5 @AT@ 9554 @LENGTH@ 6
------------INS Operator@@+ @TO@ InfixExpression@@result + 0.5 @AT@ 9560 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 10974 @LENGTH@ 80
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 10978 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 10978 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 10979 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 10982 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 11002 @LENGTH@ 42
------INS MethodInvocation@@Math.log(binomialCoefficient(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 34
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 4
---------INS SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11014 @LENGTH@ 29
------------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @AT@ 11018 @LENGTH@ 24
---------------INS SimpleName@@MethodName:binomialCoefficient:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 11018 @LENGTH@ 24
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11038 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11040 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 1030 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 11221 @LENGTH@ 88
---INS InfixExpression@@n < 1030 @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11225 @LENGTH@ 8
------INS SimpleName@@n @TO@ InfixExpression@@n < 1030 @AT@ 11225 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 1030 @AT@ 11226 @LENGTH@ 1
------INS NumberLiteral@@1030 @TO@ InfixExpression@@n < 1030 @AT@ 11229 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11250 @LENGTH@ 49
------MOV MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
]

CII:
OP1:(INS, ForStatement, null, OP2 OP7 OP11 OP14)
OP2:   (INS, VariableDeclarationExpression, OP1, OP3 OP4)
OP3:      (INS, PrimitiveType, OP2, null)
OP4:      (INS, VariableDeclarationFragment, OP2, OP5 OP6)
OP5:         (INS, SimpleName, OP4, null)
OP6:         (INS, NumberLiteral, OP4, null)
OP7:   (INS, InfixExpression, OP1, OP8 OP9 OP10)
OP8:      (INS, SimpleName, OP7, null)
OP9:      (INS, Operator, OP7, null)
OP10:      (INS, SimpleName, OP7, null)
OP11:   (INS, PostfixExpression, OP1, OP12 OP13)
OP12:      (INS, SimpleName, OP11, null)
OP13:      (INS, Operator, OP11, null)
OP14:   (INS, ExpressionStatement, OP1, OP15)
OP15:      (INS, Assignment, OP14, OP16 OP17 OP18)
OP16:         (INS, SimpleName, OP15, null)
OP17:         (INS, Operator, OP15, null)
OP18:         (INS, InfixExpression, OP15, OP19 OP29 OP30)
OP19:            (INS, CastExpression, OP18, OP20 OP21)
OP20:               (INS, PrimitiveType, OP19, null)
OP21:               (INS, ParenthesizedExpression, OP19, OP22)
OP22:                  (INS, InfixExpression, OP21, OP23 OP24 OP28)
OP23:                     (MOV, Operator, OP22, null)
OP24:                     (INS, InfixExpression, OP22, OP25 OP26 OP27)
OP25:                        (INS, SimpleName, OP24, null)
OP26:                        (INS, Operator, OP24, null)
OP27:                        (INS, SimpleName, OP24, null)
OP28:                     (INS, SimpleName, OP22, null)
OP29:            (INS, Operator, OP18, null)
OP30:            (INS, CastExpression, OP18, OP31 OP32)
OP31:               (INS, PrimitiveType, OP30, null)
OP32:               (INS, SimpleName, OP30, null)





hASList: 
[UPD VariableDeclarationStatement@@long result=Math.round(binomialCoefficientDouble(n,k)); @TO@ long result=1; @AT@ 6045 @LENGTH@ 58
---UPD VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @TO@ result=1 @AT@ 6050 @LENGTH@ 52
------UPD MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
---------UPD SimpleName@@MethodName:round:[binomialCoefficientDouble(n,k)] @TO@ MethodName:log:[binomialCoefficientDouble(n,k)] @AT@ 6064 @LENGTH@ 38
------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @AT@ 6391 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@long, MethodName:binomialCoefficient, @@Argus:int+n+int+k+ @AT@ 6081 @LENGTH@ 64
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6085 @LENGTH@ 9
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 6085 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 6086 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 6089 @LENGTH@ 5
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 6089 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 6090 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 6093 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6108 @LENGTH@ 37
------INS MethodInvocation@@binomialCoefficient(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
---------INS SimpleName@@MethodName:binomialCoefficient:[n, n - k] @TO@ MethodInvocation@@binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6135 @LENGTH@ 1
------------INS InfixExpression@@n - k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6138 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6138 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6139 @LENGTH@ 1
---------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6142 @LENGTH@ 1
, UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n <= 61 @AT@ 6112 @LENGTH@ 152
---DEL InfixExpression@@result == Long.MAX_VALUE @AT@ 6116 @LENGTH@ 24
------DEL QualifiedName@@Long.MAX_VALUE @AT@ 6126 @LENGTH@ 14
---------DEL SimpleName@@Long @AT@ 6126 @LENGTH@ 4
---------DEL SimpleName@@MAX_VALUE @AT@ 6131 @LENGTH@ 9
---DEL ThrowStatement@@ClassInstanceCreation:new ArithmeticException("result too large to represent in a long integer") @AT@ 6156 @LENGTH@ 98
------DEL ClassInstanceCreation@@ArithmeticException["result too large to represent in a long integer"] @AT@ 6162 @LENGTH@ 91
---------DEL New@@new @AT@ 6162 @LENGTH@ 3
---------DEL SimpleType@@ArithmeticException @AT@ 6166 @LENGTH@ 19
---------DEL StringLiteral@@"result too large to represent in a long integer" @AT@ 6203 @LENGTH@ 49
---INS InfixExpression@@n <= 61 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6406 @LENGTH@ 7
------INS SimpleName@@n @TO@ InfixExpression@@n <= 61 @AT@ 6406 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@n <= 61 @AT@ 6407 @LENGTH@ 2
------INS NumberLiteral@@61 @TO@ InfixExpression@@n <= 61 @AT@ 6411 @LENGTH@ 2
---INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6499 @LENGTH@ 105
------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6504 @LENGTH@ 24
---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6504 @LENGTH@ 3
---------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6508 @LENGTH@ 5
------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6508 @LENGTH@ 1
------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6512 @LENGTH@ 1
---------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6515 @LENGTH@ 13
------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6515 @LENGTH@ 1
------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6519 @LENGTH@ 9
---------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6519 @LENGTH@ 5
------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6519 @LENGTH@ 1
------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6520 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6523 @LENGTH@ 1
---------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6524 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6527 @LENGTH@ 1
------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6530 @LENGTH@ 6
---------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6530 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6531 @LENGTH@ 2
---------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6535 @LENGTH@ 1
------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6538 @LENGTH@ 3
---------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6538 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6540 @LENGTH@ 2
------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6543 @LENGTH@ 3
---------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6543 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6545 @LENGTH@ 2
------INS ExpressionStatement@@Assignment:result=result * i / j @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6566 @LENGTH@ 24
---------INS Assignment@@result=result * i / j @TO@ ExpressionStatement@@Assignment:result=result * i / j @AT@ 6566 @LENGTH@ 23
------------INS SimpleName@@result @TO@ Assignment@@result=result * i / j @AT@ 6566 @LENGTH@ 6
------------INS Operator@@= @TO@ Assignment@@result=result * i / j @AT@ 6572 @LENGTH@ 1
------------INS InfixExpression@@result * i / j @TO@ Assignment@@result=result * i / j @AT@ 6575 @LENGTH@ 14
---------------INS InfixExpression@@result * i @TO@ InfixExpression@@result * i / j @AT@ 6575 @LENGTH@ 10
------------------MOV SimpleName@@result @TO@ InfixExpression@@result * i @AT@ 6116 @LENGTH@ 6
------------------MOV Operator@@== @TO@ InfixExpression@@result * i @AT@ 6122 @LENGTH@ 2
------------------INS SimpleName@@i @TO@ InfixExpression@@result * i @AT@ 6584 @LENGTH@ 1
---------------INS Operator@@/ @TO@ InfixExpression@@result * i / j @AT@ 6585 @LENGTH@ 1
---------------INS SimpleName@@j @TO@ InfixExpression@@result * i / j @AT@ 6588 @LENGTH@ 1
---INS IfStatement@@InfixExpression:n <= 66 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6620 @LENGTH@ 1053
------INS InfixExpression@@n <= 66 @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6624 @LENGTH@ 7
---------INS SimpleName@@n @TO@ InfixExpression@@n <= 66 @AT@ 6624 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@n <= 66 @AT@ 6625 @LENGTH@ 2
---------INS NumberLiteral@@66 @TO@ InfixExpression@@n <= 66 @AT@ 6629 @LENGTH@ 2
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6788 @LENGTH@ 517
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6793 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6793 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6797 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6797 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6801 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6804 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6804 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6808 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6808 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6808 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6809 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6812 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6813 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6816 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6819 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6819 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6820 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6824 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6827 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6827 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6829 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6832 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6832 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6834 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7217 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7217 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7222 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7222 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7226 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7226 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7230 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7233 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7253 @LENGTH@ 38
------------INS Assignment@@result=(result / (j / d)) * (i / d) @TO@ ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 37
---------------INS SimpleName@@result @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7259 @LENGTH@ 1
---------------INS InfixExpression@@(result / (j / d)) * (i / d) @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 28
------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 18
---------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7263 @LENGTH@ 16
------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7263 @LENGTH@ 6
------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7269 @LENGTH@ 1
------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7272 @LENGTH@ 7
---------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7273 @LENGTH@ 5
------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7273 @LENGTH@ 1
------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7274 @LENGTH@ 1
------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7277 @LENGTH@ 1
------------------INS Operator@@* @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7280 @LENGTH@ 1
------------------INS ParenthesizedExpression@@(i / d) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7283 @LENGTH@ 7
---------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7284 @LENGTH@ 5
------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7284 @LENGTH@ 1
------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7285 @LENGTH@ 1
------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7288 @LENGTH@ 1
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 7496 @LENGTH@ 167
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7501 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7501 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7505 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 7505 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 7509 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7512 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7512 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7516 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 7516 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 7516 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 7517 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 7520 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 7521 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 7524 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7527 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 7527 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 7528 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 7532 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7535 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 7535 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 7537 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7540 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 7540 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 7542 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7563 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7563 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7568 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7568 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7572 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7572 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7576 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7579 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7599 @LENGTH@ 50
------------INS Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 49
---------------INS SimpleName@@result @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7605 @LENGTH@ 1
---------------INS MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
------------------INS SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @TO@ MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
---------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7620 @LENGTH@ 18
------------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7621 @LENGTH@ 16
---------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7621 @LENGTH@ 6
---------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7627 @LENGTH@ 1
---------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7630 @LENGTH@ 7
------------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7631 @LENGTH@ 5
---------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7631 @LENGTH@ 1
---------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7632 @LENGTH@ 1
---------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7635 @LENGTH@ 1
---------------------INS ParenthesizedExpression@@(i / d) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7640 @LENGTH@ 7
------------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7641 @LENGTH@ 5
---------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7641 @LENGTH@ 1
---------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7642 @LENGTH@ 1
---------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7645 @LENGTH@ 1
, DEL ReturnStatement@@MethodInvocation:Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8386 @LENGTH@ 64
---DEL MethodInvocation@@Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8393 @LENGTH@ 56
------DEL SimpleName@@Name:Math @AT@ 8393 @LENGTH@ 4
------DEL SimpleName@@MethodName:floor:[Math.exp(binomialCoefficientLog(n,k)) + 0.5] @AT@ 8398 @LENGTH@ 51
---------DEL InfixExpression@@Math.exp(binomialCoefficientLog(n,k)) + 0.5 @AT@ 8404 @LENGTH@ 44
------------DEL MethodInvocation@@Math.exp(binomialCoefficientLog(n,k)) @AT@ 8404 @LENGTH@ 38
---------------DEL SimpleName@@MethodName:exp:[binomialCoefficientLog(n,k)] @AT@ 8409 @LENGTH@ 33
------------------DEL MethodInvocation@@binomialCoefficientLog(n,k) @AT@ 8413 @LENGTH@ 28
, INS IfStatement@@InfixExpression:n < k @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8790 @LENGTH@ 138
---INS InfixExpression@@n < k @TO@ IfStatement@@InfixExpression:n < k @AT@ 8794 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < k @AT@ 8794 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < k @AT@ 8795 @LENGTH@ 1
------INS SimpleName@@k @TO@ InfixExpression@@n < k @AT@ 8798 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < k @AT@ 8815 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @AT@ 8821 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8821 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8825 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= k for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8867 @LENGTH@ 49
, INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8937 @LENGTH@ 138
---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8941 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < 0 @AT@ 8941 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 0 @AT@ 8942 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 @AT@ 8945 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8962 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @AT@ 8968 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8968 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8972 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= 0 for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 9014 @LENGTH@ 49
, INS IfStatement@@InfixExpression:(n == k) || (k == 0) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9084 @LENGTH@ 60
---INS InfixExpression@@(n == k) || (k == 0) @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 20
------INS ParenthesizedExpression@@(n == k) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 8
---------INS InfixExpression@@n == k @TO@ ParenthesizedExpression@@(n == k) @AT@ 9089 @LENGTH@ 6
------------INS SimpleName@@n @TO@ InfixExpression@@n == k @AT@ 9089 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@n == k @AT@ 9090 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@n == k @AT@ 9094 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9096 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == 0) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9100 @LENGTH@ 8
---------INS InfixExpression@@k == 0 @TO@ ParenthesizedExpression@@(k == 0) @AT@ 9101 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 0 @AT@ 9101 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 0 @AT@ 9102 @LENGTH@ 2
------------INS NumberLiteral@@0 @TO@ InfixExpression@@k == 0 @AT@ 9106 @LENGTH@ 1
---INS ReturnStatement@@NumberLiteral:1d @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9124 @LENGTH@ 10
------INS NumberLiteral@@1d @TO@ ReturnStatement@@NumberLiteral:1d @AT@ 9131 @LENGTH@ 2
, INS IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9153 @LENGTH@ 63
---INS InfixExpression@@(k == 1) || (k == n - 1) @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 24
------INS ParenthesizedExpression@@(k == 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 8
---------INS InfixExpression@@k == 1 @TO@ ParenthesizedExpression@@(k == 1) @AT@ 9158 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 1 @AT@ 9158 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 1 @AT@ 9159 @LENGTH@ 2
------------INS NumberLiteral@@1 @TO@ InfixExpression@@k == 1 @AT@ 9163 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9165 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == n - 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9169 @LENGTH@ 12
---------INS InfixExpression@@k == n - 1 @TO@ ParenthesizedExpression@@(k == n - 1) @AT@ 9170 @LENGTH@ 10
------------INS SimpleName@@k @TO@ InfixExpression@@k == n - 1 @AT@ 9170 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == n - 1 @AT@ 9171 @LENGTH@ 2
------------INS InfixExpression@@n - 1 @TO@ InfixExpression@@k == n - 1 @AT@ 9175 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - 1 @AT@ 9175 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - 1 @AT@ 9176 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - 1 @AT@ 9179 @LENGTH@ 1
---INS ReturnStatement@@SimpleName:n @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9197 @LENGTH@ 9
------INS SimpleName@@n @TO@ ReturnStatement@@SimpleName:n @AT@ 9204 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9225 @LENGTH@ 80
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9229 @LENGTH@ 7
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 9229 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 9230 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 9233 @LENGTH@ 3
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 9233 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 9234 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 9235 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9252 @LENGTH@ 43
------INS MethodInvocation@@binomialCoefficientDouble(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @AT@ 9259 @LENGTH@ 35
---------MOV SimpleName@@Name:Math @TO@ MethodInvocation@@binomialCoefficientDouble(n,n - k) @AT@ 8404 @LENGTH@ 4
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9314 @LENGTH@ 68
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9318 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 9318 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 9319 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 9322 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9340 @LENGTH@ 32
------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @AT@ 9347 @LENGTH@ 24
---------MOV SimpleName@@MethodName:binomialCoefficientLog:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 8413 @LENGTH@ 28
, INS VariableDeclarationStatement@@double result=1d; @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9400 @LENGTH@ 19
---INS PrimitiveType@@double @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9400 @LENGTH@ 6
---INS VariableDeclarationFragment@@result=1d @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9407 @LENGTH@ 11
------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=1d @AT@ 9407 @LENGTH@ 6
------INS NumberLiteral@@1d @TO@ VariableDeclarationFragment@@result=1d @AT@ 9416 @LENGTH@ 2
, INS ForStatement@@[int i=1];i <= k; [i++] @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9428 @LENGTH@ 96
---INS VariableDeclarationExpression@@int i=1 @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9433 @LENGTH@ 9
------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9433 @LENGTH@ 3
------INS VariableDeclarationFragment@@i=1 @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9437 @LENGTH@ 5
---------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=1 @AT@ 9437 @LENGTH@ 1
---------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@i=1 @AT@ 9441 @LENGTH@ 1
---INS InfixExpression@@i <= k @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9444 @LENGTH@ 6
------INS SimpleName@@i @TO@ InfixExpression@@i <= k @AT@ 9444 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@i <= k @AT@ 9445 @LENGTH@ 2
------INS SimpleName@@k @TO@ InfixExpression@@i <= k @AT@ 9449 @LENGTH@ 1
---INS PostfixExpression@@i++ @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9452 @LENGTH@ 3
------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 9452 @LENGTH@ 1
------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 9454 @LENGTH@ 2
---INS ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9472 @LENGTH@ 42
------INS Assignment@@result*=(double)(n - k + i) / (double)i @TO@ ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 41
---------INS SimpleName@@result @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 6
---------INS Operator@@*= @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9478 @LENGTH@ 2
---------INS InfixExpression@@(double)(n - k + i) / (double)i @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 31
------------INS CastExpression@@(double)(n - k + i) @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 19
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)(n - k + i) @AT@ 9483 @LENGTH@ 6
---------------INS ParenthesizedExpression@@(n - k + i) @TO@ CastExpression@@(double)(n - k + i) @AT@ 9490 @LENGTH@ 11
------------------INS InfixExpression@@n - k + i @TO@ ParenthesizedExpression@@(n - k + i) @AT@ 9491 @LENGTH@ 9
---------------------MOV Operator@@+ @TO@ InfixExpression@@n - k + i @AT@ 8442 @LENGTH@ 1
---------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + i @AT@ 9491 @LENGTH@ 5
------------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 9491 @LENGTH@ 1
------------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 9492 @LENGTH@ 1
------------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 9495 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ InfixExpression@@n - k + i @AT@ 9499 @LENGTH@ 1
------------INS Operator@@/ @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9501 @LENGTH@ 1
------------INS CastExpression@@(double)i @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9504 @LENGTH@ 9
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)i @AT@ 9505 @LENGTH@ 6
---------------INS SimpleName@@i @TO@ CastExpression@@(double)i @AT@ 9512 @LENGTH@ 1
, INS ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9536 @LENGTH@ 32
---INS MethodInvocation@@Math.floor(result + 0.5) @TO@ ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 24
------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 4
------INS SimpleName@@MethodName:floor:[result + 0.5] @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9548 @LENGTH@ 19
---------INS InfixExpression@@result + 0.5 @TO@ SimpleName@@MethodName:floor:[result + 0.5] @AT@ 9554 @LENGTH@ 12
------------MOV NumberLiteral@@0.5 @TO@ InfixExpression@@result + 0.5 @AT@ 8445 @LENGTH@ 3
------------INS SimpleName@@result @TO@ InfixExpression@@result + 0.5 @AT@ 9554 @LENGTH@ 6
------------INS Operator@@+ @TO@ InfixExpression@@result + 0.5 @AT@ 9560 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 10974 @LENGTH@ 80
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 10978 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 10978 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 10979 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 10982 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 11002 @LENGTH@ 42
------INS MethodInvocation@@Math.log(binomialCoefficient(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 34
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 4
---------INS SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11014 @LENGTH@ 29
------------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @AT@ 11018 @LENGTH@ 24
---------------INS SimpleName@@MethodName:binomialCoefficient:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 11018 @LENGTH@ 24
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11038 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11040 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 1030 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 11221 @LENGTH@ 88
---INS InfixExpression@@n < 1030 @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11225 @LENGTH@ 8
------INS SimpleName@@n @TO@ InfixExpression@@n < 1030 @AT@ 11225 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 1030 @AT@ 11226 @LENGTH@ 1
------INS NumberLiteral@@1030 @TO@ InfixExpression@@n < 1030 @AT@ 11229 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11250 @LENGTH@ 49
------MOV MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
]

CII:
OP1:(INS, ReturnStatement, null, OP2)
OP2:   (INS, MethodInvocation, OP1, OP3 OP4)
OP3:      (INS, SimpleName, OP2, null)
OP4:      (INS, SimpleName, OP2, OP5)
OP5:         (INS, InfixExpression, OP4, OP6 OP7 OP8)
OP6:            (MOV, NumberLiteral, OP5, null)
OP7:            (INS, SimpleName, OP5, null)
OP8:            (INS, Operator, OP5, null)





hASList: 
[UPD VariableDeclarationStatement@@long result=Math.round(binomialCoefficientDouble(n,k)); @TO@ long result=1; @AT@ 6045 @LENGTH@ 58
---UPD VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @TO@ result=1 @AT@ 6050 @LENGTH@ 52
------UPD MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
---------UPD SimpleName@@MethodName:round:[binomialCoefficientDouble(n,k)] @TO@ MethodName:log:[binomialCoefficientDouble(n,k)] @AT@ 6064 @LENGTH@ 38
------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @AT@ 6391 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@long, MethodName:binomialCoefficient, @@Argus:int+n+int+k+ @AT@ 6081 @LENGTH@ 64
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6085 @LENGTH@ 9
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 6085 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 6086 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 6089 @LENGTH@ 5
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 6089 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 6090 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 6093 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6108 @LENGTH@ 37
------INS MethodInvocation@@binomialCoefficient(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
---------INS SimpleName@@MethodName:binomialCoefficient:[n, n - k] @TO@ MethodInvocation@@binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6135 @LENGTH@ 1
------------INS InfixExpression@@n - k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6138 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6138 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6139 @LENGTH@ 1
---------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6142 @LENGTH@ 1
, UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n <= 61 @AT@ 6112 @LENGTH@ 152
---DEL InfixExpression@@result == Long.MAX_VALUE @AT@ 6116 @LENGTH@ 24
------DEL QualifiedName@@Long.MAX_VALUE @AT@ 6126 @LENGTH@ 14
---------DEL SimpleName@@Long @AT@ 6126 @LENGTH@ 4
---------DEL SimpleName@@MAX_VALUE @AT@ 6131 @LENGTH@ 9
---DEL ThrowStatement@@ClassInstanceCreation:new ArithmeticException("result too large to represent in a long integer") @AT@ 6156 @LENGTH@ 98
------DEL ClassInstanceCreation@@ArithmeticException["result too large to represent in a long integer"] @AT@ 6162 @LENGTH@ 91
---------DEL New@@new @AT@ 6162 @LENGTH@ 3
---------DEL SimpleType@@ArithmeticException @AT@ 6166 @LENGTH@ 19
---------DEL StringLiteral@@"result too large to represent in a long integer" @AT@ 6203 @LENGTH@ 49
---INS InfixExpression@@n <= 61 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6406 @LENGTH@ 7
------INS SimpleName@@n @TO@ InfixExpression@@n <= 61 @AT@ 6406 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@n <= 61 @AT@ 6407 @LENGTH@ 2
------INS NumberLiteral@@61 @TO@ InfixExpression@@n <= 61 @AT@ 6411 @LENGTH@ 2
---INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6499 @LENGTH@ 105
------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6504 @LENGTH@ 24
---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6504 @LENGTH@ 3
---------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6508 @LENGTH@ 5
------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6508 @LENGTH@ 1
------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6512 @LENGTH@ 1
---------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6515 @LENGTH@ 13
------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6515 @LENGTH@ 1
------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6519 @LENGTH@ 9
---------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6519 @LENGTH@ 5
------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6519 @LENGTH@ 1
------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6520 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6523 @LENGTH@ 1
---------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6524 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6527 @LENGTH@ 1
------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6530 @LENGTH@ 6
---------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6530 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6531 @LENGTH@ 2
---------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6535 @LENGTH@ 1
------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6538 @LENGTH@ 3
---------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6538 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6540 @LENGTH@ 2
------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6543 @LENGTH@ 3
---------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6543 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6545 @LENGTH@ 2
------INS ExpressionStatement@@Assignment:result=result * i / j @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6566 @LENGTH@ 24
---------INS Assignment@@result=result * i / j @TO@ ExpressionStatement@@Assignment:result=result * i / j @AT@ 6566 @LENGTH@ 23
------------INS SimpleName@@result @TO@ Assignment@@result=result * i / j @AT@ 6566 @LENGTH@ 6
------------INS Operator@@= @TO@ Assignment@@result=result * i / j @AT@ 6572 @LENGTH@ 1
------------INS InfixExpression@@result * i / j @TO@ Assignment@@result=result * i / j @AT@ 6575 @LENGTH@ 14
---------------INS InfixExpression@@result * i @TO@ InfixExpression@@result * i / j @AT@ 6575 @LENGTH@ 10
------------------MOV SimpleName@@result @TO@ InfixExpression@@result * i @AT@ 6116 @LENGTH@ 6
------------------MOV Operator@@== @TO@ InfixExpression@@result * i @AT@ 6122 @LENGTH@ 2
------------------INS SimpleName@@i @TO@ InfixExpression@@result * i @AT@ 6584 @LENGTH@ 1
---------------INS Operator@@/ @TO@ InfixExpression@@result * i / j @AT@ 6585 @LENGTH@ 1
---------------INS SimpleName@@j @TO@ InfixExpression@@result * i / j @AT@ 6588 @LENGTH@ 1
---INS IfStatement@@InfixExpression:n <= 66 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6620 @LENGTH@ 1053
------INS InfixExpression@@n <= 66 @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6624 @LENGTH@ 7
---------INS SimpleName@@n @TO@ InfixExpression@@n <= 66 @AT@ 6624 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@n <= 66 @AT@ 6625 @LENGTH@ 2
---------INS NumberLiteral@@66 @TO@ InfixExpression@@n <= 66 @AT@ 6629 @LENGTH@ 2
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6788 @LENGTH@ 517
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6793 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6793 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6797 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6797 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6801 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6804 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6804 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6808 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6808 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6808 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6809 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6812 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6813 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6816 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6819 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6819 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6820 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6824 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6827 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6827 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6829 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6832 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6832 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6834 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7217 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7217 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7222 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7222 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7226 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7226 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7230 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7233 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7253 @LENGTH@ 38
------------INS Assignment@@result=(result / (j / d)) * (i / d) @TO@ ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 37
---------------INS SimpleName@@result @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7259 @LENGTH@ 1
---------------INS InfixExpression@@(result / (j / d)) * (i / d) @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 28
------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 18
---------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7263 @LENGTH@ 16
------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7263 @LENGTH@ 6
------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7269 @LENGTH@ 1
------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7272 @LENGTH@ 7
---------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7273 @LENGTH@ 5
------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7273 @LENGTH@ 1
------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7274 @LENGTH@ 1
------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7277 @LENGTH@ 1
------------------INS Operator@@* @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7280 @LENGTH@ 1
------------------INS ParenthesizedExpression@@(i / d) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7283 @LENGTH@ 7
---------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7284 @LENGTH@ 5
------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7284 @LENGTH@ 1
------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7285 @LENGTH@ 1
------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7288 @LENGTH@ 1
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 7496 @LENGTH@ 167
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7501 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7501 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7505 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 7505 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 7509 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7512 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7512 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7516 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 7516 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 7516 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 7517 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 7520 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 7521 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 7524 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7527 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 7527 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 7528 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 7532 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7535 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 7535 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 7537 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7540 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 7540 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 7542 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7563 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7563 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7568 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7568 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7572 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7572 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7576 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7579 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7599 @LENGTH@ 50
------------INS Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 49
---------------INS SimpleName@@result @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7605 @LENGTH@ 1
---------------INS MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
------------------INS SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @TO@ MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
---------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7620 @LENGTH@ 18
------------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7621 @LENGTH@ 16
---------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7621 @LENGTH@ 6
---------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7627 @LENGTH@ 1
---------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7630 @LENGTH@ 7
------------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7631 @LENGTH@ 5
---------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7631 @LENGTH@ 1
---------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7632 @LENGTH@ 1
---------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7635 @LENGTH@ 1
---------------------INS ParenthesizedExpression@@(i / d) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7640 @LENGTH@ 7
------------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7641 @LENGTH@ 5
---------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7641 @LENGTH@ 1
---------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7642 @LENGTH@ 1
---------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7645 @LENGTH@ 1
, DEL ReturnStatement@@MethodInvocation:Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8386 @LENGTH@ 64
---DEL MethodInvocation@@Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8393 @LENGTH@ 56
------DEL SimpleName@@Name:Math @AT@ 8393 @LENGTH@ 4
------DEL SimpleName@@MethodName:floor:[Math.exp(binomialCoefficientLog(n,k)) + 0.5] @AT@ 8398 @LENGTH@ 51
---------DEL InfixExpression@@Math.exp(binomialCoefficientLog(n,k)) + 0.5 @AT@ 8404 @LENGTH@ 44
------------DEL MethodInvocation@@Math.exp(binomialCoefficientLog(n,k)) @AT@ 8404 @LENGTH@ 38
---------------DEL SimpleName@@MethodName:exp:[binomialCoefficientLog(n,k)] @AT@ 8409 @LENGTH@ 33
------------------DEL MethodInvocation@@binomialCoefficientLog(n,k) @AT@ 8413 @LENGTH@ 28
, INS IfStatement@@InfixExpression:n < k @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8790 @LENGTH@ 138
---INS InfixExpression@@n < k @TO@ IfStatement@@InfixExpression:n < k @AT@ 8794 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < k @AT@ 8794 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < k @AT@ 8795 @LENGTH@ 1
------INS SimpleName@@k @TO@ InfixExpression@@n < k @AT@ 8798 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < k @AT@ 8815 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @AT@ 8821 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8821 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8825 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= k for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8867 @LENGTH@ 49
, INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8937 @LENGTH@ 138
---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8941 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < 0 @AT@ 8941 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 0 @AT@ 8942 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 @AT@ 8945 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8962 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @AT@ 8968 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8968 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8972 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= 0 for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 9014 @LENGTH@ 49
, INS IfStatement@@InfixExpression:(n == k) || (k == 0) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9084 @LENGTH@ 60
---INS InfixExpression@@(n == k) || (k == 0) @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 20
------INS ParenthesizedExpression@@(n == k) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 8
---------INS InfixExpression@@n == k @TO@ ParenthesizedExpression@@(n == k) @AT@ 9089 @LENGTH@ 6
------------INS SimpleName@@n @TO@ InfixExpression@@n == k @AT@ 9089 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@n == k @AT@ 9090 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@n == k @AT@ 9094 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9096 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == 0) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9100 @LENGTH@ 8
---------INS InfixExpression@@k == 0 @TO@ ParenthesizedExpression@@(k == 0) @AT@ 9101 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 0 @AT@ 9101 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 0 @AT@ 9102 @LENGTH@ 2
------------INS NumberLiteral@@0 @TO@ InfixExpression@@k == 0 @AT@ 9106 @LENGTH@ 1
---INS ReturnStatement@@NumberLiteral:1d @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9124 @LENGTH@ 10
------INS NumberLiteral@@1d @TO@ ReturnStatement@@NumberLiteral:1d @AT@ 9131 @LENGTH@ 2
, INS IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9153 @LENGTH@ 63
---INS InfixExpression@@(k == 1) || (k == n - 1) @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 24
------INS ParenthesizedExpression@@(k == 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 8
---------INS InfixExpression@@k == 1 @TO@ ParenthesizedExpression@@(k == 1) @AT@ 9158 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 1 @AT@ 9158 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 1 @AT@ 9159 @LENGTH@ 2
------------INS NumberLiteral@@1 @TO@ InfixExpression@@k == 1 @AT@ 9163 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9165 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == n - 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9169 @LENGTH@ 12
---------INS InfixExpression@@k == n - 1 @TO@ ParenthesizedExpression@@(k == n - 1) @AT@ 9170 @LENGTH@ 10
------------INS SimpleName@@k @TO@ InfixExpression@@k == n - 1 @AT@ 9170 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == n - 1 @AT@ 9171 @LENGTH@ 2
------------INS InfixExpression@@n - 1 @TO@ InfixExpression@@k == n - 1 @AT@ 9175 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - 1 @AT@ 9175 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - 1 @AT@ 9176 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - 1 @AT@ 9179 @LENGTH@ 1
---INS ReturnStatement@@SimpleName:n @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9197 @LENGTH@ 9
------INS SimpleName@@n @TO@ ReturnStatement@@SimpleName:n @AT@ 9204 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9225 @LENGTH@ 80
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9229 @LENGTH@ 7
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 9229 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 9230 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 9233 @LENGTH@ 3
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 9233 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 9234 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 9235 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9252 @LENGTH@ 43
------INS MethodInvocation@@binomialCoefficientDouble(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @AT@ 9259 @LENGTH@ 35
---------MOV SimpleName@@Name:Math @TO@ MethodInvocation@@binomialCoefficientDouble(n,n - k) @AT@ 8404 @LENGTH@ 4
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9314 @LENGTH@ 68
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9318 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 9318 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 9319 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 9322 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9340 @LENGTH@ 32
------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @AT@ 9347 @LENGTH@ 24
---------MOV SimpleName@@MethodName:binomialCoefficientLog:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 8413 @LENGTH@ 28
, INS VariableDeclarationStatement@@double result=1d; @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9400 @LENGTH@ 19
---INS PrimitiveType@@double @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9400 @LENGTH@ 6
---INS VariableDeclarationFragment@@result=1d @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9407 @LENGTH@ 11
------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=1d @AT@ 9407 @LENGTH@ 6
------INS NumberLiteral@@1d @TO@ VariableDeclarationFragment@@result=1d @AT@ 9416 @LENGTH@ 2
, INS ForStatement@@[int i=1];i <= k; [i++] @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9428 @LENGTH@ 96
---INS VariableDeclarationExpression@@int i=1 @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9433 @LENGTH@ 9
------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9433 @LENGTH@ 3
------INS VariableDeclarationFragment@@i=1 @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9437 @LENGTH@ 5
---------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=1 @AT@ 9437 @LENGTH@ 1
---------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@i=1 @AT@ 9441 @LENGTH@ 1
---INS InfixExpression@@i <= k @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9444 @LENGTH@ 6
------INS SimpleName@@i @TO@ InfixExpression@@i <= k @AT@ 9444 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@i <= k @AT@ 9445 @LENGTH@ 2
------INS SimpleName@@k @TO@ InfixExpression@@i <= k @AT@ 9449 @LENGTH@ 1
---INS PostfixExpression@@i++ @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9452 @LENGTH@ 3
------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 9452 @LENGTH@ 1
------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 9454 @LENGTH@ 2
---INS ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9472 @LENGTH@ 42
------INS Assignment@@result*=(double)(n - k + i) / (double)i @TO@ ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 41
---------INS SimpleName@@result @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 6
---------INS Operator@@*= @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9478 @LENGTH@ 2
---------INS InfixExpression@@(double)(n - k + i) / (double)i @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 31
------------INS CastExpression@@(double)(n - k + i) @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 19
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)(n - k + i) @AT@ 9483 @LENGTH@ 6
---------------INS ParenthesizedExpression@@(n - k + i) @TO@ CastExpression@@(double)(n - k + i) @AT@ 9490 @LENGTH@ 11
------------------INS InfixExpression@@n - k + i @TO@ ParenthesizedExpression@@(n - k + i) @AT@ 9491 @LENGTH@ 9
---------------------MOV Operator@@+ @TO@ InfixExpression@@n - k + i @AT@ 8442 @LENGTH@ 1
---------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + i @AT@ 9491 @LENGTH@ 5
------------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 9491 @LENGTH@ 1
------------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 9492 @LENGTH@ 1
------------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 9495 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ InfixExpression@@n - k + i @AT@ 9499 @LENGTH@ 1
------------INS Operator@@/ @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9501 @LENGTH@ 1
------------INS CastExpression@@(double)i @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9504 @LENGTH@ 9
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)i @AT@ 9505 @LENGTH@ 6
---------------INS SimpleName@@i @TO@ CastExpression@@(double)i @AT@ 9512 @LENGTH@ 1
, INS ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9536 @LENGTH@ 32
---INS MethodInvocation@@Math.floor(result + 0.5) @TO@ ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 24
------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 4
------INS SimpleName@@MethodName:floor:[result + 0.5] @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9548 @LENGTH@ 19
---------INS InfixExpression@@result + 0.5 @TO@ SimpleName@@MethodName:floor:[result + 0.5] @AT@ 9554 @LENGTH@ 12
------------MOV NumberLiteral@@0.5 @TO@ InfixExpression@@result + 0.5 @AT@ 8445 @LENGTH@ 3
------------INS SimpleName@@result @TO@ InfixExpression@@result + 0.5 @AT@ 9554 @LENGTH@ 6
------------INS Operator@@+ @TO@ InfixExpression@@result + 0.5 @AT@ 9560 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 10974 @LENGTH@ 80
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 10978 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 10978 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 10979 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 10982 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 11002 @LENGTH@ 42
------INS MethodInvocation@@Math.log(binomialCoefficient(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 34
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 4
---------INS SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11014 @LENGTH@ 29
------------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @AT@ 11018 @LENGTH@ 24
---------------INS SimpleName@@MethodName:binomialCoefficient:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 11018 @LENGTH@ 24
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11038 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11040 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 1030 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 11221 @LENGTH@ 88
---INS InfixExpression@@n < 1030 @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11225 @LENGTH@ 8
------INS SimpleName@@n @TO@ InfixExpression@@n < 1030 @AT@ 11225 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 1030 @AT@ 11226 @LENGTH@ 1
------INS NumberLiteral@@1030 @TO@ InfixExpression@@n < 1030 @AT@ 11229 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11250 @LENGTH@ 49
------MOV MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
]

CII:
OP1:(INS, IfStatement, null, OP2 OP6)
OP2:   (INS, InfixExpression, OP1, OP3 OP4 OP5)
OP3:      (INS, SimpleName, OP2, null)
OP4:      (INS, Operator, OP2, null)
OP5:      (INS, NumberLiteral, OP2, null)
OP6:   (INS, ReturnStatement, OP1, OP7)
OP7:      (INS, MethodInvocation, OP6, OP8 OP9)
OP8:         (INS, SimpleName, OP7, null)
OP9:         (INS, SimpleName, OP7, OP10)
OP10:            (INS, MethodInvocation, OP9, OP11)
OP11:               (INS, SimpleName, OP10, OP12 OP13)
OP12:                  (INS, SimpleName, OP11, null)
OP13:                  (INS, SimpleName, OP11, null)





hASList: 
[UPD VariableDeclarationStatement@@long result=Math.round(binomialCoefficientDouble(n,k)); @TO@ long result=1; @AT@ 6045 @LENGTH@ 58
---UPD VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @TO@ result=1 @AT@ 6050 @LENGTH@ 52
------UPD MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
---------UPD SimpleName@@MethodName:round:[binomialCoefficientDouble(n,k)] @TO@ MethodName:log:[binomialCoefficientDouble(n,k)] @AT@ 6064 @LENGTH@ 38
------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) @AT@ 6391 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@long, MethodName:binomialCoefficient, @@Argus:int+n+int+k+ @AT@ 6081 @LENGTH@ 64
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6085 @LENGTH@ 9
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 6085 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 6086 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 6089 @LENGTH@ 5
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 6089 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 6090 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 6093 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 6108 @LENGTH@ 37
------INS MethodInvocation@@binomialCoefficient(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
---------INS SimpleName@@MethodName:binomialCoefficient:[n, n - k] @TO@ MethodInvocation@@binomialCoefficient(n,n - k) @AT@ 6115 @LENGTH@ 29
------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6135 @LENGTH@ 1
------------INS InfixExpression@@n - k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, n - k] @AT@ 6138 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6138 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6139 @LENGTH@ 1
---------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6142 @LENGTH@ 1
, UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n <= 61 @AT@ 6112 @LENGTH@ 152
---DEL InfixExpression@@result == Long.MAX_VALUE @AT@ 6116 @LENGTH@ 24
------DEL QualifiedName@@Long.MAX_VALUE @AT@ 6126 @LENGTH@ 14
---------DEL SimpleName@@Long @AT@ 6126 @LENGTH@ 4
---------DEL SimpleName@@MAX_VALUE @AT@ 6131 @LENGTH@ 9
---DEL ThrowStatement@@ClassInstanceCreation:new ArithmeticException("result too large to represent in a long integer") @AT@ 6156 @LENGTH@ 98
------DEL ClassInstanceCreation@@ArithmeticException["result too large to represent in a long integer"] @AT@ 6162 @LENGTH@ 91
---------DEL New@@new @AT@ 6162 @LENGTH@ 3
---------DEL SimpleType@@ArithmeticException @AT@ 6166 @LENGTH@ 19
---------DEL StringLiteral@@"result too large to represent in a long integer" @AT@ 6203 @LENGTH@ 49
---INS InfixExpression@@n <= 61 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6406 @LENGTH@ 7
------INS SimpleName@@n @TO@ InfixExpression@@n <= 61 @AT@ 6406 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@n <= 61 @AT@ 6407 @LENGTH@ 2
------INS NumberLiteral@@61 @TO@ InfixExpression@@n <= 61 @AT@ 6411 @LENGTH@ 2
---INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6499 @LENGTH@ 105
------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6504 @LENGTH@ 24
---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6504 @LENGTH@ 3
---------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6508 @LENGTH@ 5
------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6508 @LENGTH@ 1
------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6512 @LENGTH@ 1
---------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6515 @LENGTH@ 13
------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6515 @LENGTH@ 1
------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6519 @LENGTH@ 9
---------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6519 @LENGTH@ 5
------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6519 @LENGTH@ 1
------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6520 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6523 @LENGTH@ 1
---------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6524 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6527 @LENGTH@ 1
------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6530 @LENGTH@ 6
---------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6530 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6531 @LENGTH@ 2
---------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6535 @LENGTH@ 1
------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6538 @LENGTH@ 3
---------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6538 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6540 @LENGTH@ 2
------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6543 @LENGTH@ 3
---------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6543 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6545 @LENGTH@ 2
------INS ExpressionStatement@@Assignment:result=result * i / j @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6566 @LENGTH@ 24
---------INS Assignment@@result=result * i / j @TO@ ExpressionStatement@@Assignment:result=result * i / j @AT@ 6566 @LENGTH@ 23
------------INS SimpleName@@result @TO@ Assignment@@result=result * i / j @AT@ 6566 @LENGTH@ 6
------------INS Operator@@= @TO@ Assignment@@result=result * i / j @AT@ 6572 @LENGTH@ 1
------------INS InfixExpression@@result * i / j @TO@ Assignment@@result=result * i / j @AT@ 6575 @LENGTH@ 14
---------------INS InfixExpression@@result * i @TO@ InfixExpression@@result * i / j @AT@ 6575 @LENGTH@ 10
------------------MOV SimpleName@@result @TO@ InfixExpression@@result * i @AT@ 6116 @LENGTH@ 6
------------------MOV Operator@@== @TO@ InfixExpression@@result * i @AT@ 6122 @LENGTH@ 2
------------------INS SimpleName@@i @TO@ InfixExpression@@result * i @AT@ 6584 @LENGTH@ 1
---------------INS Operator@@/ @TO@ InfixExpression@@result * i / j @AT@ 6585 @LENGTH@ 1
---------------INS SimpleName@@j @TO@ InfixExpression@@result * i / j @AT@ 6588 @LENGTH@ 1
---INS IfStatement@@InfixExpression:n <= 66 @TO@ IfStatement@@InfixExpression:result == Long.MAX_VALUE @AT@ 6620 @LENGTH@ 1053
------INS InfixExpression@@n <= 66 @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6624 @LENGTH@ 7
---------INS SimpleName@@n @TO@ InfixExpression@@n <= 66 @AT@ 6624 @LENGTH@ 1
---------INS Operator@@<= @TO@ InfixExpression@@n <= 66 @AT@ 6625 @LENGTH@ 2
---------INS NumberLiteral@@66 @TO@ InfixExpression@@n <= 66 @AT@ 6629 @LENGTH@ 2
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 6788 @LENGTH@ 517
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6793 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6793 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6797 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 6797 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 6801 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 6804 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6804 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 6808 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 6808 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 6808 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 6809 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 6812 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 6813 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 6816 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6819 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 6819 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 6820 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 6824 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6827 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6827 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6829 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 6832 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 6832 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 6834 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7217 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7217 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7222 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7222 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7226 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7226 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7230 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7233 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7253 @LENGTH@ 38
------------INS Assignment@@result=(result / (j / d)) * (i / d) @TO@ ExpressionStatement@@Assignment:result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 37
---------------INS SimpleName@@result @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7253 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7259 @LENGTH@ 1
---------------INS InfixExpression@@(result / (j / d)) * (i / d) @TO@ Assignment@@result=(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 28
------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7262 @LENGTH@ 18
---------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7263 @LENGTH@ 16
------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7263 @LENGTH@ 6
------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7269 @LENGTH@ 1
------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7272 @LENGTH@ 7
---------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7273 @LENGTH@ 5
------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7273 @LENGTH@ 1
------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7274 @LENGTH@ 1
------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7277 @LENGTH@ 1
------------------INS Operator@@* @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7280 @LENGTH@ 1
------------------INS ParenthesizedExpression@@(i / d) @TO@ InfixExpression@@(result / (j / d)) * (i / d) @AT@ 7283 @LENGTH@ 7
---------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7284 @LENGTH@ 5
------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7284 @LENGTH@ 1
------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7285 @LENGTH@ 1
------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7288 @LENGTH@ 1
------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n <= 66 @AT@ 7496 @LENGTH@ 167
---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7501 @LENGTH@ 24
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7501 @LENGTH@ 3
------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7505 @LENGTH@ 5
---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 @AT@ 7505 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 @AT@ 7509 @LENGTH@ 1
------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int j=1, i=n - k + 1 @AT@ 7512 @LENGTH@ 13
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7512 @LENGTH@ 1
---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n - k + 1 @AT@ 7516 @LENGTH@ 9
------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 @AT@ 7516 @LENGTH@ 5
---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 7516 @LENGTH@ 1
---------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 7517 @LENGTH@ 1
---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 7520 @LENGTH@ 1
------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 @AT@ 7521 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 @AT@ 7524 @LENGTH@ 1
---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7527 @LENGTH@ 6
------------INS SimpleName@@j @TO@ InfixExpression@@j <= k @AT@ 7527 @LENGTH@ 1
------------INS Operator@@<= @TO@ InfixExpression@@j <= k @AT@ 7528 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@j <= k @AT@ 7532 @LENGTH@ 1
---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7535 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 7535 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 7537 @LENGTH@ 2
---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7540 @LENGTH@ 3
------------INS SimpleName@@j @TO@ PostfixExpression@@j++ @AT@ 7540 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@j++ @AT@ 7542 @LENGTH@ 2
---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7563 @LENGTH@ 19
------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7563 @LENGTH@ 4
------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long d=gcd(i,j); @AT@ 7568 @LENGTH@ 13
---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7568 @LENGTH@ 1
---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) @AT@ 7572 @LENGTH@ 9
------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) @AT@ 7572 @LENGTH@ 9
---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7576 @LENGTH@ 1
---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i, j] @AT@ 7579 @LENGTH@ 1
---------INS ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @AT@ 7599 @LENGTH@ 50
------------INS Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @TO@ ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 49
---------------INS SimpleName@@result @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7599 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7605 @LENGTH@ 1
---------------INS MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
------------------INS SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @TO@ MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) @AT@ 7608 @LENGTH@ 40
---------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7620 @LENGTH@ 18
------------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result / (j / d)) @AT@ 7621 @LENGTH@ 16
---------------------------INS SimpleName@@result @TO@ InfixExpression@@result / (j / d) @AT@ 7621 @LENGTH@ 6
---------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j / d) @AT@ 7627 @LENGTH@ 1
---------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result / (j / d) @AT@ 7630 @LENGTH@ 7
------------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j / d) @AT@ 7631 @LENGTH@ 5
---------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d @AT@ 7631 @LENGTH@ 1
---------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d @AT@ 7632 @LENGTH@ 1
---------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d @AT@ 7635 @LENGTH@ 1
---------------------INS ParenthesizedExpression@@(i / d) @TO@ SimpleName@@MethodName:mulAndCheck:[(result / (j / d)), (i / d)] @AT@ 7640 @LENGTH@ 7
------------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i / d) @AT@ 7641 @LENGTH@ 5
---------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d @AT@ 7641 @LENGTH@ 1
---------------------------INS Operator@@/ @TO@ InfixExpression@@i / d @AT@ 7642 @LENGTH@ 1
---------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d @AT@ 7645 @LENGTH@ 1
, DEL ReturnStatement@@MethodInvocation:Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8386 @LENGTH@ 64
---DEL MethodInvocation@@Math.floor(Math.exp(binomialCoefficientLog(n,k)) + 0.5) @AT@ 8393 @LENGTH@ 56
------DEL SimpleName@@Name:Math @AT@ 8393 @LENGTH@ 4
------DEL SimpleName@@MethodName:floor:[Math.exp(binomialCoefficientLog(n,k)) + 0.5] @AT@ 8398 @LENGTH@ 51
---------DEL InfixExpression@@Math.exp(binomialCoefficientLog(n,k)) + 0.5 @AT@ 8404 @LENGTH@ 44
------------DEL MethodInvocation@@Math.exp(binomialCoefficientLog(n,k)) @AT@ 8404 @LENGTH@ 38
---------------DEL SimpleName@@MethodName:exp:[binomialCoefficientLog(n,k)] @AT@ 8409 @LENGTH@ 33
------------------DEL MethodInvocation@@binomialCoefficientLog(n,k) @AT@ 8413 @LENGTH@ 28
, INS IfStatement@@InfixExpression:n < k @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8790 @LENGTH@ 138
---INS InfixExpression@@n < k @TO@ IfStatement@@InfixExpression:n < k @AT@ 8794 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < k @AT@ 8794 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < k @AT@ 8795 @LENGTH@ 1
------INS SimpleName@@k @TO@ InfixExpression@@n < k @AT@ 8798 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < k @AT@ 8815 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") @AT@ 8821 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8821 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8825 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= k for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial coefficient (n,k)"] @AT@ 8867 @LENGTH@ 49
, INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 8937 @LENGTH@ 138
---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8941 @LENGTH@ 5
------INS SimpleName@@n @TO@ InfixExpression@@n < 0 @AT@ 8941 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 0 @AT@ 8942 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 @AT@ 8945 @LENGTH@ 1
---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n < 0 @AT@ 8962 @LENGTH@ 103
------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") @AT@ 8968 @LENGTH@ 96
---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8968 @LENGTH@ 3
---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 8972 @LENGTH@ 24
---------INS StringLiteral@@"must have n >= 0 for binomial coefficient (n,k)" @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial coefficient (n,k)"] @AT@ 9014 @LENGTH@ 49
, INS IfStatement@@InfixExpression:(n == k) || (k == 0) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9084 @LENGTH@ 60
---INS InfixExpression@@(n == k) || (k == 0) @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 20
------INS ParenthesizedExpression@@(n == k) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9088 @LENGTH@ 8
---------INS InfixExpression@@n == k @TO@ ParenthesizedExpression@@(n == k) @AT@ 9089 @LENGTH@ 6
------------INS SimpleName@@n @TO@ InfixExpression@@n == k @AT@ 9089 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@n == k @AT@ 9090 @LENGTH@ 2
------------INS SimpleName@@k @TO@ InfixExpression@@n == k @AT@ 9094 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9096 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == 0) @TO@ InfixExpression@@(n == k) || (k == 0) @AT@ 9100 @LENGTH@ 8
---------INS InfixExpression@@k == 0 @TO@ ParenthesizedExpression@@(k == 0) @AT@ 9101 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 0 @AT@ 9101 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 0 @AT@ 9102 @LENGTH@ 2
------------INS NumberLiteral@@0 @TO@ InfixExpression@@k == 0 @AT@ 9106 @LENGTH@ 1
---INS ReturnStatement@@NumberLiteral:1d @TO@ IfStatement@@InfixExpression:(n == k) || (k == 0) @AT@ 9124 @LENGTH@ 10
------INS NumberLiteral@@1d @TO@ ReturnStatement@@NumberLiteral:1d @AT@ 9131 @LENGTH@ 2
, INS IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9153 @LENGTH@ 63
---INS InfixExpression@@(k == 1) || (k == n - 1) @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 24
------INS ParenthesizedExpression@@(k == 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9157 @LENGTH@ 8
---------INS InfixExpression@@k == 1 @TO@ ParenthesizedExpression@@(k == 1) @AT@ 9158 @LENGTH@ 6
------------INS SimpleName@@k @TO@ InfixExpression@@k == 1 @AT@ 9158 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == 1 @AT@ 9159 @LENGTH@ 2
------------INS NumberLiteral@@1 @TO@ InfixExpression@@k == 1 @AT@ 9163 @LENGTH@ 1
------INS Operator@@|| @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9165 @LENGTH@ 2
------INS ParenthesizedExpression@@(k == n - 1) @TO@ InfixExpression@@(k == 1) || (k == n - 1) @AT@ 9169 @LENGTH@ 12
---------INS InfixExpression@@k == n - 1 @TO@ ParenthesizedExpression@@(k == n - 1) @AT@ 9170 @LENGTH@ 10
------------INS SimpleName@@k @TO@ InfixExpression@@k == n - 1 @AT@ 9170 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@k == n - 1 @AT@ 9171 @LENGTH@ 2
------------INS InfixExpression@@n - 1 @TO@ InfixExpression@@k == n - 1 @AT@ 9175 @LENGTH@ 5
---------------INS SimpleName@@n @TO@ InfixExpression@@n - 1 @AT@ 9175 @LENGTH@ 1
---------------INS Operator@@- @TO@ InfixExpression@@n - 1 @AT@ 9176 @LENGTH@ 1
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - 1 @AT@ 9179 @LENGTH@ 1
---INS ReturnStatement@@SimpleName:n @TO@ IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @AT@ 9197 @LENGTH@ 9
------INS SimpleName@@n @TO@ ReturnStatement@@SimpleName:n @AT@ 9204 @LENGTH@ 1
, INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9225 @LENGTH@ 80
---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9229 @LENGTH@ 7
------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 @AT@ 9229 @LENGTH@ 1
------INS Operator@@> @TO@ InfixExpression@@k > n / 2 @AT@ 9230 @LENGTH@ 1
------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 @AT@ 9233 @LENGTH@ 3
---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 @AT@ 9233 @LENGTH@ 1
---------INS Operator@@/ @TO@ InfixExpression@@n / 2 @AT@ 9234 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 @AT@ 9235 @LENGTH@ 1
---INS ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @TO@ IfStatement@@InfixExpression:k > n / 2 @AT@ 9252 @LENGTH@ 43
------INS MethodInvocation@@binomialCoefficientDouble(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k) @AT@ 9259 @LENGTH@ 35
---------MOV SimpleName@@Name:Math @TO@ MethodInvocation@@binomialCoefficientDouble(n,n - k) @AT@ 8404 @LENGTH@ 4
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9314 @LENGTH@ 68
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9318 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 9318 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 9319 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 9322 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 9340 @LENGTH@ 32
------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @AT@ 9347 @LENGTH@ 24
---------MOV SimpleName@@MethodName:binomialCoefficientLog:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 8413 @LENGTH@ 28
, INS VariableDeclarationStatement@@double result=1d; @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9400 @LENGTH@ 19
---INS PrimitiveType@@double @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9400 @LENGTH@ 6
---INS VariableDeclarationFragment@@result=1d @TO@ VariableDeclarationStatement@@double result=1d; @AT@ 9407 @LENGTH@ 11
------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=1d @AT@ 9407 @LENGTH@ 6
------INS NumberLiteral@@1d @TO@ VariableDeclarationFragment@@result=1d @AT@ 9416 @LENGTH@ 2
, INS ForStatement@@[int i=1];i <= k; [i++] @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9428 @LENGTH@ 96
---INS VariableDeclarationExpression@@int i=1 @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9433 @LENGTH@ 9
------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9433 @LENGTH@ 3
------INS VariableDeclarationFragment@@i=1 @TO@ VariableDeclarationExpression@@int i=1 @AT@ 9437 @LENGTH@ 5
---------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=1 @AT@ 9437 @LENGTH@ 1
---------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@i=1 @AT@ 9441 @LENGTH@ 1
---INS InfixExpression@@i <= k @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9444 @LENGTH@ 6
------INS SimpleName@@i @TO@ InfixExpression@@i <= k @AT@ 9444 @LENGTH@ 1
------INS Operator@@<= @TO@ InfixExpression@@i <= k @AT@ 9445 @LENGTH@ 2
------INS SimpleName@@k @TO@ InfixExpression@@i <= k @AT@ 9449 @LENGTH@ 1
---INS PostfixExpression@@i++ @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9452 @LENGTH@ 3
------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 9452 @LENGTH@ 1
------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 9454 @LENGTH@ 2
---INS ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @TO@ ForStatement@@[int i=1];i <= k; [i++] @AT@ 9472 @LENGTH@ 42
------INS Assignment@@result*=(double)(n - k + i) / (double)i @TO@ ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 41
---------INS SimpleName@@result @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9472 @LENGTH@ 6
---------INS Operator@@*= @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9478 @LENGTH@ 2
---------INS InfixExpression@@(double)(n - k + i) / (double)i @TO@ Assignment@@result*=(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 31
------------INS CastExpression@@(double)(n - k + i) @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9482 @LENGTH@ 19
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)(n - k + i) @AT@ 9483 @LENGTH@ 6
---------------INS ParenthesizedExpression@@(n - k + i) @TO@ CastExpression@@(double)(n - k + i) @AT@ 9490 @LENGTH@ 11
------------------INS InfixExpression@@n - k + i @TO@ ParenthesizedExpression@@(n - k + i) @AT@ 9491 @LENGTH@ 9
---------------------MOV Operator@@+ @TO@ InfixExpression@@n - k + i @AT@ 8442 @LENGTH@ 1
---------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + i @AT@ 9491 @LENGTH@ 5
------------------------INS SimpleName@@n @TO@ InfixExpression@@n - k @AT@ 9491 @LENGTH@ 1
------------------------INS Operator@@- @TO@ InfixExpression@@n - k @AT@ 9492 @LENGTH@ 1
------------------------INS SimpleName@@k @TO@ InfixExpression@@n - k @AT@ 9495 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ InfixExpression@@n - k + i @AT@ 9499 @LENGTH@ 1
------------INS Operator@@/ @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9501 @LENGTH@ 1
------------INS CastExpression@@(double)i @TO@ InfixExpression@@(double)(n - k + i) / (double)i @AT@ 9504 @LENGTH@ 9
---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)i @AT@ 9505 @LENGTH@ 6
---------------INS SimpleName@@i @TO@ CastExpression@@(double)i @AT@ 9512 @LENGTH@ 1
, INS ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ @AT@ 9536 @LENGTH@ 32
---INS MethodInvocation@@Math.floor(result + 0.5) @TO@ ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 24
------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9543 @LENGTH@ 4
------INS SimpleName@@MethodName:floor:[result + 0.5] @TO@ MethodInvocation@@Math.floor(result + 0.5) @AT@ 9548 @LENGTH@ 19
---------INS InfixExpression@@result + 0.5 @TO@ SimpleName@@MethodName:floor:[result + 0.5] @AT@ 9554 @LENGTH@ 12
------------MOV NumberLiteral@@0.5 @TO@ InfixExpression@@result + 0.5 @AT@ 8445 @LENGTH@ 3
------------INS SimpleName@@result @TO@ InfixExpression@@result + 0.5 @AT@ 9554 @LENGTH@ 6
------------INS Operator@@+ @TO@ InfixExpression@@result + 0.5 @AT@ 9560 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 10974 @LENGTH@ 80
---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 10978 @LENGTH@ 6
------INS SimpleName@@n @TO@ InfixExpression@@n < 67 @AT@ 10978 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 67 @AT@ 10979 @LENGTH@ 1
------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 @AT@ 10982 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @TO@ IfStatement@@InfixExpression:n < 67 @AT@ 11002 @LENGTH@ 42
------INS MethodInvocation@@Math.log(binomialCoefficient(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 34
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11009 @LENGTH@ 4
---------INS SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) @AT@ 11014 @LENGTH@ 29
------------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @AT@ 11018 @LENGTH@ 24
---------------INS SimpleName@@MethodName:binomialCoefficient:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) @AT@ 11018 @LENGTH@ 24
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11038 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ SimpleName@@MethodName:binomialCoefficient:[n, k] @AT@ 11040 @LENGTH@ 1
, INS IfStatement@@InfixExpression:n < 1030 @TO@ MethodDeclaration@@public, static, @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ @AT@ 11221 @LENGTH@ 88
---INS InfixExpression@@n < 1030 @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11225 @LENGTH@ 8
------INS SimpleName@@n @TO@ InfixExpression@@n < 1030 @AT@ 11225 @LENGTH@ 1
------INS Operator@@< @TO@ InfixExpression@@n < 1030 @AT@ 11226 @LENGTH@ 1
------INS NumberLiteral@@1030 @TO@ InfixExpression@@n < 1030 @AT@ 11229 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @TO@ IfStatement@@InfixExpression:n < 1030 @AT@ 11250 @LENGTH@ 49
------MOV MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) @AT@ 6059 @LENGTH@ 43
]

CII:
OP1:(INS, IfStatement, null, OP2 OP6)
OP2:   (INS, InfixExpression, OP1, OP3 OP4 OP5)
OP3:      (INS, SimpleName, OP2, null)
OP4:      (INS, Operator, OP2, null)
OP5:      (INS, NumberLiteral, OP2, null)
OP6:   (INS, ReturnStatement, OP1, OP7)
OP7:      (MOV, MethodInvocation, OP6, null)



