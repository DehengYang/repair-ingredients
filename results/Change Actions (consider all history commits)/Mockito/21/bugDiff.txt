
diff -Naur ../d4j-repo/Mockito/Mockito_21/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java ../d4j-repo/fixed_bugs_dir/Mockito/Mockito_21/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java
--- ../d4j-repo/Mockito/Mockito_21/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java	2021-01-06 03:35:48.739757818 -0800
+++ ../d4j-repo/fixed_bugs_dir/Mockito/Mockito_21/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java	2021-01-06 03:35:52.303879164 -0800
@@ -14,18 +14,23 @@
         if (outerClassInstance == null) {
             return noArgConstructor(cls);
         }
-        return withOuterClass(cls);
+        return withParams(cls, outerClassInstance);
     }
 
-    private <T> T withOuterClass(Class<T> cls) {
+    private static <T> T withParams(Class<T> cls, Object... params) {
         try {
             //this is kind of overengineered because we don't need to support more params
             //however, I know we will be needing it :)
-            Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());
-            return c.newInstance(outerClassInstance);
+            for (Constructor<?> constructor : cls.getDeclaredConstructors()) {
+                Class<?>[] types = constructor.getParameterTypes();
+                if (paramsMatch(types, params)) {
+                    return (T) constructor.newInstance(params);
+                }
+            }
         } catch (Exception e) {
             throw paramsException(cls, e);
         }
+        throw paramsException(cls, null);
     }
 
     private static <T> InstantationException paramsException(Class<T> cls, Exception e) {
@@ -33,6 +38,17 @@
                 + cls.getSimpleName() + "'.\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.", e);
     }
 
+    private static boolean paramsMatch(Class<?>[] types, Object[] params) {
+        if (params.length != types.length) {
+            return false;
+        }
+        for (int i = 0; i < params.length; i++) {
+            if (!types[i].isInstance(params[i])) {
+                return false;
+            }
+        }
+        return true;
+    }
 
     private static <T> T noArgConstructor(Class<T> cls) {
         try {