---patch code ori--- com.google.javascript.jscomp.NameAnalyzer <578, 586>
if (!(parent.isCall() && parent.getFirstChild() == n)) {
          // The rhs of the assignment is the caller, so it's used by the
          // context. Don't associate it w/ the lhs.
          // FYI: this fixes only the specific case where the assignment is the
          // caller expression, but it could be nested deeper in the caller and
          // we would still get a bug.
          // See testAssignWithCall2 for an example of this.
          recordDepScope(recordNode, ns);
        }

---fix ingredient(SamePackage)  <parseContainCheck>  varMapType:ori--- com.google.javascript.jscomp.CheckAccessControls <574, 579>
if (t.inGlobalScope()) {
      if (!((parent.isCall() && parent.getFirstChild() == n) ||
              n.isNew())) {
        return false;
      }
    }

---patch code 0--- com.google.javascript.jscomp.NameAnalyzer <578, 586>
if (!(Node.isCall() && Node.getFirstChild() == Node)) {
          // The rhs of the assignment is the caller, so it's used by the
          // context. Don't associate it w/ the lhs.
          // FYI: this fixes only the specific case where the assignment is the
          // caller expression, but it could be nested deeper in the caller and
          // we would still get a bug.
          // See testAssignWithCall2 for an example of AbstractPostOrderCallback.
          recordDepScope(Node, NameInformation);
        }

---fix ingredient(SamePackage)  <parseContainCheck>  varMapType:0--- com.google.javascript.jscomp.CheckAccessControls <574, 579>
if (NodeTraversal.inGlobalScope()) {
      if (!((Node.isCall() && Node.getFirstChild() == Node) ||
              Node.isNew())) {
        return false;
      }
    }

---patch code 1--- com.google.javascript.jscomp.NameAnalyzer <578, 586>
if (!(Node.isCall() && Node.getFirstChild() == Node)) {
          // The rhs of the assignment is the caller, so it's used by the
          // context. Don't associate it w/ the lhs.
          // FYI: this fixes only the specific case where the assignment is the
          // caller expression, but it could be nested deeper in the caller and
          // we would still get a bug.
          // See testAssignWithCall2 for an example of AbstractPostOrderCallback.
          recordDepScope(Node, NameInformation);
        }

---fix ingredient(SamePackage)  <parseContainCheck>  varMapType:1--- com.google.javascript.jscomp.CheckAccessControls <574, 579>
if (NodeTraversal.inGlobalScope()) {
      if (!((Node.isCall() && Node.getFirstChild() == Node) ||
              Node.isNew())) {
        return false;
      }
    }

