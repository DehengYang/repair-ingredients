---patch code ori--- org.apache.commons.lang.StringEscapeUtils <143, 143>
escapeJavaStyleString(out, str, true, true);

---fix ingredient(SameMethod)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringEscapeUtils <143, 143>
escapeJavaStyleString(out, str, true);

---patch code 0--- org.apache.commons.lang.StringEscapeUtils <143, 143>
escapeJavaStyleString(Writer, StringVar, true, true);

---fix ingredient(SameMethod)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringEscapeUtils <143, 143>
escapeJavaStyleString(Writer, StringVar, true);

---patch code 1--- org.apache.commons.lang.StringEscapeUtils <143, 143>
escapeJavaStyleString(Writer, str, true, true);

---fix ingredient(SameMethod)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringEscapeUtils <143, 143>
escapeJavaStyleString(Writer, str, true);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringEscapeUtils <127, 127>
return escapeJavaStyleString(str, true);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringEscapeUtils <127, 127>
return escapeJavaStyleString(StringVar, true);

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringEscapeUtils <127, 127>
return escapeJavaStyleString(str, true);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <2739, 2739>
return splitByCharacterType(str, true);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringUtils <2739, 2739>
return splitByCharacterType(StringVar, true);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <2739, 2739>
return splitByCharacterType(str, true);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <2430, 2430>
return splitWorker(str, null, -1, true);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringUtils <2430, 2430>
return splitWorker(StringVar, null, -1, true);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <2430, 2430>
return splitWorker(str, null, -1, true);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <1316, 1318>
if (str.length() == 0) {
            return true;
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringUtils <1316, 1318>
if (StringVar.length() == 0) {
            return true;
        }

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <1316, 1318>
if (str.length() == 0) {
            return true;
        }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <2287, 2287>
return splitByWholeSeparatorWorker(str, separator, -1, true);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringUtils <2287, 2287>
return splitByWholeSeparatorWorker(StringVar, StringVar, -1, true);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <2287, 2287>
return splitByWholeSeparatorWorker(str, separator, -1, true);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <2549, 2549>
return splitWorker(str, separatorChars, -1, true);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringUtils <2549, 2549>
return splitWorker(StringVar, StringVar, -1, true);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <2549, 2549>
return splitWorker(str, separatorChars, -1, true);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <2466, 2466>
return splitWorker(str, separatorChar, true);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringUtils <2466, 2466>
return splitWorker(StringVar, charVar, true);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <2466, 2466>
return splitWorker(str, separatorChar, true);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <5865, 5865>
return startsWith(str, prefix, true);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringUtils <5865, 5865>
return startsWith(StringVar, StringVar, true);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <5865, 5865>
return startsWith(str, prefix, true);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <5940, 5940>
return endsWith(str, suffix, true);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringUtils <5940, 5940>
return endsWith(StringVar, StringVar, true);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <5940, 5940>
return endsWith(str, suffix, true);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.CharSetUtils <257, 257>
return modify(str, set, true);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.CharSetUtils <257, 257>
return modify(StringVar, String[]Var, true);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.CharSetUtils <257, 257>
return modify(str, set, true);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.math.NumberUtils <555, 557>
if (str == null) {
            return true;
        }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.math.NumberUtils <555, 557>
if (StringVar == null) {
            return true;
        }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.math.NumberUtils <555, 557>
if (str == null) {
            return true;
        }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.BooleanUtils <656, 658>
if (str == "true") {
            return true;
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.BooleanUtils <656, 658>
if (StringVar == "true") {
            return true;
        }

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.BooleanUtils <656, 658>
if (str == "true") {
            return true;
        }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <2320, 2320>
return splitByWholeSeparatorWorker(str, separator, max, true);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringUtils <2320, 2320>
return splitByWholeSeparatorWorker(StringVar, StringVar, intVar, true);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <2320, 2320>
return splitByWholeSeparatorWorker(str, separator, max, true);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <2589, 2589>
return splitWorker(str, separatorChars, max, true);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringUtils <2589, 2589>
return splitWorker(StringVar, StringVar, intVar, true);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <2589, 2589>
return splitWorker(str, separatorChars, max, true);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <1379, 1381>
if (str == null || invalidChars == null) {
            return true;
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringUtils <1379, 1381>
if (StringVar == null || char[]Var == null) {
            return true;
        }

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <1379, 1381>
if (str == null || invalidChars == null) {
            return true;
        }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <1418, 1420>
if (str == null || invalidChars == null) {
            return true;
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringUtils <1418, 1420>
if (StringVar == null || StringVar == null) {
            return true;
        }

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <1418, 1420>
if (str == null || invalidChars == null) {
            return true;
        }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <228, 230>
if (str == null || (strLen = str.length()) == 0) {
            return true;
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringUtils <228, 230>
if (StringVar == null || (intVar = StringVar.length()) == 0) {
            return true;
        }

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <228, 230>
if (str == null || (strLen = str.length()) == 0) {
            return true;
        }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.CharSet <208, 208>
set.add(new CharRange(str.charAt(pos + 1), str.charAt(pos + 3), true));

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.CharSet <208, 208>
Set.add(new CharRange(StringVar.charAt(intVar + 1), StringVar.charAt(intVar + 3), true));

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.CharSet <208, 208>
Set.add(new CharRange(str.charAt(pos + 1), str.charAt(pos + 3), true));

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.BooleanUtils <739, 743>
if (str.equals(trueString)) {
            return true;
        } else if (str.equals(falseString)) {
            return false;
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.BooleanUtils <739, 743>
if (StringVar.equals(StringVar)) {
            return true;
        } else if (StringVar.equals(StringVar)) {
            return false;
        }

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.BooleanUtils <739, 743>
if (str.equals(trueString)) {
            return true;
        } else if (str.equals(falseString)) {
            return false;
        }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.CharSet <214, 222>
if (remainder >= 2 && str.charAt(pos) == '^') {
                // negated char
                set.add(new CharRange(str.charAt(pos + 1), true));
                pos += 2;
            } else {
                // char
                set.add(new CharRange(str.charAt(pos)));
                pos += 1;
            }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.CharSet <214, 222>
if (intVar >= 2 && StringVar.charAt(intVar) == '^') {
                // negated char
                Set.add(new CharRange(StringVar.charAt(intVar + 1), true));
                intVar += 2;
            } else {
                // char
                Set.add(new CharRange(StringVar.charAt(intVar)));
                intVar += 1;
            }

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.CharSet <214, 222>
if (remainder >= 2 && str.charAt(pos) == '^') {
                // negated char
                Set.add(new CharRange(str.charAt(pos + 1), true));
                pos += 2;
            } else {
                // char
                Set.add(new CharRange(str.charAt(pos)));
                pos += 1;
            }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.BooleanUtils <611, 617>
if (str.equals(trueString)) {
            return Boolean.TRUE;
        } else if (str.equals(falseString)) {
            return Boolean.FALSE;
        } else if (str.equals(nullString)) {
            return null;
        }

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.BooleanUtils <611, 617>
if (str.equals(trueString)) {
            return Boolean.TRUE;
        } else if (str.equals(falseString)) {
            return Boolean.FALSE;
        } else if (str.equals(nullString)) {
            return null;
        }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <1169, 1176>
for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            for (int j = 0; j < searchChars.length; j++) {
                if (searchChars[j] == ch) {
                    return true;
                }
            }
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringUtils <1169, 1176>
for (int intVar = 0; intVar < StringVar.length(); intVar++) {
            char ch = StringVar.charAt(intVar);
            for (int j = 0; j < char[]Var.length; j++) {
                if (char[]Var[j] == ch) {
                    return true;
                }
            }
        }

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <1169, 1176>
for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            for (int j = 0; j < searchChars.length; j++) {
                if (searchChars[j] == ch) {
                    return true;
                }
            }
        }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <2496, 2504>
if (str.charAt(i) == separatorChar) {
                if (match || preserveAllTokens) {
                    list.add(str.substring(start, i));
                    match = false;
                    lastMatch = true;
                }
                start = ++i;
                continue;
            }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringUtils <2496, 2504>
if (StringVar.charAt(intVar) == charVar) {
                if (booleanVar || booleanVar) {
                    ListVar.add(StringVar.substring(intVar, intVar));
                    booleanVar = false;
                    booleanVar = true;
                }
                intVar = ++intVar;
                continue;
            }

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <2496, 2504>
if (str.charAt(i) == separatorChar) {
                if (match || preserveAllTokens) {
                    list.add(str.substring(start, i));
                    match = false;
                    lastMatch = true;
                }
                start = ++i;
                continue;
            }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <2667, 2679>
if (separatorChars.indexOf(str.charAt(i)) >= 0) {
                    if (match || preserveAllTokens) {
                        lastMatch = true;
                        if (sizePlus1++ == max) {
                            i = len;
                            lastMatch = false;
                        }
                        list.add(str.substring(start, i));
                        match = false;
                    }
                    start = ++i;
                    continue;
                }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringUtils <2667, 2679>
if (StringVar.indexOf(StringVar.charAt(intVar)) >= 0) {
                    if (booleanVar || booleanVar) {
                        booleanVar = true;
                        if (intVar++ == intVar) {
                            intVar = intVar;
                            booleanVar = false;
                        }
                        ListVar.add(StringVar.substring(intVar, intVar));
                        booleanVar = false;
                    }
                    intVar = ++intVar;
                    continue;
                }

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <2667, 2679>
if (separatorChars.indexOf(str.charAt(i)) >= 0) {
                    if (match || preserveAllTokens) {
                        lastMatch = true;
                        if (sizePlus1++ == max) {
                            i = len;
                            lastMatch = false;
                        }
                        list.add(str.substring(start, i));
                        match = false;
                    }
                    start = ++i;
                    continue;
                }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <2626, 2638>
if (Character.isWhitespace(str.charAt(i))) {
                    if (match || preserveAllTokens) {
                        lastMatch = true;
                        if (sizePlus1++ == max) {
                            i = len;
                            lastMatch = false;
                        }
                        list.add(str.substring(start, i));
                        match = false;
                    }
                    start = ++i;
                    continue;
                }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringUtils <2626, 2638>
if (Character.isWhitespace(StringVar.charAt(intVar))) {
                    if (booleanVar || booleanVar) {
                        booleanVar = true;
                        if (intVar++ == intVar) {
                            intVar = intVar;
                            booleanVar = false;
                        }
                        ListVar.add(StringVar.substring(intVar, intVar));
                        booleanVar = false;
                    }
                    intVar = ++intVar;
                    continue;
                }

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <2626, 2638>
if (Character.isWhitespace(str.charAt(i))) {
                    if (match || preserveAllTokens) {
                        lastMatch = true;
                        if (sizePlus1++ == max) {
                            i = len;
                            lastMatch = false;
                        }
                        list.add(str.substring(start, i));
                        match = false;
                    }
                    start = ++i;
                    continue;
                }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <2647, 2659>
if (str.charAt(i) == sep) {
                    if (match || preserveAllTokens) {
                        lastMatch = true;
                        if (sizePlus1++ == max) {
                            i = len;
                            lastMatch = false;
                        }
                        list.add(str.substring(start, i));
                        match = false;
                    }
                    start = ++i;
                    continue;
                }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringUtils <2647, 2659>
if (StringVar.charAt(intVar) == charVar) {
                    if (booleanVar || booleanVar) {
                        booleanVar = true;
                        if (intVar++ == intVar) {
                            intVar = intVar;
                            booleanVar = false;
                        }
                        ListVar.add(StringVar.substring(intVar, intVar));
                        booleanVar = false;
                    }
                    intVar = ++intVar;
                    continue;
                }

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <2647, 2659>
if (str.charAt(i) == sep) {
                    if (match || preserveAllTokens) {
                        lastMatch = true;
                        if (sizePlus1++ == max) {
                            i = len;
                            lastMatch = false;
                        }
                        list.add(str.substring(start, i));
                        match = false;
                    }
                    start = ++i;
                    continue;
                }

