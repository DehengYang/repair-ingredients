---patch code ori--- org.apache.commons.lang.text.StrBuilder <1730, 1734>
for (int i = startIndex; i < size; i++) {
            if (thisBuf[i] == ch) {
                return i;
            }
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <1167, 1172>
for (int i = 0; i < size; i++) {
            if (buffer[i] == ch) {
                deleteImpl(i, i + 1, 1);
                break;
            }
        }

---patch code 1--- org.apache.commons.lang.text.StrBuilder <1730, 1734>
for (int i = startIndex; i < size; i++) {
            if (thisBuf[i] == ch) {
                return i;
            }
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <1167, 1172>
for (int i = 0; i < size; i++) {
            if (buffer[i] == ch) {
                deleteImpl(i, i + 1, 1);
                break;
            }
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.Entities <597, 601>
for (int i = 0; i < size; ++i) {
                if (values[i] == value) {
                    return names[i];
                }
            }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.Entities <597, 601>
for (int i = 0; i < size; ++i) {
                if (values[i] == value) {
                    return names[i];
                }
            }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.WordUtils <577, 581>
for (int i = 0, isize = delimiters.length; i < isize; i++) {
            if (ch == delimiters[i]) {
                return true;
            }
        }

---patch code 0--- org.apache.commons.lang.text.StrBuilder <1730, 1734>
for (int intVar = intVar; intVar < intVar; intVar++) {
            if (char[]Var[intVar] == charVar) {
                return intVar;
            }
        }

---fix ingredient  <parseContainCheck2>  varMapType:0--- org.apache.commons.lang.WordUtils <577, 581>
for (int intVar = 0, intVar = char[]Var.length; intVar < intVar; intVar++) {
            if (charVar == char[]Var[intVar]) {
                return true;
            }
        }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.WordUtils <577, 581>
for (int i = 0, isize = delimiters.length; i < isize; i++) {
            if (ch == delimiters[i]) {
                return true;
            }
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.Entities <609, 613>
for (int i = 0; i < size; ++i) {
                if (names[i].equals(name)) {
                    return values[i];
                }
            }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.Entities <609, 613>
for (int i = 0; i < size; ++i) {
                if (names[i].equals(name)) {
                    return values[i];
                }
            }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <813, 818>
if (length >= 0) {
            ensureCapacity(size + length);
            for (int i = 0; i < length; i++) {
                buffer[size++] = padChar;
            }
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <813, 818>
if (length >= 0) {
            ensureCapacity(size + length);
            for (int i = 0; i < length; i++) {
                buffer[size++] = padChar;
            }
        }

---fix ingredient(SameFile)  varMapType:0--- org.apache.commons.lang.text.StrBuilder <1822, 1826>
for (int intVar = intVar; intVar < intVar; intVar++) {
            if (StrMatcher.isMatch(char[]Var, intVar, intVar, intVar) > 0) {
                return intVar;
            }
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <2084, 2090>
for (int i = size - 1; i >= 0; i--) {
            char c1 = thisBuf[i];
            char c2 = otherBuf[i];
            if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) {
                return false;
            }
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <2084, 2090>
for (int i = size - 1; i >= 0; i--) {
            char c1 = thisBuf[i];
            char c2 = otherBuf[i];
            if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) {
                return false;
            }
        }

---fix ingredient(SameFile)  varMapType:0--- org.apache.commons.lang.text.StrBuilder <1778, 1785>
for (int intVar = intVar; intVar < intVar; intVar++) {
            for (int j = 0; j < intVar; j++) {
                if (StringVar.charAt(j) != char[]Var[intVar + j]) {
                    continue outer;
                }
            }
            return intVar;
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <1311, 1318>
if (search != replace) {
            for (int i = 0; i < size; i++) {
                if (buffer[i] == search) {
                    buffer[i] = replace;
                    break;
                }
            }
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <1311, 1318>
if (search != replace) {
            for (int i = 0; i < size; i++) {
                if (buffer[i] == search) {
                    buffer[i] = replace;
                    break;
                }
            }
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <1292, 1298>
if (search != replace) {
            for (int i = 0; i < size; i++) {
                if (buffer[i] == search) {
                    buffer[i] = replace;
                }
            }
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <1292, 1298>
if (search != replace) {
            for (int i = 0; i < size; i++) {
                if (buffer[i] == search) {
                    buffer[i] = replace;
                }
            }
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <2101, 2116>
/**
     * Checks the contents of this builder against another to see if they
     * contain the same character content.
     *
     * @param other  the object to check, null returns false
     * @return true if the builders contain the same characters in the same order
     */
    public boolean equals(StrBuilder other) {
        if (this == other) {
            return true;
        }
        if (this.size != other.size) {
            return false;
        }
        char thisBuf[] = this.buffer;
        char otherBuf[] = other.buffer;
        for (int i = size - 1; i >= 0; i--) {
            if (thisBuf[i] != otherBuf[i]) {
                return false;
            }
        }
        return true;
    }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <2101, 2116>
/**
     * Checks the contents of this builder against another to see if they
     * contain the same character content.
     *
     * @param other  the object to check, null returns false
     * @return true if the builders contain the same characters in the same order
     */
    public boolean equals(StrBuilder other) {
        if (this == StrBuilder) {
            return true;
        }
        if (StrBuilder.size != StrBuilder.size) {
            return false;
        }
        char thisBuf[] = StrBuilder.buffer;
        char otherBuf[] = StrBuilder.buffer;
        for (int i = size - 1; i >= 0; i--) {
            if (thisBuf[i] != otherBuf[i]) {
                return false;
            }
        }
        return true;
    }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <2139, 2143>
int hash = 0;
for (int i = size - 1; i >= 0; i--) {
            hash = 31 * hash + buf[i];
        }
return hash;

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <2139, 2143>
int hash = 0;
for (int i = size - 1; i >= 0; i--) {
            hash = 31 * hash + buf[i];
        }
return hash;

---fix ingredient  varMapType:0--- org.apache.commons.lang.StringUtils <2595, 2602>
for (int intVar = intVar; intVar < intVar; intVar++) {
            if (intVar > intVar) {
                StringBuffer.append(charVar);
            }
            if (Object[]Var[intVar] != null) {
                StringBuffer.append(Object[]Var[intVar]);
            }
        }

---fix ingredient  varMapType:0--- org.apache.commons.lang.StringUtils <2684, 2691>
for (int intVar = intVar; intVar < intVar; intVar++) {
            if (intVar > intVar) {
                StringBuffer.append(StringVar);
            }
            if (Object[]Var[intVar] != null) {
                StringBuffer.append(Object[]Var[intVar]);
            }
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <199, 207>
if (length > size) {
            ensureCapacity(length);
            int oldEnd = size;
            int newEnd = length;
            size = length;
            for (int i = oldEnd; i < newEnd; i++) {
                buffer[i] = '\0';
            }
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <199, 207>
if (length > size) {
            ensureCapacity(length);
            int oldEnd = size;
            int newEnd = length;
            size = length;
            for (int i = oldEnd; i < newEnd; i++) {
                buffer[i] = '\0';
            }
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <1144, 1156>
for (int i = 0; i < size; i++) {
            if (buffer[i] == ch) {
                int start = i;
                while (++i < size) {
                    if (buffer[i] != ch) {
                        break;
                    }
                }
                int len = i - start;
                deleteImpl(start, i, len);
                i -= len;
            }
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <1144, 1156>
for (int i = 0; i < size; i++) {
            if (buffer[i] == ch) {
                int start = i;
                while (++i < size) {
                    if (buffer[i] != ch) {
                        break;
                    }
                }
                int len = i - start;
                deleteImpl(start, i, len);
                i -= len;
            }
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <2414, 2419>
if (sizePlus1++ == max) {
                            i = len;
                            lastMatch = false;
                        }
list.add(str.substring(start, i));
match = false;

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <2414, 2419>
if (sizePlus1++ == max) {
                            i = len;
                            lastMatch = false;
                        }
list.add(str.substring(start, i));
match = false;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <2457, 2462>
if (sizePlus1++ == max) {
                            i = len;
                            lastMatch = false;
                        }
list.add(str.substring(start, i));
match = false;

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <2457, 2462>
if (sizePlus1++ == max) {
                            i = len;
                            lastMatch = false;
                        }
list.add(str.substring(start, i));
match = false;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.exception.ExceptionUtils <459, 470>
for (int i = 0, isize = CAUSE_METHOD_NAMES.length; i < isize; i++) {
            try {
                Method method = cls.getMethod(CAUSE_METHOD_NAMES[i], null);
                if (method != null && Throwable.class.isAssignableFrom(method.getReturnType())) {
                    return true;
                }
            } catch (NoSuchMethodException ignored) {
                // exception ignored
            } catch (SecurityException ignored) {
                // exception ignored
            }
        }

---fix ingredient  <parseContainCheck2>  varMapType:0--- org.apache.commons.lang.exception.ExceptionUtils <459, 470>
for (int intVar = 0, intVar = String[]Var.length; intVar < intVar; intVar++) {
            try {
                Method method = Class.getMethod(String[]Var[intVar], null);
                if (method != null && Throwable.class.isAssignableFrom(method.getReturnType())) {
                    return true;
                }
            } catch (NoSuchMethodException ignored) {
                // exception ignored
            } catch (SecurityException ignored) {
                // exception ignored
            }
        }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.exception.ExceptionUtils <459, 470>
for (int i = 0, isize = CAUSE_METHOD_NAMES.length; i < isize; i++) {
            try {
                Method method = Class.getMethod(CAUSE_METHOD_NAMES[i], null);
                if (method != null && Throwable.class.isAssignableFrom(method.getReturnType())) {
                    return true;
                }
            } catch (NoSuchMethodException ignored) {
                // exception ignored
            } catch (SecurityException ignored) {
                // exception ignored
            }
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <883, 891>
if (strLen >= width) {
                str.getChars(0, strLen, buffer, size);
            } else {
                int padLen = width - strLen;
                str.getChars(0, strLen, buffer, size);
                for (int i = 0; i < padLen; i++) {
                    buffer[size + strLen + i] = padChar;
                }
            }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <883, 891>
if (strLen >= width) {
                str.getChars(0, strLen, buffer, size);
            } else {
                int padLen = width - strLen;
                str.getChars(0, strLen, buffer, size);
                for (int i = 0; i < padLen; i++) {
                    buffer[size + strLen + i] = padChar;
                }
            }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <839, 847>
if (strLen >= width) {
                str.getChars(strLen - width, strLen, buffer, size);
            } else {
                int padLen = width - strLen;
                for (int i = 0; i < padLen; i++) {
                    buffer[size + i] = padChar;
                }
                str.getChars(0, strLen, buffer, size + padLen);
            }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <839, 847>
if (strLen >= width) {
                str.getChars(strLen - width, strLen, buffer, size);
            } else {
                int padLen = width - strLen;
                for (int i = 0; i < padLen; i++) {
                    buffer[size + i] = padChar;
                }
                str.getChars(0, strLen, buffer, size + padLen);
            }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <2433, 2447>
if (str.charAt(i) == sep) {
                    if (match || preserveAllTokens) {
                        lastMatch = true;
                        if (sizePlus1++ == max) {
                            i = len;
                            lastMatch = false;
                        }
                        list.add(str.substring(start, i));
                        match = false;
                    }
                    start = ++i;
                    continue;
                } else {
                    lastMatch = false;
                }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <2433, 2447>
if (str.charAt(i) == sep) {
                    if (match || preserveAllTokens) {
                        lastMatch = true;
                        if (sizePlus1++ == max) {
                            i = len;
                            lastMatch = false;
                        }
                        list.add(str.substring(start, i));
                        match = false;
                    }
                    start = ++i;
                    continue;
                } else {
                    lastMatch = false;
                }

---fix ingredient(SameFile)  <parseContainCheck2>  varMapType:0--- org.apache.commons.lang.text.StrBuilder <1440, 1450>
for (int intVar = intVar; intVar < intVar && intVar != 0; intVar++) {
            int removeLen = StrMatcher.isMatch(char[]Var, intVar, intVar, intVar);
            if (removeLen > 0) {
                replaceImpl(intVar, intVar + removeLen, removeLen, StringVar, intVar);
                intVar = intVar - removeLen + intVar;
                intVar = intVar + intVar - 1;
                if (intVar > 0) {
                    intVar--;
                }
            }
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.exception.ExceptionUtils <794, 808>
for (int i = count; --i >= 0;) {
            List trace = nextTrace;
            if (i != 0) {
                nextTrace = getStackFrameList(throwables[i - 1]);
                removeCommonFrames(trace, nextTrace);
            }
            if (i == count - 1) {
                frames.add(throwables[i].toString());
            } else {
                frames.add(WRAPPED_MARKER + throwables[i].toString());
            }
            for (int j = 0; j < trace.size(); j++) {
                frames.add(trace.get(j));
            }
        }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.exception.ExceptionUtils <794, 808>
for (int intVar = intVar; --intVar >= 0;) {
            List trace = ListVar;
            if (intVar != 0) {
                ListVar = getStackFrameList(Throwable[intVar - 1]);
                removeCommonFrames(trace, ListVar);
            }
            if (intVar == intVar - 1) {
                ArrayList.add(Throwable[intVar].toString());
            } else {
                ArrayList.add(StringVar + Throwable[intVar].toString());
            }
            for (int j = 0; j < trace.size(); j++) {
                ArrayList.add(trace.get(j));
            }
        }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.exception.ExceptionUtils <794, 808>
for (int i = count; --i >= 0;) {
            List trace = nextTrace;
            if (i != 0) {
                nextTrace = getStackFrameList(Throwable[i - 1]);
                removeCommonFrames(trace, nextTrace);
            }
            if (i == count - 1) {
                ArrayList.add(Throwable[i].toString());
            } else {
                ArrayList.add(WRAPPED_MARKER + Throwable[i].toString());
            }
            for (int j = 0; j < trace.size(); j++) {
                ArrayList.add(trace.get(j));
            }
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.exception.NestableDelegate <386, 402>
for (int size=stacks.size(), i=size-1; i > 0; i--) {
             String[] curr = (String[]) stacks.get(i);
             String[] next = (String[]) stacks.get(i-1); 
             
             List currList = new ArrayList(Arrays.asList(curr));
             List nextList = new ArrayList(Arrays.asList(next));
             ExceptionUtils.removeCommonFrames(currList, nextList);

             int trimmed = curr.length - currList.size();
             if (trimmed > 0) {
                 currList.add("\t... "+trimmed+" more");
                 stacks.set(
                     i, 
                     currList.toArray(new String[currList.size()])
                 );
             }
         }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.exception.NestableDelegate <386, 402>
for (int intVar=ListVar.size(), intVar=intVar-1; intVar > 0; intVar--) {
             String[] curr = (String[]) ListVar.get(intVar);
             String[] next = (String[]) ListVar.get(intVar-1); 
             
             List currList = new ArrayList(Arrays.asList(curr));
             List nextList = new ArrayList(Arrays.asList(next));
             ExceptionUtils.removeCommonFrames(currList, nextList);

             int trimmed = curr.length - currList.size();
             if (trimmed > 0) {
                 currList.add("\t... "+trimmed+" more");
                 ListVar.set(
                     intVar, 
                     currList.toArray(new String[currList.size()])
                 );
             }
         }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.exception.NestableDelegate <386, 402>
for (int size=stacks.size(), i=size-1; i > 0; i--) {
             String[] curr = (String[]) stacks.get(i);
             String[] next = (String[]) stacks.get(i-1); 
             
             List currList = new ArrayList(Arrays.asList(curr));
             List nextList = new ArrayList(Arrays.asList(next));
             ExceptionUtils.removeCommonFrames(currList, nextList);

             int trimmed = curr.length - currList.size();
             if (trimmed > 0) {
                 currList.add("\t... "+trimmed+" more");
                 stacks.set(
                     i, 
                     currList.toArray(new String[currList.size()])
                 );
             }
         }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.LocaleUtils <238, 254>
if (langs == null) {
            if (countryCode != null) {
                langs = new ArrayList();
                List locales = availableLocaleList();
                for (int i = 0; i < locales.size(); i++) {
                    Locale locale = (Locale) locales.get(i);
                    if (countryCode.equals(locale.getCountry()) &&
                            locale.getVariant().length() == 0) {
                        langs.add(locale);
                    }
                }
                langs = Collections.unmodifiableList(langs);
            } else {
                langs = Collections.EMPTY_LIST;
            }
            cLanguagesByCountry.put(countryCode, langs);  //syncd
        }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.LocaleUtils <238, 254>
if (ListVar == null) {
            if (StringVar != null) {
                ListVar = new ArrayList();
                List locales = availableLocaleList();
                for (int i = 0; i < locales.size(); i++) {
                    Locale locale = (Locale) locales.get(i);
                    if (StringVar.equals(locale.getCountry()) &&
                            locale.getVariant().length() == 0) {
                        ListVar.add(locale);
                    }
                }
                ListVar = Collections.unmodifiableList(ListVar);
            } else {
                ListVar = Collections.EMPTY_LIST;
            }
            Map.put(StringVar, ListVar);  //syncd
        }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.LocaleUtils <238, 254>
if (langs == null) {
            if (countryCode != null) {
                langs = new ArrayList();
                List locales = availableLocaleList();
                for (int i = 0; i < locales.size(); i++) {
                    Locale locale = (Locale) locales.get(i);
                    if (countryCode.equals(locale.getCountry()) &&
                            locale.getVariant().length() == 0) {
                        langs.add(locale);
                    }
                }
                langs = Collections.unmodifiableList(langs);
            } else {
                langs = Collections.EMPTY_LIST;
            }
            Map.put(countryCode, langs);  //syncd
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.LocaleUtils <270, 287>
if (countries == null) {
            if (languageCode != null) {
                countries = new ArrayList();
                List locales = availableLocaleList();
                for (int i = 0; i < locales.size(); i++) {
                    Locale locale = (Locale) locales.get(i);
                    if (languageCode.equals(locale.getLanguage()) &&
                            locale.getCountry().length() != 0 &&
                            locale.getVariant().length() == 0) {
                        countries.add(locale);
                    }
                }
                countries = Collections.unmodifiableList(countries);
            } else {
                countries = Collections.EMPTY_LIST;
            }
            cCountriesByLanguage.put(languageCode, countries);  //syncd
        }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.LocaleUtils <270, 287>
if (ListVar == null) {
            if (StringVar != null) {
                ListVar = new ArrayList();
                List locales = availableLocaleList();
                for (int i = 0; i < locales.size(); i++) {
                    Locale locale = (Locale) locales.get(i);
                    if (StringVar.equals(locale.getLanguage()) &&
                            locale.getCountry().length() != 0 &&
                            locale.getVariant().length() == 0) {
                        ListVar.add(locale);
                    }
                }
                ListVar = Collections.unmodifiableList(ListVar);
            } else {
                ListVar = Collections.EMPTY_LIST;
            }
            Map.put(StringVar, ListVar);  //syncd
        }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.LocaleUtils <270, 287>
if (countries == null) {
            if (languageCode != null) {
                countries = new ArrayList();
                List locales = availableLocaleList();
                for (int i = 0; i < locales.size(); i++) {
                    Locale locale = (Locale) locales.get(i);
                    if (languageCode.equals(locale.getLanguage()) &&
                            locale.getCountry().length() != 0 &&
                            locale.getVariant().length() == 0) {
                        countries.add(locale);
                    }
                }
                countries = Collections.unmodifiableList(countries);
            } else {
                countries = Collections.EMPTY_LIST;
            }
            Map.put(languageCode, countries);  //syncd
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <688, 691>
int len = length();
ensureCapacity(len + 1);
buffer[size++] = ch;
return this;

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <688, 691>
int len = length();
ensureCapacity(len + 1);
buffer[size++] = ch;
return this;

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <1254, 1258>
if (insertLen != removeLen) {
            ensureCapacity(newSize);
            System.arraycopy(buffer, endIndex, buffer, startIndex + insertLen, size - endIndex);
            size = newSize;
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <1254, 1258>
if (insertLen != removeLen) {
            ensureCapacity(newSize);
            System.arraycopy(buffer, endIndex, buffer, startIndex + insertLen, size - endIndex);
            size = newSize;
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <648, 653>
if (length > 0) {
            int len = length();
            ensureCapacity(len + length);
            System.arraycopy(chars, startIndex, buffer, len, length);
            size += length;
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <648, 653>
if (length > 0) {
            int len = length();
            ensureCapacity(len + length);
            System.arraycopy(chars, startIndex, buffer, len, length);
            size += length;
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <1772, 1776>
if (strLen > size) {
            return -1;
        }
char[] thisBuf = buffer;
int len = size - strLen + 1;

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <1772, 1776>
if (strLen > size) {
            return -1;
        }
char[] thisBuf = buffer;
int len = size - strLen + 1;

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <501, 506>
if (length > 0) {
            int len = length();
            ensureCapacity(len + length);
            str.getChars(startIndex, startIndex + length, buffer, len);
            size += length;
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <501, 506>
if (length > 0) {
            int len = length();
            ensureCapacity(len + length);
            str.getChars(startIndex, startIndex + length, buffer, len);
            size += length;
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <550, 555>
if (length > 0) {
            int len = length();
            ensureCapacity(len + length);
            str.getChars(startIndex, startIndex + length, buffer, len);
            size += length;
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <550, 555>
if (length > 0) {
            int len = length();
            ensureCapacity(len + length);
            StringBuffer.getChars(startIndex, startIndex + length, buffer, len);
            size += length;
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <599, 604>
if (length > 0) {
            int len = length();
            ensureCapacity(len + length);
            str.getChars(startIndex, startIndex + length, buffer, len);
            size += length;
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <599, 604>
if (length > 0) {
            int len = length();
            ensureCapacity(len + length);
            StrBuilder.getChars(startIndex, startIndex + length, buffer, len);
            size += length;
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <1495, 1497>
if (len < size) {
            delete(len, size);
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <1495, 1497>
if (len < size) {
            delete(len, size);
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <2184, 2186>
if (endIndex > size) {
            endIndex = size;
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <2184, 2186>
if (endIndex > size) {
            endIndex = size;
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <1762, 1764>
if (str == null || startIndex >= size) {
            return -1;
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <1762, 1764>
if (str == null || startIndex >= size) {
            return -1;
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <2079, 2081>
if (this.size != other.size) {
            return false;
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <2079, 2081>
if (StrBuilder.size != StrBuilder.size) {
            return false;
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <2105, 2107>
if (this.size != other.size) {
            return false;
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <2105, 2107>
if (StrBuilder.size != StrBuilder.size) {
            return false;
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <3760, 3762>
if (pads > PAD_LIMIT) {
            return rightPad(str, size, String.valueOf(padChar));
        }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <3760, 3762>
if (pads > PAD_LIMIT) {
            return rightPad(str, size, String.valueOf(padChar));
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <3872, 3874>
if (pads > PAD_LIMIT) {
            return leftPad(str, size, String.valueOf(padChar));
        }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <3872, 3874>
if (pads > PAD_LIMIT) {
            return leftPad(str, size, String.valueOf(padChar));
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <1627, 1631>
if (length >= size) {
            return new String(buffer, 0, size);
        } else {
            return new String(buffer, size - length, length);
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <1627, 1631>
if (length >= size) {
            return new String(buffer, 0, size);
        } else {
            return new String(buffer, size - length, length);
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <228, 232>
if (capacity > buffer.length) {
            char[] old = buffer;
            buffer = new char[capacity];
            System.arraycopy(old, 0, buffer, 0, size);
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <228, 232>
if (capacity > buffer.length) {
            char[] old = buffer;
            buffer = new char[capacity];
            System.arraycopy(old, 0, buffer, 0, size);
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <1050, 1053>
System.arraycopy(buffer, index, buffer, index + 1, size - index);
buffer[index] = value;
size++;
return this;

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <1050, 1053>
System.arraycopy(buffer, index, buffer, index + 1, size - index);
buffer[index] = value;
size++;
return this;

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <1657, 1661>
if (size <= index + length) {
            return new String(buffer, index, size - index);
        } else {
            return new String(buffer, index, length);
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <1657, 1661>
if (size <= index + length) {
            return new String(buffer, index, size - index);
        } else {
            return new String(buffer, index, length);
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <336, 338>
if (index < 0 || index >= size) {
            throw new StringIndexOutOfBoundsException(index);
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <336, 338>
if (index < 0 || index >= size) {
            throw new StringIndexOutOfBoundsException(index);
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <2200, 2202>
if (index < 0 || index > size) {
            throw new StringIndexOutOfBoundsException(index);
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <2200, 2202>
if (index < 0 || index > size) {
            throw new StringIndexOutOfBoundsException(index);
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.time.FastDateFormat <1256, 1261>
if (size < 3) {
                // Should use UnpaddedNumberField or TwoDigitNumberField.
                throw new IllegalArgumentException();
            }
mField = field;
mSize = size;

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.time.FastDateFormat <1256, 1261>
if (size < 3) {
                // Should use UnpaddedNumberField or TwoDigitNumberField.
                throw new IllegalArgumentException();
            }
mField = field;
mSize = size;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <3802, 3804>
if (padLen == 1 && pads <= PAD_LIMIT) {
            return rightPad(str, size, padStr.charAt(0));
        }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <3802, 3804>
if (padLen == 1 && pads <= PAD_LIMIT) {
            return rightPad(str, size, padStr.charAt(0));
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <3914, 3916>
if (padLen == 1 && pads <= PAD_LIMIT) {
            return leftPad(str, size, padStr.charAt(0));
        }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <3914, 3916>
if (padLen == 1 && pads <= PAD_LIMIT) {
            return leftPad(str, size, padStr.charAt(0));
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <1460, 1473>
/**
     * Reverses the string builder placing each character in the opposite index.
     * 
     * @return this, to enable chaining
     */
    public StrBuilder reverse() {
        if (size == 0) {
            return this;
        }
        
        int half = size / 2;
        char[] buf = buffer;
        for (int leftIdx = 0, rightIdx = size - 1; leftIdx < half; leftIdx++,rightIdx--) {
            char swap = buf[leftIdx];
            buf[leftIdx] = buf[rightIdx];
            buf[rightIdx] = swap;
        }
        return this;
    }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <1460, 1473>
/**
     * Reverses the string builder placing each character in the opposite index.
     * 
     * @return this, to enable chaining
     */
    public StrBuilder reverse() {
        if (size == 0) {
            return this;
        }
        
        int half = size / 2;
        char[] buf = buffer;
        for (int leftIdx = 0, rightIdx = size - 1; leftIdx < half; leftIdx++,rightIdx--) {
            char swap = buf[leftIdx];
            buf[leftIdx] = buf[rightIdx];
            buf[rightIdx] = swap;
        }
        return this;
    }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <571, 576>
if (strLen > 0) {
            int len = length();
            ensureCapacity(len + strLen);
            System.arraycopy(str.buffer, 0, buffer, len, strLen);
            size += strLen;
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <571, 576>
if (strLen > 0) {
            int len = length();
            ensureCapacity(len + strLen);
            System.arraycopy(StrBuilder.buffer, 0, buffer, len, strLen);
            size += strLen;
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <620, 625>
if (strLen > 0) {
            int len = length();
            ensureCapacity(len + strLen);
            System.arraycopy(chars, 0, buffer, len, strLen);
            size += strLen;
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <620, 625>
if (strLen > 0) {
            int len = length();
            ensureCapacity(len + strLen);
            System.arraycopy(chars, 0, buffer, len, strLen);
            size += strLen;
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <368, 377>
/**
     * Copies part of the builder's character array into a new character array.
     * 
     * @param startIndex  the start index, inclusive, must be valid
     * @param endIndex  the end index, exclusive, must be valid except that
     *  if too large it is treated as end of string
     * @return a new array that holds part of the contents of the builder
     * @throws IndexOutOfBoundsException if startIndex is invalid,
     *  or if endIndex is invalid (but endIndex greater than size is valid)
     */
    public char[] toCharArray(int startIndex, int endIndex) {
        endIndex = validateRange(startIndex, endIndex);
        int len = endIndex - startIndex;
        if (len == 0) {
            return ArrayUtils.EMPTY_CHAR_ARRAY;
        }
        char chars[] = new char[len];
        System.arraycopy(buffer, startIndex, chars, 0, len);
        return chars;
    }

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.text.StrBuilder <368, 377>
/**
     * Copies part of the builder's character array into a new character array.
     * 
     * @param startIndex  the start index, inclusive, must be valid
     * @param endIndex  the end index, exclusive, must be valid except that
     *  if too large it is treated as end of string
     * @return a new array that holds part of the contents of the builder
     * @throws IndexOutOfBoundsException if startIndex is invalid,
     *  or if endIndex is invalid (but endIndex greater than size is valid)
     */
    public char[] toCharArray(int startIndex, int endIndex) {
        intVar = validateRange(intVar, intVar);
        int len = intVar - intVar;
        if (len == 0) {
            return ArrayUtils.EMPTY_CHAR_ARRAY;
        }
        char chars[] = new char[len];
        System.arraycopy(char[]Var, intVar, chars, 0, len);
        return chars;
    }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <368, 377>
/**
     * Copies part of the builder's character array into a new character array.
     * 
     * @param startIndex  the start index, inclusive, must be valid
     * @param endIndex  the end index, exclusive, must be valid except that
     *  if too large it is treated as end of string
     * @return a new array that holds part of the contents of the builder
     * @throws IndexOutOfBoundsException if startIndex is invalid,
     *  or if endIndex is invalid (but endIndex greater than size is valid)
     */
    public char[] toCharArray(int startIndex, int endIndex) {
        endIndex = validateRange(startIndex, endIndex);
        int len = endIndex - startIndex;
        if (len == 0) {
            return ArrayUtils.EMPTY_CHAR_ARRAY;
        }
        char chars[] = new char[len];
        System.arraycopy(buffer, startIndex, chars, 0, len);
        return chars;
    }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <999, 1004>
if (length > 0) {
            ensureCapacity(size + length);
            System.arraycopy(buffer, index, buffer, index + length, size - index);
            System.arraycopy(chars, offset, buffer, index, length);
            size += length;
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <999, 1004>
if (length > 0) {
            ensureCapacity(size + length);
            System.arraycopy(buffer, index, buffer, index + length, size - index);
            System.arraycopy(chars, offset, buffer, index, length);
            size += length;
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <1605, 1609>
if (length >= size) {
            return new String(buffer, 0, size);
        } else {
            return new String(buffer, 0, length);
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <1605, 1609>
if (length >= size) {
            return new String(buffer, 0, size);
        } else {
            return new String(buffer, 0, length);
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <473, 478>
if (strLen > 0) {
            int len = length();
            ensureCapacity(len + strLen);
            str.getChars(0, strLen, buffer, len);
            size += strLen;
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <473, 478>
if (strLen > 0) {
            int len = length();
            ensureCapacity(len + strLen);
            str.getChars(0, strLen, buffer, len);
            size += strLen;
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <522, 527>
if (strLen > 0) {
            int len = length();
            ensureCapacity(len + strLen);
            str.getChars(0, strLen, buffer, len);
            size += strLen;
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <522, 527>
if (strLen > 0) {
            int len = length();
            ensureCapacity(len + strLen);
            StringBuffer.getChars(0, strLen, buffer, len);
            size += strLen;
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <968, 973>
if (len > 0) {
            ensureCapacity(size + len);
            System.arraycopy(buffer, index, buffer, index + len, size - index);
            System.arraycopy(chars, 0, buffer, index, len);
            size += len;
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <968, 973>
if (len > 0) {
            ensureCapacity(size + len);
            System.arraycopy(buffer, index, buffer, index + len, size - index);
            System.arraycopy(chars, 0, buffer, index, len);
            size += len;
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <943, 949>
if (strLen > 0) {
            int newSize = size + strLen;
            ensureCapacity(newSize);
            System.arraycopy(buffer, index, buffer, index + strLen, size - index);
            size = newSize;
            str.getChars(0, strLen, buffer, index);
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <943, 949>
if (strLen > 0) {
            int newSize = size + strLen;
            ensureCapacity(newSize);
            System.arraycopy(buffer, index, buffer, index + strLen, size - index);
            size = newSize;
            str.getChars(0, strLen, buffer, index);
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <3985, 3997>
/**
     * <p>Centers a String in a larger String of size <code>size</code>.
     * Uses a supplied character as the value to pad the String with.</p>
     *
     * <p>If the size is less than the String length, the String is returned.
     * A <code>null</code> String returns <code>null</code>.
     * A negative size is treated as zero.</p>
     *
     * <pre>
     * StringUtils.center(null, *, *)     = null
     * StringUtils.center("", 4, ' ')     = "    "
     * StringUtils.center("ab", -1, ' ')  = "ab"
     * StringUtils.center("ab", 4, ' ')   = " ab"
     * StringUtils.center("abcd", 2, ' ') = "abcd"
     * StringUtils.center("a", 4, ' ')    = " a  "
     * StringUtils.center("a", 4, 'y')    = "yayy"
     * </pre>
     *
     * @param str  the String to center, may be null
     * @param size  the int size of new String, negative treated as zero
     * @param padChar  the character to pad the new String with
     * @return centered String, <code>null</code> if null String input
     * @since 2.0
     */
    public static String center(String str, int size, char padChar) {
        if (str == null || size <= 0) {
            return str;
        }
        int strLen = str.length();
        int pads = size - strLen;
        if (pads <= 0) {
            return str;
        }
        str = leftPad(str, strLen + pads / 2, padChar);
        str = rightPad(str, size, padChar);
        return str;
    }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringUtils <3985, 3997>
/**
     * <p>Centers a String in a larger String of size <code>size</code>.
     * Uses a supplied character as the value to pad the String with.</p>
     *
     * <p>If the size is less than the String length, the String is returned.
     * A <code>null</code> String returns <code>null</code>.
     * A negative size is treated as zero.</p>
     *
     * <pre>
     * StringUtils.center(null, *, *)     = null
     * StringUtils.center("", 4, ' ')     = "    "
     * StringUtils.center("ab", -1, ' ')  = "ab"
     * StringUtils.center("ab", 4, ' ')   = " ab"
     * StringUtils.center("abcd", 2, ' ') = "abcd"
     * StringUtils.center("a", 4, ' ')    = " a  "
     * StringUtils.center("a", 4, 'y')    = "yayy"
     * </pre>
     *
     * @param str  the String to center, may be null
     * @param size  the int size of new String, negative treated as zero
     * @param padChar  the character to pad the new String with
     * @return centered String, <code>null</code> if null String input
     * @since 2.0
     */
    public static String center(String str, int size, char padChar) {
        if (StringVar == null || intVar <= 0) {
            return StringVar;
        }
        int strLen = StringVar.length();
        int pads = intVar - strLen;
        if (pads <= 0) {
            return StringVar;
        }
        StringVar = leftPad(StringVar, strLen + pads / 2, charVar);
        StringVar = rightPad(StringVar, intVar, charVar);
        return StringVar;
    }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <3985, 3997>
/**
     * <p>Centers a String in a larger String of size <code>size</code>.
     * Uses a supplied character as the value to pad the String with.</p>
     *
     * <p>If the size is less than the String length, the String is returned.
     * A <code>null</code> String returns <code>null</code>.
     * A negative size is treated as zero.</p>
     *
     * <pre>
     * StringUtils.center(null, *, *)     = null
     * StringUtils.center("", 4, ' ')     = "    "
     * StringUtils.center("ab", -1, ' ')  = "ab"
     * StringUtils.center("ab", 4, ' ')   = " ab"
     * StringUtils.center("abcd", 2, ' ') = "abcd"
     * StringUtils.center("a", 4, ' ')    = " a  "
     * StringUtils.center("a", 4, 'y')    = "yayy"
     * </pre>
     *
     * @param str  the String to center, may be null
     * @param size  the int size of new String, negative treated as zero
     * @param padChar  the character to pad the new String with
     * @return centered String, <code>null</code> if null String input
     * @since 2.0
     */
    public static String center(String str, int size, char padChar) {
        if (str == null || size <= 0) {
            return str;
        }
        int strLen = str.length();
        int pads = size - strLen;
        if (pads <= 0) {
            return str;
        }
        str = leftPad(str, strLen + pads / 2, padChar);
        str = rightPad(str, size, padChar);
        return str;
    }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <1521, 1523>
if (len > size) {
            return false;
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <1521, 1523>
if (len > size) {
            return false;
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.Entities <582, 590>
if (capacity > names.length) {
                int newSize = Math.max(capacity, size + growBy);
                String[] newNames = new String[newSize];
                System.arraycopy(names, 0, newNames, 0, size);
                names = newNames;
                int[] newValues = new int[newSize];
                System.arraycopy(values, 0, newValues, 0, size);
                values = newValues;
            }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.Entities <582, 590>
if (capacity > names.length) {
                int newSize = Math.max(capacity, size + growBy);
                String[] newNames = new String[newSize];
                System.arraycopy(names, 0, newNames, 0, size);
                names = newNames;
                int[] newValues = new int[newSize];
                System.arraycopy(values, 0, newValues, 0, size);
                values = newValues;
            }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <242, 246>
if (buffer.length > length()) {
            char[] old = buffer;
            buffer = new char[length()];
            System.arraycopy(old, 0, buffer, 0, size);
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <242, 246>
if (buffer.length > length()) {
            char[] old = buffer;
            buffer = new char[length()];
            System.arraycopy(old, 0, buffer, 0, size);
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <1545, 1551>
if (len == 0) {
            return true;
        }
if (len > size) {
            return false;
        }
int pos = size - len;

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <1545, 1551>
if (len == 0) {
            return true;
        }
if (len > size) {
            return false;
        }
int pos = size - len;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.StringUtils <4025, 4040>
/**
     * <p>Centers a String in a larger String of size <code>size</code>.
     * Uses a supplied String as the value to pad the String with.</p>
     *
     * <p>If the size is less than the String length, the String is returned.
     * A <code>null</code> String returns <code>null</code>.
     * A negative size is treated as zero.</p>
     *
     * <pre>
     * StringUtils.center(null, *, *)     = null
     * StringUtils.center("", 4, " ")     = "    "
     * StringUtils.center("ab", -1, " ")  = "ab"
     * StringUtils.center("ab", 4, " ")   = " ab"
     * StringUtils.center("abcd", 2, " ") = "abcd"
     * StringUtils.center("a", 4, " ")    = " a  "
     * StringUtils.center("a", 4, "yz")   = "yayz"
     * StringUtils.center("abc", 7, null) = "  abc  "
     * StringUtils.center("abc", 7, "")   = "  abc  "
     * </pre>
     *
     * @param str  the String to center, may be null
     * @param size  the int size of new String, negative treated as zero
     * @param padStr  the String to pad the new String with, must not be null or empty
     * @return centered String, <code>null</code> if null String input
     * @throws IllegalArgumentException if padStr is <code>null</code> or empty
     */
    public static String center(String str, int size, String padStr) {
        if (str == null || size <= 0) {
            return str;
        }
        if (isEmpty(padStr)) {
            padStr = " ";
        }
        int strLen = str.length();
        int pads = size - strLen;
        if (pads <= 0) {
            return str;
        }
        str = leftPad(str, strLen + pads / 2, padStr);
        str = rightPad(str, size, padStr);
        return str;
    }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.StringUtils <4025, 4040>
/**
     * <p>Centers a String in a larger String of size <code>size</code>.
     * Uses a supplied String as the value to pad the String with.</p>
     *
     * <p>If the size is less than the String length, the String is returned.
     * A <code>null</code> String returns <code>null</code>.
     * A negative size is treated as zero.</p>
     *
     * <pre>
     * StringUtils.center(null, *, *)     = null
     * StringUtils.center("", 4, " ")     = "    "
     * StringUtils.center("ab", -1, " ")  = "ab"
     * StringUtils.center("ab", 4, " ")   = " ab"
     * StringUtils.center("abcd", 2, " ") = "abcd"
     * StringUtils.center("a", 4, " ")    = " a  "
     * StringUtils.center("a", 4, "yz")   = "yayz"
     * StringUtils.center("abc", 7, null) = "  abc  "
     * StringUtils.center("abc", 7, "")   = "  abc  "
     * </pre>
     *
     * @param str  the String to center, may be null
     * @param size  the int size of new String, negative treated as zero
     * @param padStr  the String to pad the new String with, must not be null or empty
     * @return centered String, <code>null</code> if null String input
     * @throws IllegalArgumentException if padStr is <code>null</code> or empty
     */
    public static String center(String str, int size, String padStr) {
        if (StringVar == null || intVar <= 0) {
            return StringVar;
        }
        if (isEmpty(StringVar)) {
            StringVar = " ";
        }
        int strLen = StringVar.length();
        int pads = intVar - strLen;
        if (pads <= 0) {
            return StringVar;
        }
        StringVar = leftPad(StringVar, strLen + pads / 2, StringVar);
        StringVar = rightPad(StringVar, intVar, StringVar);
        return StringVar;
    }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.StringUtils <4025, 4040>
/**
     * <p>Centers a String in a larger String of size <code>size</code>.
     * Uses a supplied String as the value to pad the String with.</p>
     *
     * <p>If the size is less than the String length, the String is returned.
     * A <code>null</code> String returns <code>null</code>.
     * A negative size is treated as zero.</p>
     *
     * <pre>
     * StringUtils.center(null, *, *)     = null
     * StringUtils.center("", 4, " ")     = "    "
     * StringUtils.center("ab", -1, " ")  = "ab"
     * StringUtils.center("ab", 4, " ")   = " ab"
     * StringUtils.center("abcd", 2, " ") = "abcd"
     * StringUtils.center("a", 4, " ")    = " a  "
     * StringUtils.center("a", 4, "yz")   = "yayz"
     * StringUtils.center("abc", 7, null) = "  abc  "
     * StringUtils.center("abc", 7, "")   = "  abc  "
     * </pre>
     *
     * @param str  the String to center, may be null
     * @param size  the int size of new String, negative treated as zero
     * @param padStr  the String to pad the new String with, must not be null or empty
     * @return centered String, <code>null</code> if null String input
     * @throws IllegalArgumentException if padStr is <code>null</code> or empty
     */
    public static String center(String str, int size, String padStr) {
        if (str == null || size <= 0) {
            return str;
        }
        if (isEmpty(padStr)) {
            padStr = " ";
        }
        int strLen = str.length();
        int pads = size - strLen;
        if (pads <= 0) {
            return str;
        }
        str = leftPad(str, strLen + pads / 2, padStr);
        str = rightPad(str, size, padStr);
        return str;
    }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <349, 356>
/**
     * Copies the builder's character array into a new character array.
     * 
     * @return a new array that represents the contents of the builder
     */
    public char[] toCharArray() {
        if (size == 0) {
            return ArrayUtils.EMPTY_CHAR_ARRAY;
        }
        char chars[] = new char[size];
        System.arraycopy(buffer, 0, chars, 0, size);
        return chars;
    }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <349, 356>
/**
     * Copies the builder's character array into a new character array.
     * 
     * @return a new array that represents the contents of the builder
     */
    public char[] toCharArray() {
        if (size == 0) {
            return ArrayUtils.EMPTY_CHAR_ARRAY;
        }
        char chars[] = new char[size];
        System.arraycopy(buffer, 0, chars, 0, size);
        return chars;
    }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.Entities <666, 678>
/**
         * {@inheritDoc}
         */
        public void add(String name, int value) {
            ensureCapacity(size + 1);
            int insertAt = binarySearch(value);
            if (insertAt > 0) {
                return;    // note: this means you can't insert the same value twice
            }
            insertAt = -(insertAt + 1);  // binarySearch returns it negative and off-by-one
            System.arraycopy(values, insertAt, values, insertAt + 1, size - insertAt);
            values[insertAt] = value;
            System.arraycopy(names, insertAt, names, insertAt + 1, size - insertAt);
            names[insertAt] = name;
            size++;
        }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.Entities <666, 678>
/**
         * {@inheritDoc}
         */
        public void add(String name, int value) {
            ensureCapacity(size + 1);
            int insertAt = binarySearch(intVar);
            if (insertAt > 0) {
                return;    // note: this means you can't insert the same value twice
            }
            insertAt = -(insertAt + 1);  // binarySearch returns it negative and off-by-one
            System.arraycopy(values, insertAt, values, insertAt + 1, size - insertAt);
            values[insertAt] = intVar;
            System.arraycopy(names, insertAt, names, insertAt + 1, size - insertAt);
            names[insertAt] = StringVar;
            size++;
        }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.Entities <666, 678>
/**
         * {@inheritDoc}
         */
        public void add(String name, int value) {
            ensureCapacity(size + 1);
            int insertAt = binarySearch(value);
            if (insertAt > 0) {
                return;    // note: this means you can't insert the same value twice
            }
            insertAt = -(insertAt + 1);  // binarySearch returns it negative and off-by-one
            System.arraycopy(values, insertAt, values, insertAt + 1, size - insertAt);
            values[insertAt] = value;
            System.arraycopy(names, insertAt, names, insertAt + 1, size - insertAt);
            names[insertAt] = name;
            size++;
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <1654, 1656>
if (length <= 0 || index >= size) {
            return "";
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <1654, 1656>
if (length <= 0 || index >= size) {
            return "";
        }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrTokenizer <765, 782>
if (isQuote(chars, pos, len, quoteStart, quoteLen)) {
                    if (isQuote(chars, pos + quoteLen, len, quoteStart, quoteLen)) {
                        // matched pair of quotes, thus an escaped quote
                        workArea.append(chars, pos, quoteLen);
                        pos += (quoteLen * 2);
                        trimStart = workArea.size();
                        continue;
                    }
                    
                    // end of quoting
                    quoting = false;
                    pos += quoteLen;
                    continue;
                }
empty line
// copy regular character from inside quotes
workArea.append(chars[pos++]);
trimStart = workArea.size();

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.text.StrTokenizer <765, 782>
if (isQuote(char[]Var, intVar, intVar, intVar, intVar)) {
                    if (isQuote(char[]Var, intVar + intVar, intVar, intVar, intVar)) {
                        // matched pair of quotes, thus an escaped quote
                        StrBuilder.append(char[]Var, intVar, intVar);
                        intVar += (intVar * 2);
                        intVar = StrBuilder.size();
                        continue;
                    }
                    
                    // end of quoting
                    booleanVar = false;
                    intVar += intVar;
                    continue;
                }
empty line
// copy regular character from inside quotes
StrBuilder.append(char[]Var[intVar++]);
intVar = StrBuilder.size();

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrTokenizer <765, 782>
if (isQuote(chars, pos, len, quoteStart, quoteLen)) {
                    if (isQuote(chars, pos + quoteLen, len, quoteStart, quoteLen)) {
                        // matched pair of quotes, thus an escaped quote
                        StrBuilder.append(chars, pos, quoteLen);
                        pos += (quoteLen * 2);
                        trimStart = StrBuilder.size();
                        continue;
                    }
                    
                    // end of quoting
                    quoting = false;
                    pos += quoteLen;
                    continue;
                }
empty line
// copy regular character from inside quotes
StrBuilder.append(chars[pos++]);
trimStart = StrBuilder.size();

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <2276, 2281>
if (pos + len > size()) {
                len = StrBuilder.this.size() - pos;
            }
StrBuilder.this.getChars(pos, pos + len, b, off);
pos += len;
return len;

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.text.StrBuilder <2276, 2281>
if (intVar + intVar > size()) {
                intVar = StrBuilder.Reader.size() - intVar;
            }
StrBuilder.Reader.getChars(intVar, intVar + intVar, charVar, intVar);
intVar += intVar;
return intVar;

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <2276, 2281>
if (pos + len > size()) {
                len = StrBuilder.Reader.size() - pos;
            }
StrBuilder.Reader.getChars(pos, pos + len, b, off);
pos += len;
return len;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.exception.ExceptionUtils <820, 837>
/**
     * <p>Removes common frames from the cause trace given the two stack traces.</p>
     *
     * @param causeFrames  stack trace of a cause throwable
     * @param wrapperFrames  stack trace of a wrapper throwable
     * @throws IllegalArgumentException if either argument is null
     * @since 2.0
     */
    public static void removeCommonFrames(List causeFrames, List wrapperFrames) {
        if (causeFrames == null || wrapperFrames == null) {
            throw new IllegalArgumentException("The List must not be null");
        }
        int causeFrameIndex = causeFrames.size() - 1;
        int wrapperFrameIndex = wrapperFrames.size() - 1;
        while (causeFrameIndex >= 0 && wrapperFrameIndex >= 0) {
            // Remove the frame from the cause trace if it is the same
            // as in the wrapper trace
            String causeFrame = (String) causeFrames.get(causeFrameIndex);
            String wrapperFrame = (String) wrapperFrames.get(wrapperFrameIndex);
            if (causeFrame.equals(wrapperFrame)) {
                causeFrames.remove(causeFrameIndex);
            }
            causeFrameIndex--;
            wrapperFrameIndex--;
        }
    }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.exception.ExceptionUtils <820, 837>
/**
     * <p>Removes common frames from the cause trace given the two stack traces.</p>
     *
     * @param causeFrames  stack trace of a cause throwable
     * @param wrapperFrames  stack trace of a wrapper throwable
     * @throws IllegalArgumentException if either argument is null
     * @since 2.0
     */
    public static void removeCommonFrames(List causeFrames, List wrapperFrames) {
        if (ListVar == null || ListVar == null) {
            throw new IllegalArgumentException("The List must not be null");
        }
        int causeFrameIndex = ListVar.size() - 1;
        int wrapperFrameIndex = ListVar.size() - 1;
        while (causeFrameIndex >= 0 && wrapperFrameIndex >= 0) {
            // Remove the frame from the cause trace if it is the same
            // as in the wrapper trace
            String causeFrame = (String) ListVar.get(causeFrameIndex);
            String wrapperFrame = (String) ListVar.get(wrapperFrameIndex);
            if (causeFrame.equals(wrapperFrame)) {
                ListVar.remove(causeFrameIndex);
            }
            causeFrameIndex--;
            wrapperFrameIndex--;
        }
    }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.exception.ExceptionUtils <820, 837>
/**
     * <p>Removes common frames from the cause trace given the two stack traces.</p>
     *
     * @param causeFrames  stack trace of a cause throwable
     * @param wrapperFrames  stack trace of a wrapper throwable
     * @throws IllegalArgumentException if either argument is null
     * @since 2.0
     */
    public static void removeCommonFrames(List causeFrames, List wrapperFrames) {
        if (causeFrames == null || wrapperFrames == null) {
            throw new IllegalArgumentException("The List must not be null");
        }
        int causeFrameIndex = causeFrames.size() - 1;
        int wrapperFrameIndex = wrapperFrames.size() - 1;
        while (causeFrameIndex >= 0 && wrapperFrameIndex >= 0) {
            // Remove the frame from the cause trace if it is the same
            // as in the wrapper trace
            String causeFrame = (String) causeFrames.get(causeFrameIndex);
            String wrapperFrame = (String) wrapperFrames.get(wrapperFrameIndex);
            if (causeFrame.equals(wrapperFrame)) {
                causeFrames.remove(causeFrameIndex);
            }
            causeFrameIndex--;
            wrapperFrameIndex--;
        }
    }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.builder.ToStringStyle <351, 355>
if (detail) {
                appendDetail(buffer, fieldName, (Collection) value);
            } else {
                appendSummarySize(buffer, fieldName, ((Collection) value).size());
            }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.builder.ToStringStyle <351, 355>
if (booleanVar) {
                appendDetail(StringBuffer, StringVar, (Collection) Object);
            } else {
                appendSummarySize(StringBuffer, StringVar, ((Collection) Object).size());
            }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.builder.ToStringStyle <351, 355>
if (detail) {
                appendDetail(StringBuffer, fieldName, (Collection) Object);
            } else {
                appendSummarySize(StringBuffer, fieldName, ((Collection) Object).size());
            }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.builder.ToStringStyle <358, 362>
if (detail) {
                appendDetail(buffer, fieldName, (Map) value);
            } else {
                appendSummarySize(buffer, fieldName, ((Map) value).size());
            }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.builder.ToStringStyle <358, 362>
if (booleanVar) {
                appendDetail(StringBuffer, StringVar, (Map) Object);
            } else {
                appendSummarySize(StringBuffer, StringVar, ((Map) Object).size());
            }

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.builder.ToStringStyle <358, 362>
if (detail) {
                appendDetail(StringBuffer, fieldName, (Map) Object);
            } else {
                appendSummarySize(StringBuffer, fieldName, ((Map) Object).size());
            }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <2218, 2222>
if (chars == null) {
                return super.tokenize(StrBuilder.this.buffer, 0, StrBuilder.this.size());
            } else {
                return super.tokenize(chars, offset, count);
            }

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.text.StrBuilder <2218, 2222>
if (char[]Var == null) {
                return super.tokenize(StrBuilder.StrTokenizer.buffer, 0, StrBuilder.StrTokenizer.size());
            } else {
                return super.tokenize(char[]Var, intVar, intVar);
            }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <2218, 2222>
if (chars == null) {
                return super.tokenize(StrBuilder.StrTokenizer.buffer, 0, StrBuilder.StrTokenizer.size());
            } else {
                return super.tokenize(chars, offset, count);
            }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <768, 777>
if (coll != null && coll.size() > 0) {
            separator = (separator == null ? "" : separator);
            Iterator it = coll.iterator();
            while (it.hasNext()) {
                append(it.next());
                if (it.hasNext()) {
                    append(separator);
                }
            }
        }

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.text.StrBuilder <768, 777>
if (Collection != null && Collection.size() > 0) {
            StringVar = (StringVar == null ? "" : StringVar);
            Iterator it = Collection.iterator();
            while (it.hasNext()) {
                append(it.next());
                if (it.hasNext()) {
                    append(StringVar);
                }
            }
        }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <768, 777>
if (Collection != null && Collection.size() > 0) {
            separator = (separator == null ? "" : separator);
            Iterator it = Collection.iterator();
            while (it.hasNext()) {
                append(it.next());
                if (it.hasNext()) {
                    append(separator);
                }
            }
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrBuilder <2286, 2288>
if (pos + n > StrBuilder.this.size()) {
                n = StrBuilder.this.size() - pos;
            }

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.text.StrBuilder <2286, 2288>
if (intVar + longVar > StrBuilder.Reader.size()) {
                longVar = StrBuilder.Reader.size() - intVar;
            }

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrBuilder <2286, 2288>
if (pos + n > StrBuilder.Reader.size()) {
                n = StrBuilder.Reader.size() - pos;
            }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.lang.text.StrTokenizer <612, 621>
if (tokens == null) {
            if (chars == null) {
                // still call tokenize as subclass may do some work
                List split = tokenize(null, 0, 0);
                tokens = (String[]) split.toArray(new String[split.size()]);
            } else {
                List split = tokenize(chars, 0, chars.length);
                tokens = (String[]) split.toArray(new String[split.size()]);
            }
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.lang.text.StrTokenizer <612, 621>
if (StringVar == null) {
            if (charVar == null) {
                // still call tokenize as subclass may do some work
                List split = tokenize(null, 0, 0);
                StringVar = (String[]) split.toArray(new String[split.size()]);
            } else {
                List split = tokenize(charVar, 0, charVar.length);
                StringVar = (String[]) split.toArray(new String[split.size()]);
            }
        }

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.apache.commons.lang.text.StrTokenizer <612, 621>
if (tokens == null) {
            if (chars == null) {
                // still call tokenize as subclass may do some work
                List split = tokenize(null, 0, 0);
                tokens = (String[]) split.toArray(new String[split.size()]);
            } else {
                List split = tokenize(chars, 0, chars.length);
                tokens = (String[]) split.toArray(new String[split.size()]);
            }
        }

