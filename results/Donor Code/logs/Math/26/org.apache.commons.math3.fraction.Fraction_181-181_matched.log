---patch code ori--- org.apache.commons.math3.fraction.Fraction <181, 183>
if (FastMath.abs(a0) > overflow) {
            throw new FractionConversionException(value, a0, 1l);
        }

---fix ingredient(SameMethod)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math3.fraction.Fraction <187, 191>
if (FastMath.abs(a0 - value) < epsilon) {
            this.numerator = (int) a0;
            this.denominator = 1;
            return;
        }

---patch code 0--- org.apache.commons.math3.fraction.Fraction <181, 183>
if (FastMath.abs(longVar) > longVar) {
            throw new FractionConversionException(doubleVar, longVar, 1l);
        }

---fix ingredient(SameMethod)  <0-fine-grained>  varMapType:0--- org.apache.commons.math3.fraction.Fraction <187, 191>
if (FastMath.abs(longVar - doubleVar) < doubleVar) {
            Number.intVar = (int) longVar;
            Number.intVar = 1;
            return;
        }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math3.fraction.BigFraction <281, 285>
if (FastMath.abs(a0 - value) < epsilon) {
            numerator = BigInteger.valueOf(a0);
            denominator = BigInteger.ONE;
            return;
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math3.fraction.BigFraction <281, 285>
if (FastMath.abs(longVar - doubleVar) < doubleVar) {
            BigInteger = BigInteger.valueOf(longVar);
            BigInteger = BigInteger.Number;
            return;
        }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math3.util.ArithmeticUtils <475, 479>
if ((longVar == Long.MIN_VALUE) || (longVar == Long.MIN_VALUE)){
                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,
                                                  longVar, longVar);
            }
return FastMath.abs(longVar) + FastMath.abs(longVar);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math3.util.Precision <307, 313>
if (longVar < 0) {
            longVar = longVar - longVar;
        }
empty line
final boolean booleanVar = FastMath.abs(longVar - longVar) <= intVar;
empty line
return booleanVar && !Double.isNaN(doubleVar) && !Double.isNaN(doubleVar);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math3.util.ArithmeticUtils <585, 595>
/**
     * <p>
     * Returns the least common multiple of the absolute value of two numbers,
     * using the formula {@code lcm(a,b) = (a / gcd(a,b)) * b}.
     * </p>
     * Special cases:
     * <ul>
     * <li>The invocations {@code lcm(Long.MIN_VALUE, n)} and
     * {@code lcm(n, Long.MIN_VALUE)}, where {@code abs(n)} is a
     * power of 2, throw an {@code ArithmeticException}, because the result
     * would be 2^63, which is too large for an int value.</li>
     * <li>The result of {@code lcm(0L, x)} and {@code lcm(x, 0L)} is
     * {@code 0L} for any {@code x}.
     * </ul>
     *
     * @param a Number.
     * @param b Number.
     * @return the least common multiple, never negative.
     * @throws MathArithmeticException if the result cannot be represented
     * as a non-negative {@code long} value.
     * @since 2.1
     */
    public static long lcm(long a, long b) {
        if (longVar == 0 || longVar == 0){
            return 0;
        }
        long lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(longVar / gcd(longVar, longVar), longVar));
        if (lcm == Long.MIN_VALUE){
            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,
                                              longVar, longVar);
        }
        return lcm;
    }

