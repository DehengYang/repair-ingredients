---patch code ori--- org.apache.commons.math.analysis.solvers.BrentSolver <115, 115>
setResult(min, 0);

---fix ingredient(SameFile)  varMapType:ori--- org.apache.commons.math.analysis.solvers.BrentSolver <181, 181>
setResult(min, 0);

---patch code 0--- org.apache.commons.math.analysis.solvers.BrentSolver <115, 115>
setResult(doubleVar, 0);

---fix ingredient(SameFile)  varMapType:0--- org.apache.commons.math.analysis.solvers.BrentSolver <181, 181>
setResult(doubleVar, 0);

---patch code 1--- org.apache.commons.math.analysis.solvers.BrentSolver <115, 115>
setResult(min, 0);

---fix ingredient(SameFile)  varMapType:1--- org.apache.commons.math.analysis.solvers.BrentSolver <181, 181>
setResult(min, 0);

---fix ingredient(SameMethod)  varMapType:0--- org.apache.commons.math.analysis.solvers.BrentSolver <108, 108>
setResult(doubleVar, 0);

---fix ingredient(SameMethod)  varMapType:0--- org.apache.commons.math.analysis.solvers.BrentSolver <115, 115>
setResult(doubleVar, 0);

---fix ingredient(SameMethod)  varMapType:0--- org.apache.commons.math.analysis.solvers.BrentSolver <127, 127>
setResult(doubleVar, 0);

---fix ingredient(SameFile)  varMapType:0--- org.apache.commons.math.analysis.solvers.BrentSolver <184, 184>
setResult(doubleVar, 0);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <76, 76>
setResult(doubleVar, 1);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.NewtonSolver <122, 122>
setResult(doubleVar, intVar);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.BrentSolver <247, 247>
setResult(doubleVar, intVar);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.BrentSolver <254, 254>
setResult(doubleVar, intVar);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.BisectionSolver <101, 101>
setResult(doubleVar, intVar);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <180, 180>
setResult(doubleVar, intVar);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <184, 184>
setResult(doubleVar, intVar);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <334, 334>
setResult(doubleVar, intVar);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <338, 338>
setResult(doubleVar, intVar);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.RiddersSolver <149, 149>
setResult(doubleVar, intVar);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.RiddersSolver <161, 161>
setResult(doubleVar, intVar);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.RiddersSolver <165, 165>
setResult(doubleVar, intVar);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.SecantSolver <149, 149>
setResult(doubleVar, intVar);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.SecantSolver <154, 154>
setResult(doubleVar, intVar);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <90, 90>
setResult(doubleVar, intVar);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.RombergIntegrator <100, 100>
setResult(doubleVar, intVar);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.TrapezoidIntegrator <122, 122>
setResult(doubleVar, intVar);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.LegendreGaussIntegrator <188, 188>
setResult(doubleVar, intVar);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.optimization.univariate.BrentOptimizer <180, 180>
setResult(doubleVar, (null == GoalType.MAXIMIZE) ? -doubleVar : doubleVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.stat.descriptive.AggregateSummaryStatistics <311, 311>
double min = current.getMin();

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.stat.descriptive.AggregateSummaryStatistics <311, 311>
double doubleVar = SummaryStatistics.getMin();

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.stat.descriptive.AggregateSummaryStatistics <311, 311>
double min = SummaryStatistics.getMin();

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.BrentSolver <169, 169>
verifyInterval(min, max);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.BrentSolver <169, 169>
verifyInterval(doubleVar, doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.BisectionSolver <80, 80>
verifyInterval(min,max);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.BisectionSolver <80, 80>
verifyInterval(doubleVar,doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.SecantSolver <115, 115>
verifyInterval(min, max);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.SecantSolver <115, 115>
verifyInterval(doubleVar, doubleVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <70, 70>
verifyInterval(min, max);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <70, 70>
verifyInterval(doubleVar, doubleVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.integration.RombergIntegrator <75, 75>
verifyInterval(min, max);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.RombergIntegrator <75, 75>
verifyInterval(doubleVar, doubleVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.integration.TrapezoidIntegrator <111, 111>
verifyInterval(min, max);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.TrapezoidIntegrator <111, 111>
verifyInterval(doubleVar, doubleVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.integration.LegendreGaussIntegrator <168, 168>
verifyInterval(min, max);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.LegendreGaussIntegrator <168, 168>
verifyInterval(doubleVar, doubleVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.transform.FastFourierTransformer <454, 454>
verifyInterval(min, max);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.transform.FastFourierTransformer <454, 454>
verifyInterval(doubleVar, doubleVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.stat.descriptive.AggregateSummaryStatistics <319, 319>
min = current.getMin();

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.stat.descriptive.AggregateSummaryStatistics <319, 319>
doubleVar = SummaryStatistics.getMin();

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.random.EmpiricalDistributionImpl <323, 323>
min = sampleStats.getMin();

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.random.EmpiricalDistributionImpl <323, 323>
doubleVar = SummaryStatistics.getMin();

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.BisectionSolver <72, 72>
return solve(min, max);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.BisectionSolver <72, 72>
return solve(doubleVar, doubleVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SummaryStatistics <692, 692>
Min.copy(source.min, dest.min);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.LaguerreSolver <187, 187>
Complex initial = new Complex(0.5 * (min + max), 0.0);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.LaguerreSolver <187, 187>
Complex Complex = new Complex(0.5 * (doubleVar + doubleVar), 0.0);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.MullerSolver <96, 96>
if (f.value(min) == 0.0) { return min; }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <96, 96>
if (UnivariateRealFunction.value(doubleVar) == 0.0) { return doubleVar; }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.RiddersSolver <94, 94>
if (f.value(min) == 0.0) { return min; }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.RiddersSolver <94, 94>
if (UnivariateRealFunction.value(doubleVar) == 0.0) { return doubleVar; }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.LaguerreSolver <129, 131>
if (f.value(min) == 0.0) {
            return min;
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.LaguerreSolver <129, 131>
if (UnivariateRealFunction.value(doubleVar) == 0.0) {
            return doubleVar;
        }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.LaguerreSolver <178, 178>
if (f.value(min) == 0.0) { return min; }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.LaguerreSolver <178, 178>
if (UnivariateRealFunction.value(doubleVar) == 0.0) { return doubleVar; }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.NewtonSolver <112, 112>
verifySequence(min, startValue, max);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.NewtonSolver <112, 112>
verifySequence(doubleVar, doubleVar, doubleVar);

---fix ingredient(SameMethod)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.BrentSolver <103, 103>
verifySequence(min, initial, max);

---fix ingredient(SameMethod)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.BrentSolver <103, 103>
verifySequence(doubleVar, doubleVar, doubleVar);

---fix ingredient(SameMethod)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.BrentSolver <113, 113>
double yMin = f.value(min);

---fix ingredient(SameMethod)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.BrentSolver <113, 113>
double doubleVar = UnivariateRealFunction.value(doubleVar);

---fix ingredient(SameMethod)  <1-fine-grained>  varMapType:1--- org.apache.commons.math.analysis.solvers.BrentSolver <113, 113>
double yMin = UnivariateRealFunction.value(min);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.BrentSolver <173, 173>
double yMin = f.value(min);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.BrentSolver <173, 173>
double doubleVar = UnivariateRealFunction.value(doubleVar);

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.apache.commons.math.analysis.solvers.BrentSolver <173, 173>
double yMin = UnivariateRealFunction.value(min);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.MullerSolver <100, 100>
verifyBracketing(min, max, f);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <100, 100>
verifyBracketing(doubleVar, doubleVar, UnivariateRealFunction);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.MullerSolver <101, 101>
verifySequence(min, initial, max);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <101, 101>
verifySequence(doubleVar, doubleVar, doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.MullerSolver <157, 157>
verifyBracketing(min, max, f);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <157, 157>
verifyBracketing(doubleVar, doubleVar, UnivariateRealFunction);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.MullerSolver <296, 296>
verifyBracketing(min, max, f);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <296, 296>
verifyBracketing(doubleVar, doubleVar, UnivariateRealFunction);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.RiddersSolver <98, 98>
verifyBracketing(min, max, f);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.RiddersSolver <98, 98>
verifyBracketing(doubleVar, doubleVar, UnivariateRealFunction);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.RiddersSolver <99, 99>
verifySequence(min, initial, max);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.RiddersSolver <99, 99>
verifySequence(doubleVar, doubleVar, doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.RiddersSolver <140, 140>
verifyBracketing(min, max, f);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.RiddersSolver <140, 140>
verifyBracketing(doubleVar, doubleVar, UnivariateRealFunction);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.LaguerreSolver <139, 139>
verifyBracketing(min, max, f);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.LaguerreSolver <139, 139>
verifyBracketing(doubleVar, doubleVar, UnivariateRealFunction);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.LaguerreSolver <140, 140>
verifySequence(min, initial, max);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.LaguerreSolver <140, 140>
verifySequence(doubleVar, doubleVar, doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.LaguerreSolver <180, 180>
verifyBracketing(min, max, f);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.LaguerreSolver <180, 180>
verifyBracketing(doubleVar, doubleVar, UnivariateRealFunction);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.integration.TrapezoidIntegrator <114, 114>
double oldt = stage(f, min, max, 0);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.TrapezoidIntegrator <114, 114>
double doubleVar = stage(UnivariateRealFunction, doubleVar, doubleVar, 0);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.analysis.integration.TrapezoidIntegrator <114, 114>
double oldt = stage(UnivariateRealFunction, min, max, 0);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.integration.LegendreGaussIntegrator <172, 172>
double oldt = stage(f, min, max, 1);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.LegendreGaussIntegrator <172, 172>
double doubleVar = stage(UnivariateRealFunction, doubleVar, doubleVar, 1);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.analysis.integration.LegendreGaussIntegrator <172, 172>
double oldt = stage(UnivariateRealFunction, min, max, 1);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.SecantSolver <129, 132>
throw MathRuntimeException.createIllegalArgumentException(
                  "function values at endpoints do not have different signs, " +
                  "endpoints: [{0}, {1}], values: [{2}, {3}]",
                  min, max, y0, y1);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.SecantSolver <129, 132>
throw MathRuntimeException.createIllegalArgumentException(
                  "function values at endpoints do not have different signs, " +
                  "endpoints: [{0}, {1}], values: [{2}, {3}]",
                  doubleVar, doubleVar, doubleVar, doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.NewtonSolver <61, 61>
return solve(f, min, max);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.NewtonSolver <61, 61>
return solve(UnivariateRealFunction, doubleVar, doubleVar);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.BrentSolver <68, 68>
return solve(f, min, max);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.BrentSolver <68, 68>
return solve(UnivariateRealFunction, doubleVar, doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.BisectionSolver <59, 59>
return solve(f, min, max);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.BisectionSolver <59, 59>
return solve(UnivariateRealFunction, doubleVar, doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.BisectionSolver <66, 66>
return solve(f, min, max);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.BisectionSolver <66, 66>
return solve(UnivariateRealFunction, doubleVar, doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.BisectionSolver <88, 88>
fmin = f.value(min);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.BisectionSolver <88, 88>
doubleVar = UnivariateRealFunction.value(doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.MullerSolver <65, 65>
return solve(f, min, max);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <65, 65>
return solve(UnivariateRealFunction, doubleVar, doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.MullerSolver <249, 249>
return solve2(f, min, max);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <249, 249>
return solve2(UnivariateRealFunction, doubleVar, doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.RiddersSolver <64, 64>
return solve(f, min, max);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.RiddersSolver <64, 64>
return solve(UnivariateRealFunction, doubleVar, doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.LaguerreSolver <98, 98>
return solve(p, min, max);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.LaguerreSolver <98, 98>
return solve(PolynomialFunction, doubleVar, doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.SecantSolver <68, 68>
return solve(f, min, max);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.SecantSolver <68, 68>
return solve(UnivariateRealFunction, doubleVar, doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.SecantSolver <95, 95>
return solve(f, min, max);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.SecantSolver <95, 95>
return solve(UnivariateRealFunction, doubleVar, doubleVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <61, 61>
return integrate(f, min, max);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <61, 61>
return integrate(UnivariateRealFunction, doubleVar, doubleVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.integration.RombergIntegrator <62, 62>
return integrate(f, min, max);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.RombergIntegrator <62, 62>
return integrate(UnivariateRealFunction, doubleVar, doubleVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.integration.TrapezoidIntegrator <102, 102>
return integrate(f, min, max);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.TrapezoidIntegrator <102, 102>
return integrate(UnivariateRealFunction, doubleVar, doubleVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.integration.LegendreGaussIntegrator <159, 159>
return integrate(f, min, max);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.LegendreGaussIntegrator <159, 159>
return integrate(UnivariateRealFunction, doubleVar, doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.BisectionSolver <87, 87>
m = UnivariateRealSolverUtils.midpoint(min, max);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.BisectionSolver <87, 87>
doubleVar = UnivariateRealSolverUtils.midpoint(doubleVar, doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.BisectionSolver <100, 100>
m = UnivariateRealSolverUtils.midpoint(min, max);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.BisectionSolver <100, 100>
doubleVar = UnivariateRealSolverUtils.midpoint(doubleVar, doubleVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.integration.RombergIntegrator <79, 79>
currentRow[0] = qtrap.stage(f, min, max, 0);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.RombergIntegrator <79, 79>
doubleVar[0] = UnivariateRealIntegratorImpl.stage(UnivariateRealFunction, doubleVar, doubleVar, 0);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.transform.FastHadamardTransformer <46, 46>
return fht(FastFourierTransformer.sample(f, min, max, n));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.transform.FastHadamardTransformer <46, 46>
return fht(FastFourierTransformer.sample(UnivariateRealFunction, doubleVar, doubleVar, intVar));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.random.EmpiricalDistributionImpl <359, 361>
return Math.min(
                Math.max((int) Math.ceil((value- min) / delta) - 1, 0),
                binCount - 1);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.random.EmpiricalDistributionImpl <359, 361>
return Math.min(
                Math.max((int) Math.ceil((doubleVar- doubleVar) / doubleVar) - 1, 0),
                intVar - 1);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <81, 81>
double oldt = qtrap.stage(f, min, max, 0);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <81, 81>
double doubleVar = UnivariateRealIntegratorImpl.stage(UnivariateRealFunction, doubleVar, doubleVar, 0);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <81, 81>
double oldt = null.stage(UnivariateRealFunction, min, max, 0);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.random.EmpiricalDistributionImpl <325, 325>
delta = (max - min)/(Double.valueOf(binCount)).doubleValue();

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.random.EmpiricalDistributionImpl <325, 325>
doubleVar = (doubleVar - doubleVar)/(Double.valueOf(intVar)).doubleValue();

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.random.EmpiricalDistributionImpl <325, 325>
delta = (max - min)/(Double.valueOf(binCount)).doubleValue();

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer <315, 315>
return optimize(f, goalType, min, max);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer <315, 315>
return optimize(UnivariateRealFunction, null, doubleVar, doubleVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.optimization.univariate.BrentOptimizer <50, 50>
return optimize(f, goalType, min, max);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.optimization.univariate.BrentOptimizer <50, 50>
return optimize(UnivariateRealFunction, null, doubleVar, doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.NewtonSolver <68, 68>
return solve(f, min, max, startValue);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.NewtonSolver <68, 68>
return solve(UnivariateRealFunction, doubleVar, doubleVar, doubleVar);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.BrentSolver <75, 75>
return solve(f, min, max, initial);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.BrentSolver <75, 75>
return solve(UnivariateRealFunction, doubleVar, doubleVar, doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.MullerSolver <72, 72>
return solve(f, min, max, initial);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <72, 72>
return solve(UnivariateRealFunction, doubleVar, doubleVar, doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.RiddersSolver <71, 71>
return solve(f, min, max, initial);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.RiddersSolver <71, 71>
return solve(UnivariateRealFunction, doubleVar, doubleVar, doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.LaguerreSolver <105, 105>
return solve(p, min, max, initial);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.LaguerreSolver <105, 105>
return solve(PolynomialFunction, doubleVar, doubleVar, doubleVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.SecantSolver <75, 75>
return solve(f, min, max, initial);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.SecantSolver <75, 75>
return solve(UnivariateRealFunction, doubleVar, doubleVar, doubleVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.transform.FastCosineTransformer <208, 208>
return transform2(f, min, max, n);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.transform.FastCosineTransformer <208, 208>
return transform2(UnivariateRealFunction, doubleVar, doubleVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.transform.FastSineTransformer <203, 203>
return transform2(f, min, max, n);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.transform.FastSineTransformer <203, 203>
return transform2(UnivariateRealFunction, doubleVar, doubleVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.transform.FastHadamardTransformer <59, 60>
final double[] unscaled =
            fht(FastFourierTransformer.sample(f, min, max, n));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.transform.FastHadamardTransformer <59, 60>
final double[] double[]Var =
            fht(FastFourierTransformer.sample(UnivariateRealFunction, doubleVar, doubleVar, intVar));

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.transform.FastHadamardTransformer <59, 60>
final double[] unscaled =
            fht(FastFourierTransformer.sample(UnivariateRealFunction, min, max, n));

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.NewtonSolver <86, 86>
return solve(f, min, max, UnivariateRealSolverUtils.midpoint(min, max));

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.NewtonSolver <86, 86>
return solve(UnivariateRealFunction, doubleVar, doubleVar, UnivariateRealSolverUtils.midpoint(doubleVar, doubleVar));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <75, 75>
final double s = (4 * qtrap.stage(f, min, max, 1) - qtrap.stage(f, min, max, 0)) / 3.0;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <75, 75>
final double doubleVar = (4 * UnivariateRealIntegratorImpl.stage(UnivariateRealFunction, doubleVar, doubleVar, 1) - UnivariateRealIntegratorImpl.stage(UnivariateRealFunction, doubleVar, doubleVar, 0)) / 3.0;

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <75, 75>
final double s = (4 * null.stage(UnivariateRealFunction, min, max, 1) - null.stage(UnivariateRealFunction, min, max, 0)) / 3.0;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.integration.RombergIntegrator <88, 88>
currentRow[0] = qtrap.stage(f, min, max, i);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.RombergIntegrator <88, 88>
doubleVar[0] = UnivariateRealIntegratorImpl.stage(UnivariateRealFunction, doubleVar, doubleVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.integration.TrapezoidIntegrator <116, 116>
final double t = stage(f, min, max, i);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.TrapezoidIntegrator <116, 116>
final double doubleVar = stage(UnivariateRealFunction, doubleVar, doubleVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.analysis.integration.TrapezoidIntegrator <116, 116>
final double t = stage(UnivariateRealFunction, min, max, i);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.integration.LegendreGaussIntegrator <178, 178>
final double t = stage(f, min, max, n);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.LegendreGaussIntegrator <178, 178>
final double doubleVar = stage(UnivariateRealFunction, doubleVar, doubleVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.analysis.integration.LegendreGaussIntegrator <178, 178>
final double t = stage(UnivariateRealFunction, min, max, n);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.transform.FastFourierTransformer <110, 110>
double data[] = sample(f, min, max, n);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.transform.FastFourierTransformer <110, 110>
double doubleVar[] = sample(UnivariateRealFunction, doubleVar, doubleVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.transform.FastFourierTransformer <110, 110>
double data[] = sample(UnivariateRealFunction, min, max, n);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.transform.FastFourierTransformer <166, 166>
double data[] = sample(f, min, max, n);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.transform.FastFourierTransformer <166, 166>
double doubleVar[] = sample(UnivariateRealFunction, doubleVar, doubleVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.transform.FastFourierTransformer <166, 166>
double data[] = sample(UnivariateRealFunction, min, max, n);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.transform.FastFourierTransformer <225, 225>
double data[] = sample(f, min, max, n);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.transform.FastFourierTransformer <225, 225>
double doubleVar[] = sample(UnivariateRealFunction, doubleVar, doubleVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.transform.FastFourierTransformer <225, 225>
double data[] = sample(UnivariateRealFunction, min, max, n);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.transform.FastFourierTransformer <284, 284>
double data[] = sample(f, min, max, n);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.transform.FastFourierTransformer <284, 284>
double doubleVar[] = sample(UnivariateRealFunction, doubleVar, doubleVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.transform.FastFourierTransformer <284, 284>
double data[] = sample(UnivariateRealFunction, min, max, n);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.transform.FastCosineTransformer <84, 84>
double data[] = FastFourierTransformer.sample(f, min, max, n);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.transform.FastCosineTransformer <84, 84>
double doubleVar[] = FastFourierTransformer.sample(UnivariateRealFunction, doubleVar, doubleVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.transform.FastCosineTransformer <84, 84>
double data[] = FastFourierTransformer.sample(UnivariateRealFunction, min, max, n);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.transform.FastCosineTransformer <126, 126>
double data[] = FastFourierTransformer.sample(f, min, max, n);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.transform.FastCosineTransformer <126, 126>
double doubleVar[] = FastFourierTransformer.sample(UnivariateRealFunction, doubleVar, doubleVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.transform.FastCosineTransformer <126, 126>
double data[] = FastFourierTransformer.sample(UnivariateRealFunction, min, max, n);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.transform.FastCosineTransformer <168, 168>
double data[] = FastFourierTransformer.sample(f, min, max, n);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.transform.FastCosineTransformer <168, 168>
double doubleVar[] = FastFourierTransformer.sample(UnivariateRealFunction, doubleVar, doubleVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.transform.FastCosineTransformer <168, 168>
double data[] = FastFourierTransformer.sample(UnivariateRealFunction, min, max, n);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.transform.FastSineTransformer <84, 84>
double data[] = FastFourierTransformer.sample(f, min, max, n);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.transform.FastSineTransformer <84, 84>
double doubleVar[] = FastFourierTransformer.sample(UnivariateRealFunction, doubleVar, doubleVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.transform.FastSineTransformer <84, 84>
double data[] = FastFourierTransformer.sample(UnivariateRealFunction, min, max, n);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.transform.FastSineTransformer <124, 124>
double data[] = FastFourierTransformer.sample(f, min, max, n);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.transform.FastSineTransformer <124, 124>
double doubleVar[] = FastFourierTransformer.sample(UnivariateRealFunction, doubleVar, doubleVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.transform.FastSineTransformer <124, 124>
double data[] = FastFourierTransformer.sample(UnivariateRealFunction, min, max, n);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.transform.FastSineTransformer <164, 164>
double data[] = FastFourierTransformer.sample(f, min, max, n);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.transform.FastSineTransformer <164, 164>
double doubleVar[] = FastFourierTransformer.sample(UnivariateRealFunction, doubleVar, doubleVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.transform.FastSineTransformer <164, 164>
double data[] = FastFourierTransformer.sample(UnivariateRealFunction, min, max, n);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.LaguerreSolver <218, 220>
return (isSequence(min, z.getReal(), max)) &&
               (Math.abs(z.getImaginary()) <= tolerance ||
                z.abs() <= functionValueAccuracy);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.LaguerreSolver <218, 220>
return (isSequence(doubleVar, Complex.getReal(), doubleVar)) &&
               (Math.abs(Complex.getImaginary()) <= doubleVar ||
                Complex.abs() <= doubleVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <83, 83>
final double t = qtrap.stage(f, min, max, i);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <83, 83>
final double doubleVar = UnivariateRealIntegratorImpl.stage(UnivariateRealFunction, doubleVar, doubleVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <83, 83>
final double t = null.stage(UnivariateRealFunction, min, max, i);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.MullerSolver <102, 106>
if (isBracketing(min, initial, f)) {
            return solve(f, min, initial);
        } else {
            return solve(f, initial, max);
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <102, 106>
if (isBracketing(doubleVar, doubleVar, UnivariateRealFunction)) {
            return solve(UnivariateRealFunction, doubleVar, doubleVar);
        } else {
            return solve(UnivariateRealFunction, doubleVar, doubleVar);
        }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.RiddersSolver <100, 104>
if (isBracketing(min, initial, f)) {
            return solve(f, min, initial);
        } else {
            return solve(f, initial, max);
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.RiddersSolver <100, 104>
if (isBracketing(doubleVar, doubleVar, UnivariateRealFunction)) {
            return solve(UnivariateRealFunction, doubleVar, doubleVar);
        } else {
            return solve(UnivariateRealFunction, doubleVar, doubleVar);
        }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.LaguerreSolver <141, 145>
if (isBracketing(min, initial, f)) {
            return solve(f, min, initial);
        } else {
            return solve(f, initial, max);
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.LaguerreSolver <141, 145>
if (isBracketing(doubleVar, doubleVar, UnivariateRealFunction)) {
            return solve(UnivariateRealFunction, doubleVar, doubleVar);
        } else {
            return solve(UnivariateRealFunction, doubleVar, doubleVar);
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator <617, 619>
int targetIter = Math.max(1,
                              Math.min(sequence.length - 2,
                                       (int) Math.floor(0.5 - 0.6 * log10R)));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator <617, 619>
int intVar = Math.max(1,
                              Math.min(int[]Var.length - 2,
                                       (int) Math.floor(0.5 - 0.6 * doubleVar)));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.integration.LegendreGaussIntegrator <193, 193>
double ratio = Math.min(4, Math.pow(delta / limit, 0.5 / abscissas.length));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.integration.LegendreGaussIntegrator <193, 193>
double doubleVar = Math.min(4, Math.pow(doubleVar / doubleVar, 0.5 / double[]Var.length));

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.analysis.integration.LegendreGaussIntegrator <193, 193>
double ratio = Math.min(4, Math.pow(delta / limit, 0.5 / abscissas.length));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer <532, 532>
paru = 2.2251e-308 / Math.min(delta, 0.1);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer <532, 532>
doubleVar = 2.2251e-308 / Math.min(doubleVar, 0.1);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.estimation.LevenbergMarquardtEstimator <575, 575>
paru = 2.2251e-308 / Math.min(delta, 0.1);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.apache.commons.math.estimation.LevenbergMarquardtEstimator <575, 575>
doubleVar = 2.2251e-308 / Math.min(doubleVar, 0.1);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.linear.QRDecompositionImpl <194, 196>
for (int minor = m - 1; minor >= Math.min(m, n); minor--) {
                cachedQT.setEntry(minor, minor, 1.0);
            }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator <940, 940>
optimalIter = Math.min(k+1, sequence.length - 2);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.linear.QRDecompositionImpl <157, 162>
for (int row = Math.min(m, n) - 1; row >= 0; row--) {
                cachedR.setEntry(row, row, rDiag[row]);
                for (int col = row + 1; col < n; col++) {
                    cachedR.setEntry(row, col, qrt[col][row]);
                }
            }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.linear.QRDecompositionImpl <75, 75>
rDiag = new double[Math.min(m, n)];

---fix ingredient  <1-fine-grained>  varMapType:1--- org.apache.commons.math.linear.QRDecompositionImpl <75, 75>
rDiag = new double[Math.min(m, n)];

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <521, 521>
final int qEnd   = Math.min(qStart + BLOCK_SIZE, m.getColumnDimension());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <532, 532>
final int qEnd   = Math.min(qStart + BLOCK_SIZE, m.getColumnDimension());

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils <195, 195>
b = Math.min(b + 1.0, upperBound);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils <195, 195>
doubleVar = Math.min(doubleVar + 1.0, doubleVar);

