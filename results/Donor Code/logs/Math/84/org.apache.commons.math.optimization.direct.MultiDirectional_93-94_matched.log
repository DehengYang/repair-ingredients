---patch code ori--- org.apache.commons.math.optimization.direct.MultiDirectional <93, 94>
return;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.MultistepIntegrator <178, 178>
return starter;

---patch code 0--- org.apache.commons.math.optimization.direct.MultiDirectional <93, 94>
return;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.MultistepIntegrator <178, 178>
return FirstOrderIntegrator;

---patch code 1--- org.apache.commons.math.optimization.direct.MultiDirectional <93, 94>
return;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.MultistepIntegrator <178, 178>
return FirstOrderIntegrator;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.MultistepIntegrator <250, 250>
return minReduction;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.MultistepIntegrator <250, 250>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.MultistepIntegrator <250, 250>
return minReduction;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.MultistepIntegrator <264, 264>
return maxGrowth;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.MultistepIntegrator <264, 264>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.MultistepIntegrator <264, 264>
return maxGrowth;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.MultistepIntegrator <278, 278>
return safety;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.MultistepIntegrator <278, 278>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.MultistepIntegrator <278, 278>
return safety;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.MultistepIntegrator <400, 400>
return dimension;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.MultistepIntegrator <400, 400>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.MultistepIntegrator <400, 400>
return dimension;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator <199, 199>
return stopTime;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator <199, 199>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator <199, 199>
return stopTime;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator <62, 62>
return new HighamHall54StepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator <62, 62>
return new HighamHall54StepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator <62, 62>
return new HighamHall54StepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.GillStepInterpolator <75, 75>
return new GillStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.GillStepInterpolator <75, 75>
return new GillStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.GillStepInterpolator <75, 75>
return new GillStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator <77, 77>
return new ThreeEighthesStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator <77, 77>
return new ThreeEighthesStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator <77, 77>
return new ThreeEighthesStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator <359, 359>
return stopTime;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator <359, 359>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator <359, 359>
return stopTime;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator <155, 155>
return safety;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator <155, 155>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator <155, 155>
return safety;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator <332, 332>
return stopTime;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator <332, 332>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator <332, 332>
return stopTime;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator <340, 340>
return minReduction;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator <340, 340>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator <340, 340>
return minReduction;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator <354, 354>
return maxGrowth;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator <354, 354>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator <354, 354>
return maxGrowth;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator <99, 99>
return new DormandPrince853StepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator <99, 99>
return new DormandPrince853StepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator <99, 99>
return new DormandPrince853StepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator <244, 244>
return h;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator <244, 244>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator <244, 244>
return h;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator <277, 277>
return filteredH;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator <277, 277>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator <277, 277>
return filteredH;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator <290, 290>
return stepStart;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator <290, 290>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator <290, 290>
return stepStart;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator <303, 303>
return minStep;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator <303, 303>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator <303, 303>
return minStep;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator <310, 310>
return maxStep;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator <310, 310>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator <310, 310>
return maxStep;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.EulerStepInterpolator <73, 73>
return new EulerStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.EulerStepInterpolator <73, 73>
return new EulerStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.EulerStepInterpolator <73, 73>
return new EulerStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator <72, 72>
return new MidpointStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator <72, 72>
return new MidpointStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator <72, 72>
return new MidpointStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator <87, 87>
return new DormandPrince54StepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator <87, 87>
return new DormandPrince54StepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator <87, 87>
return new DormandPrince54StepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator <341, 341>
return stopTime;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator <341, 341>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator <341, 341>
return stopTime;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator <228, 228>
return new GraggBulirschStoerStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator <228, 228>
return new GraggBulirschStoerStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator <228, 228>
return new GraggBulirschStoerStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator <304, 304>
return error;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator <304, 304>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator <304, 304>
return error;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator <79, 79>
return new ClassicalRungeKuttaStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator <79, 79>
return new ClassicalRungeKuttaStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator <79, 79>
return new ClassicalRungeKuttaStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer <209, 209>
return t;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer <209, 209>
return AdamsNordsieckTransformer;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer <209, 209>
return AdamsNordsieckTransformer;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator <941, 941>
return stepStart;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator <941, 941>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator <941, 941>
return stepStart;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.sampling.DummyStepInterpolator <81, 81>
return new DummyStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.sampling.DummyStepInterpolator <81, 81>
return new DummyStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.sampling.DummyStepInterpolator <81, 81>
return new DummyStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <195, 195>
return doCopy();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <195, 195>
return doCopy();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <195, 195>
return doCopy();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <232, 232>
return previousTime;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <232, 232>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <232, 232>
return previousTime;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <237, 237>
return currentTime;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <237, 237>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <237, 237>
return currentTime;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <242, 242>
return interpolatedTime;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <242, 242>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <242, 242>
return interpolatedTime;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <253, 253>
return forward;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <253, 253>
return booleanVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <253, 253>
return forward;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <281, 281>
return interpolatedState;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <281, 281>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <281, 281>
return interpolatedState;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <296, 296>
return interpolatedDerivatives;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <296, 296>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator <296, 296>
return interpolatedDerivatives;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.sampling.DummyStepHandler <51, 51>
return instance;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.sampling.DummyStepHandler <51, 51>
return DummyStepHandler;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.sampling.DummyStepHandler <51, 51>
return DummyStepHandler;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.sampling.NordsieckStepInterpolator <98, 98>
return new NordsieckStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.sampling.NordsieckStepInterpolator <98, 98>
return new NordsieckStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.sampling.NordsieckStepInterpolator <98, 98>
return new NordsieckStepInterpolator(this);

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.sampling.NordsieckStepInterpolator <180, 180>
return stateVariation;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.sampling.NordsieckStepInterpolator <180, 180>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.sampling.NordsieckStepInterpolator <180, 180>
return stateVariation;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.AbstractIntegrator <83, 83>
return name;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.AbstractIntegrator <83, 83>
return StringVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.AbstractIntegrator <83, 83>
return name;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.AbstractIntegrator <134, 134>
return stepStart;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.AbstractIntegrator <134, 134>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.AbstractIntegrator <134, 134>
return stepStart;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.AbstractIntegrator <139, 139>
return stepSize;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.AbstractIntegrator <139, 139>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.AbstractIntegrator <139, 139>
return stepSize;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.AbstractIntegrator <149, 149>
return maxEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.AbstractIntegrator <149, 149>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.AbstractIntegrator <149, 149>
return maxEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.AbstractIntegrator <154, 154>
return evaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.AbstractIntegrator <154, 154>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.AbstractIntegrator <154, 154>
return evaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.AbstractIntegrator <245, 245>
return newManager;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.AbstractIntegrator <245, 245>
return CombinedEventsManager;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.AbstractIntegrator <245, 245>
return CombinedEventsManager;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.AbstractIntegrator <263, 263>
return STOP;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.AbstractIntegrator <263, 263>
return STOP;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.AbstractIntegrator <263, 263>
return STOP;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.ContinuousOutputModel <201, 201>
return initialTime;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.ContinuousOutputModel <201, 201>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.ContinuousOutputModel <201, 201>
return initialTime;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.ContinuousOutputModel <209, 209>
return finalTime;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.ContinuousOutputModel <209, 209>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.ContinuousOutputModel <209, 209>
return finalTime;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.events.EventState <116, 116>
return handler;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.events.EventState <116, 116>
return EventHandler;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.events.EventState <116, 116>
return EventHandler;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.events.EventState <123, 123>
return maxCheckInterval;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.events.EventState <123, 123>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.events.EventState <123, 123>
return maxCheckInterval;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.events.EventState <130, 130>
return convergence;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.events.EventState <130, 130>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.events.EventState <130, 130>
return convergence;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.events.EventState <137, 137>
return maxIterationCount;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.events.EventState <137, 137>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.events.EventState <137, 137>
return maxIterationCount;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.events.EventState <268, 268>
return pendingEventTime;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.events.EventState <268, 268>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.events.EventState <268, 268>
return pendingEventTime;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.events.CombinedEventsManager <102, 102>
return states;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.events.CombinedEventsManager <102, 102>
return ListVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.events.CombinedEventsManager <102, 102>
return states;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ode.events.CombinedEventsManager <241, 241>
return resetDerivatives;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ode.events.CombinedEventsManager <241, 241>
return booleanVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ode.events.CombinedEventsManager <241, 241>
return resetDerivatives;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.geometry.Vector3D <180, 180>
return x;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.geometry.Vector3D <180, 180>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.geometry.Vector3D <180, 180>
return x;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.geometry.Vector3D <188, 188>
return y;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.geometry.Vector3D <188, 188>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.geometry.Vector3D <188, 188>
return y;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.geometry.Vector3D <196, 196>
return z;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.geometry.Vector3D <196, 196>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.geometry.Vector3D <196, 196>
return z;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.geometry.Vector3D <424, 424>
return this.isNaN();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.geometry.Vector3D <424, 424>
return Vector3D.isNaN();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.geometry.Vector3D <424, 424>
return Vector3D.isNaN();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.geometry.Vector3DFormat <138, 138>
return prefix;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.geometry.Vector3DFormat <138, 138>
return StringVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.geometry.Vector3DFormat <138, 138>
return prefix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.geometry.Vector3DFormat <146, 146>
return suffix;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.geometry.Vector3DFormat <146, 146>
return StringVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.geometry.Vector3DFormat <146, 146>
return suffix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.geometry.Vector3DFormat <154, 154>
return separator;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.geometry.Vector3DFormat <154, 154>
return StringVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.geometry.Vector3DFormat <154, 154>
return separator;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.geometry.Vector3DFormat <162, 162>
return format;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.geometry.Vector3DFormat <162, 162>
return NumberFormat;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.geometry.Vector3DFormat <162, 162>
return NumberFormat;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.geometry.Vector3DFormat <220, 220>
return toAppendTo;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.geometry.Vector3DFormat <220, 220>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.geometry.Vector3DFormat <220, 220>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.geometry.Vector3DFormat <264, 264>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.geometry.Vector3DFormat <264, 264>
return Vector3DVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.geometry.Vector3DFormat <264, 264>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.geometry.RotationOrder <55, 55>
return name;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.geometry.RotationOrder <55, 55>
return StringVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.geometry.RotationOrder <55, 55>
return name;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.geometry.RotationOrder <62, 62>
return a1;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.geometry.RotationOrder <62, 62>
return Vector3DVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.geometry.RotationOrder <62, 62>
return a1;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.geometry.RotationOrder <69, 69>
return a2;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.geometry.RotationOrder <69, 69>
return Vector3DVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.geometry.RotationOrder <69, 69>
return a2;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.geometry.RotationOrder <76, 76>
return a3;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.geometry.RotationOrder <76, 76>
return Vector3DVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.geometry.RotationOrder <76, 76>
return a3;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.geometry.Rotation <505, 505>
return q0;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.geometry.Rotation <505, 505>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.geometry.Rotation <505, 505>
return q0;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.geometry.Rotation <512, 512>
return q1;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.geometry.Rotation <512, 512>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.geometry.Rotation <512, 512>
return q1;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.geometry.Rotation <519, 519>
return q2;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.geometry.Rotation <519, 519>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.geometry.Rotation <519, 519>
return q2;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.geometry.Rotation <526, 526>
return q3;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.geometry.Rotation <526, 526>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.geometry.Rotation <526, 526>
return q3;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.geometry.Rotation <849, 849>
return m;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.geometry.Rotation <849, 849>
return double[][]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.geometry.Rotation <849, 849>
return m;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.geometry.Rotation <1002, 1002>
if (Math.abs(fn1 - fn) <= threshold)
        return o;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.geometry.Rotation <1002, 1002>
if (Math.abs(doubleVar - doubleVar) <= doubleVar)
        return double[][]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.geometry.Rotation <1002, 1002>
if (Math.abs(fn1 - fn) <= threshold)
        return o;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer <72, 72>
return clusters;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer <72, 72>
return ListVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer <72, 72>
return clusters;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer <77, 77>
return clusters;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer <77, 77>
return ListVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer <77, 77>
return clusters;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer <139, 139>
return resultSet;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer <139, 139>
return ListVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer <139, 139>
return resultSet;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer <162, 162>
return minCluster;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer <162, 162>
return Cluster;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer <162, 162>
return Cluster;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.clustering.Cluster <63, 63>
return points;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.clustering.Cluster <63, 63>
return ListVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.clustering.Cluster <63, 63>
return points;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.clustering.Cluster <71, 71>
return center;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.clustering.Cluster <71, 71>
return TVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.clustering.Cluster <71, 71>
return center;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.clustering.EuclideanIntegerPoint <52, 52>
return point;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.clustering.EuclideanIntegerPoint <52, 52>
return int[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.clustering.EuclideanIntegerPoint <52, 52>
return point;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.clustering.EuclideanIntegerPoint <99, 99>
return hashCode;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.clustering.EuclideanIntegerPoint <99, 99>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.clustering.EuclideanIntegerPoint <99, 99>
return hashCode;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <65, 65>
return super.getDimension();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <65, 65>
return super.getDimension();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <65, 65>
return super.getDimension();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <73, 73>
return super.getN();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <73, 73>
return super.getN();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <73, 73>
return super.getN();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <81, 81>
return super.getSum();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <81, 81>
return super.getSum();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <81, 81>
return super.getSum();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <89, 89>
return super.getSumSq();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <89, 89>
return super.getSumSq();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <89, 89>
return super.getSumSq();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <97, 97>
return super.getSumLog();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <97, 97>
return super.getSumLog();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <97, 97>
return super.getSumLog();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <105, 105>
return super.getMean();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <105, 105>
return super.getMean();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <105, 105>
return super.getMean();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <113, 113>
return super.getStandardDeviation();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <113, 113>
return super.getStandardDeviation();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <113, 113>
return super.getStandardDeviation();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <121, 121>
return super.getCovariance();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <121, 121>
return super.getCovariance();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <121, 121>
return super.getCovariance();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <129, 129>
return super.getMax();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <129, 129>
return super.getMax();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <129, 129>
return super.getMax();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <137, 137>
return super.getMin();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <137, 137>
return super.getMin();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <137, 137>
return super.getMin();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <145, 145>
return super.getGeometricMean();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <145, 145>
return super.getGeometricMean();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <145, 145>
return super.getGeometricMean();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <153, 153>
return super.toString();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <153, 153>
return super.toString();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <153, 153>
return super.toString();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <177, 177>
return super.hashCode();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <177, 177>
return super.hashCode();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <177, 177>
return super.hashCode();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <185, 185>
return super.getSumImpl();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <185, 185>
return super.getSumImpl();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <185, 185>
return super.getSumImpl();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <202, 202>
return super.getSumsqImpl();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <202, 202>
return super.getSumsqImpl();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <202, 202>
return super.getSumsqImpl();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <219, 219>
return super.getMinImpl();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <219, 219>
return super.getMinImpl();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <219, 219>
return super.getMinImpl();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <236, 236>
return super.getMaxImpl();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <236, 236>
return super.getMaxImpl();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <236, 236>
return super.getMaxImpl();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <253, 253>
return super.getSumLogImpl();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <253, 253>
return super.getSumLogImpl();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <253, 253>
return super.getSumLogImpl();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <270, 270>
return super.getGeoMeanImpl();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <270, 270>
return super.getGeoMeanImpl();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <270, 270>
return super.getGeoMeanImpl();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <287, 287>
return super.getMeanImpl();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <287, 287>
return super.getMeanImpl();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics <287, 287>
return super.getMeanImpl();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.AggregateSummaryStatistics <286, 286>
return contributingStatistics;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.AggregateSummaryStatistics <286, 286>
return SummaryStatistics;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.AggregateSummaryStatistics <286, 286>
return SummaryStatistics;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics <98, 98>
return super.getN();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics <98, 98>
return super.getN();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics <98, 98>
return super.getN();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics <106, 106>
return super.getStandardDeviation();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics <106, 106>
return super.getStandardDeviation();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics <106, 106>
return super.getStandardDeviation();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics <114, 114>
return super.getValues();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics <114, 114>
return super.getValues();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics <114, 114>
return super.getValues();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics <122, 122>
return super.getWindowSize();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics <122, 122>
return super.getWindowSize();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics <122, 122>
return super.getWindowSize();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics <138, 138>
return super.toString();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics <138, 138>
return super.toString();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics <138, 138>
return super.toString();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics <152, 152>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics <152, 152>
return DescriptiveStatistics;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics <152, 152>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics <166, 166>
return k;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics <166, 166>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics <166, 166>
return k;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics <174, 174>
return n;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics <174, 174>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics <174, 174>
return n;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics <187, 187>
return results;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics <187, 187>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics <187, 187>
return results;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics <253, 253>
return stdDev;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics <253, 253>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics <253, 253>
return stdDev;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics <401, 401>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics <401, 401>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics <401, 401>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.summary.SumOfSquares <85, 85>
return value;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.summary.SumOfSquares <85, 85>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.summary.SumOfSquares <85, 85>
return value;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.summary.SumOfSquares <92, 92>
return n;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.summary.SumOfSquares <92, 92>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.summary.SumOfSquares <92, 92>
return n;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.summary.SumOfSquares <127, 127>
return sumSq;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.summary.SumOfSquares <127, 127>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.summary.SumOfSquares <127, 127>
return sumSq;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.summary.SumOfSquares <137, 137>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.summary.SumOfSquares <137, 137>
return AbstractStorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.summary.SumOfSquares <137, 137>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.summary.SumOfLogs <90, 90>
return value;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.summary.SumOfLogs <90, 90>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.summary.SumOfLogs <90, 90>
return value;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.summary.SumOfLogs <100, 100>
return n;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.summary.SumOfLogs <100, 100>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.summary.SumOfLogs <100, 100>
return n;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.summary.SumOfLogs <138, 138>
return sumLog;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.summary.SumOfLogs <138, 138>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.summary.SumOfLogs <138, 138>
return sumLog;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.summary.SumOfLogs <148, 148>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.summary.SumOfLogs <148, 148>
return AbstractStorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.summary.SumOfLogs <148, 148>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.summary.Sum <85, 85>
return value;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.summary.Sum <85, 85>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.summary.Sum <85, 85>
return value;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.summary.Sum <92, 92>
return n;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.summary.Sum <92, 92>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.summary.Sum <92, 92>
return n;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.summary.Sum <127, 127>
return sum;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.summary.Sum <127, 127>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.summary.Sum <127, 127>
return sum;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.summary.Sum <137, 137>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.summary.Sum <137, 137>
return AbstractStorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.summary.Sum <137, 137>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.summary.Product <85, 85>
return value;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.summary.Product <85, 85>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.summary.Product <85, 85>
return value;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.summary.Product <92, 92>
return n;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.summary.Product <92, 92>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.summary.Product <92, 92>
return n;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.summary.Product <127, 127>
return product;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.summary.Product <127, 127>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.summary.Product <127, 127>
return product;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.summary.Product <137, 137>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.summary.Product <137, 137>
return AbstractStorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.summary.Product <137, 137>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.rank.Percentile <237, 237>
return quantile;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.rank.Percentile <237, 237>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.rank.Percentile <237, 237>
return quantile;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.rank.Percentile <263, 263>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.rank.Percentile <263, 263>
return AbstractUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.rank.Percentile <263, 263>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.rank.Max <94, 94>
return value;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.rank.Max <94, 94>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.rank.Max <94, 94>
return value;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.rank.Max <101, 101>
return n;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.rank.Max <101, 101>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.rank.Max <101, 101>
return n;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.rank.Max <137, 137>
return max;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.rank.Max <137, 137>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.rank.Max <137, 137>
return max;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.rank.Max <147, 147>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.rank.Max <147, 147>
return AbstractStorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.rank.Max <147, 147>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.rank.Min <94, 94>
return value;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.rank.Min <94, 94>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.rank.Min <94, 94>
return value;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.rank.Min <101, 101>
return n;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.rank.Min <101, 101>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.rank.Min <101, 101>
return n;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.rank.Min <137, 137>
return min;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.rank.Min <137, 137>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.rank.Min <137, 137>
return min;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.rank.Min <147, 147>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.rank.Min <147, 147>
return AbstractStorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.rank.Min <147, 147>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SummaryStatistics <171, 171>
return n;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SummaryStatistics <171, 171>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SummaryStatistics <171, 171>
return n;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SummaryStatistics <224, 224>
return (stdDev);

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SummaryStatistics <224, 224>
return (doubleVar);

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SummaryStatistics <224, 224>
return (stdDev);

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SummaryStatistics <389, 389>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SummaryStatistics <389, 389>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SummaryStatistics <389, 389>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SummaryStatistics <399, 399>
return sumImpl;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SummaryStatistics <399, 399>
return StorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SummaryStatistics <399, 399>
return StorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SummaryStatistics <428, 428>
return sumsqImpl;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SummaryStatistics <428, 428>
return StorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SummaryStatistics <428, 428>
return StorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SummaryStatistics <457, 457>
return minImpl;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SummaryStatistics <457, 457>
return StorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SummaryStatistics <457, 457>
return StorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SummaryStatistics <486, 486>
return maxImpl;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SummaryStatistics <486, 486>
return StorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SummaryStatistics <486, 486>
return StorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SummaryStatistics <515, 515>
return sumLogImpl;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SummaryStatistics <515, 515>
return StorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SummaryStatistics <515, 515>
return StorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SummaryStatistics <545, 545>
return geoMeanImpl;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SummaryStatistics <545, 545>
return StorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SummaryStatistics <545, 545>
return StorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SummaryStatistics <574, 574>
return meanImpl;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SummaryStatistics <574, 574>
return StorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SummaryStatistics <574, 574>
return StorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SummaryStatistics <603, 603>
return varianceImpl;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SummaryStatistics <603, 603>
return StorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SummaryStatistics <603, 603>
return StorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SummaryStatistics <645, 645>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SummaryStatistics <645, 645>
return SummaryStatistics;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SummaryStatistics <645, 645>
return SummaryStatistics;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <211, 211>
return (stdDev);

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <211, 211>
return (doubleVar);

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <211, 211>
return (stdDev);

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <290, 290>
return windowSize;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <290, 290>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <290, 290>
return windowSize;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <344, 344>
return sort;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <344, 344>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <344, 344>
return sort;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <440, 440>
return meanImpl;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <440, 440>
return UnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <440, 440>
return UnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <461, 461>
return geometricMeanImpl;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <461, 461>
return UnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <461, 461>
return UnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <483, 483>
return kurtosisImpl;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <483, 483>
return UnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <483, 483>
return UnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <504, 504>
return maxImpl;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <504, 504>
return UnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <504, 504>
return UnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <525, 525>
return minImpl;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <525, 525>
return UnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <525, 525>
return UnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <546, 546>
return percentileImpl;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <546, 546>
return UnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <546, 546>
return UnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <587, 587>
return skewnessImpl;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <587, 587>
return UnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <587, 587>
return UnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <609, 609>
return varianceImpl;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <609, 609>
return UnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <609, 609>
return UnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <631, 631>
return sumsqImpl;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <631, 631>
return UnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <631, 631>
return UnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <652, 652>
return sumImpl;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <652, 652>
return UnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <652, 652>
return UnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <674, 674>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <674, 674>
return DescriptiveStatistics;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.DescriptiveStatistics <674, 674>
return DescriptiveStatistics;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.FourthMoment <108, 108>
return m4;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.FourthMoment <108, 108>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.FourthMoment <108, 108>
return m4;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.FourthMoment <127, 127>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.FourthMoment <127, 127>
return ThirdMoment;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.FourthMoment <127, 127>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.FirstMoment <125, 125>
return m1;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.FirstMoment <125, 125>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.FirstMoment <125, 125>
return m1;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.FirstMoment <132, 132>
return n;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.FirstMoment <132, 132>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.FirstMoment <132, 132>
return n;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.FirstMoment <142, 142>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.FirstMoment <142, 142>
return AbstractStorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.FirstMoment <142, 142>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.Mean <178, 178>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.Mean <178, 178>
return AbstractStorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.Mean <178, 178>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.Skewness <185, 185>
return skew;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.Skewness <185, 185>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.Skewness <185, 185>
return skew;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.Skewness <195, 195>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.Skewness <195, 195>
return AbstractStorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.Skewness <195, 195>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.VectorialMean <70, 70>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.VectorialMean <70, 70>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.VectorialMean <70, 70>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.VectorialMean <87, 87>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.VectorialMean <87, 87>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.VectorialMean <87, 87>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.StandardDeviation <253, 253>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.StandardDeviation <253, 253>
return AbstractStorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.StandardDeviation <253, 253>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.SecondMoment <98, 98>
return m2;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.SecondMoment <98, 98>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.SecondMoment <98, 98>
return m2;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.SecondMoment <108, 108>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.SecondMoment <108, 108>
return FirstMoment;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.SecondMoment <108, 108>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.Variance <255, 255>
return var;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.Variance <255, 255>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.Variance <255, 255>
return var;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.Variance <309, 309>
return var;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.Variance <309, 309>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.Variance <309, 309>
return var;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.Variance <345, 345>
return isBiasCorrected;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.Variance <345, 345>
return booleanVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.Variance <345, 345>
return isBiasCorrected;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.Variance <362, 362>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.Variance <362, 362>
return AbstractStorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.Variance <362, 362>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.ThirdMoment <102, 102>
return m3;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.ThirdMoment <102, 102>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.ThirdMoment <102, 102>
return m3;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.ThirdMoment <122, 122>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.ThirdMoment <122, 122>
return SecondMoment;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.ThirdMoment <122, 122>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.VectorialCovariance <100, 100>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.VectorialCovariance <100, 100>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.VectorialCovariance <100, 100>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.VectorialCovariance <109, 109>
return n;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.VectorialCovariance <109, 109>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.VectorialCovariance <109, 109>
return n;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.VectorialCovariance <130, 130>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.VectorialCovariance <130, 130>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.VectorialCovariance <130, 130>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.GeometricMean <83, 83>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.GeometricMean <83, 83>
return AbstractStorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.GeometricMean <83, 83>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.GeometricMean <175, 175>
return sumOfLogs;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.GeometricMean <175, 175>
return StorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.GeometricMean <175, 175>
return StorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.Kurtosis <120, 120>
return kurtosis;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.Kurtosis <120, 120>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.Kurtosis <120, 120>
return kurtosis;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.Kurtosis <193, 193>
return kurt;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.Kurtosis <193, 193>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.Kurtosis <193, 193>
return kurt;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.moment.Kurtosis <203, 203>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.moment.Kurtosis <203, 203>
return AbstractStorelessUnivariateStatistic;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.moment.Kurtosis <203, 203>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <76, 76>
return max;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <76, 76>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <76, 76>
return max;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <83, 83>
return mean;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <83, 83>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <83, 83>
return mean;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <90, 90>
return min;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <90, 90>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <90, 90>
return min;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <97, 97>
return n;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <97, 97>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <97, 97>
return n;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <104, 104>
return sum;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <104, 104>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <104, 104>
return sum;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <118, 118>
return variance;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <118, 118>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <118, 118>
return variance;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <159, 159>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <159, 159>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.StatisticalSummaryValues <159, 159>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <58, 58>
return super.getSummary();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <58, 58>
return super.getSummary();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <58, 58>
return super.getSummary();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <74, 74>
return super.getN();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <74, 74>
return super.getN();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <74, 74>
return super.getN();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <82, 82>
return super.getSum();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <82, 82>
return super.getSum();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <82, 82>
return super.getSum();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <90, 90>
return super.getSumsq();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <90, 90>
return super.getSumsq();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <90, 90>
return super.getSumsq();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <98, 98>
return super.getMean();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <98, 98>
return super.getMean();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <98, 98>
return super.getMean();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <106, 106>
return super.getStandardDeviation();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <106, 106>
return super.getStandardDeviation();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <106, 106>
return super.getStandardDeviation();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <114, 114>
return super.getVariance();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <114, 114>
return super.getVariance();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <114, 114>
return super.getVariance();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <122, 122>
return super.getMax();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <122, 122>
return super.getMax();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <122, 122>
return super.getMax();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <130, 130>
return super.getMin();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <130, 130>
return super.getMin();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <130, 130>
return super.getMin();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <138, 138>
return super.getGeometricMean();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <138, 138>
return super.getGeometricMean();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <138, 138>
return super.getGeometricMean();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <146, 146>
return super.toString();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <146, 146>
return super.toString();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <146, 146>
return super.toString();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <170, 170>
return super.hashCode();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <170, 170>
return super.hashCode();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <170, 170>
return super.hashCode();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <178, 178>
return super.getSumImpl();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <178, 178>
return super.getSumImpl();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <178, 178>
return super.getSumImpl();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <194, 194>
return super.getSumsqImpl();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <194, 194>
return super.getSumsqImpl();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <194, 194>
return super.getSumsqImpl();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <210, 210>
return super.getMinImpl();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <210, 210>
return super.getMinImpl();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <210, 210>
return super.getMinImpl();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <226, 226>
return super.getMaxImpl();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <226, 226>
return super.getMaxImpl();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <226, 226>
return super.getMaxImpl();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <242, 242>
return super.getSumLogImpl();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <242, 242>
return super.getSumLogImpl();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <242, 242>
return super.getSumLogImpl();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <258, 258>
return super.getGeoMeanImpl();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <258, 258>
return super.getGeoMeanImpl();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <258, 258>
return super.getGeoMeanImpl();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <274, 274>
return super.getMeanImpl();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <274, 274>
return super.getMeanImpl();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <274, 274>
return super.getMeanImpl();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <290, 290>
return super.getVarianceImpl();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <290, 290>
return super.getVarianceImpl();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <290, 290>
return super.getVarianceImpl();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <312, 312>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <312, 312>
return SummaryStatistics;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics <312, 312>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic <90, 90>
return getResult();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic <90, 90>
return getResult();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic <90, 90>
return getResult();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.ranking.NaturalRanking <168, 168>
return nanStrategy;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.ranking.NaturalRanking <168, 168>
return null;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.ranking.NaturalRanking <168, 168>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.ranking.NaturalRanking <177, 177>
return tiesStrategy;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.ranking.NaturalRanking <177, 177>
return null;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.ranking.NaturalRanking <177, 177>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.ranking.NaturalRanking <244, 244>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.ranking.NaturalRanking <244, 244>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.ranking.NaturalRanking <244, 244>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.ranking.NaturalRanking <256, 256>
return ranks;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.ranking.NaturalRanking <256, 256>
return IntDoublePair[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.ranking.NaturalRanking <256, 256>
return ranks;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.ranking.NaturalRanking <275, 275>
return returnRanks;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.ranking.NaturalRanking <275, 275>
return IntDoublePair[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.ranking.NaturalRanking <275, 275>
return returnRanks;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.ranking.NaturalRanking <404, 404>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.ranking.NaturalRanking <404, 404>
return ArrayList;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.ranking.NaturalRanking <404, 404>
return ArrayList;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.ranking.NaturalRanking <447, 447>
return value;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.ranking.NaturalRanking <447, 447>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.ranking.NaturalRanking <447, 447>
return value;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.ranking.NaturalRanking <455, 455>
return position;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.ranking.NaturalRanking <455, 455>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.ranking.NaturalRanking <455, 455>
return position;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.Frequency <219, 219>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.Frequency <219, 219>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.Frequency <219, 219>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.Frequency <255, 255>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.Frequency <255, 255>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.Frequency <255, 255>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.Frequency <399, 399>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.Frequency <399, 399>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.Frequency <399, 399>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.Frequency <407, 407>
return getSumFreq();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.Frequency <407, 407>
return getSumFreq();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.Frequency <407, 407>
return getSumFreq();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.Frequency <416, 416>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.Frequency <416, 416>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.Frequency <416, 416>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.Frequency <419, 419>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.Frequency <419, 419>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.Frequency <419, 419>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.Frequency <571, 571>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.Frequency <571, 571>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.Frequency <571, 571>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression <156, 156>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression <156, 156>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression <156, 156>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression <163, 163>
return calculateYVariance();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression <163, 163>
return calculateYVariance();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression <163, 163>
return calculateYVariance();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.regression.GLSMultipleLinearRegression <84, 84>
return OmegaInverse;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.regression.GLSMultipleLinearRegression <84, 84>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.regression.GLSMultipleLinearRegression <84, 84>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.regression.SimpleRegression <236, 236>
return n;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.regression.SimpleRegression <236, 236>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.regression.SimpleRegression <236, 236>
return n;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.regression.SimpleRegression <354, 354>
return sumYY;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.regression.SimpleRegression <354, 354>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.regression.SimpleRegression <354, 354>
return sumYY;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.regression.SimpleRegression <368, 368>
return sumXX;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.regression.SimpleRegression <368, 368>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.regression.SimpleRegression <368, 368>
return sumXX;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.regression.SimpleRegression <377, 377>
return sumXY;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.regression.SimpleRegression <377, 377>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.regression.SimpleRegression <377, 377>
return sumXY;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.regression.SimpleRegression <437, 437>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.regression.SimpleRegression <437, 437>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.regression.SimpleRegression <437, 437>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.StatUtils <576, 576>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.StatUtils <576, 576>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.StatUtils <576, 576>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.inference.TestUtils <69, 69>
return tTest;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.inference.TestUtils <69, 69>
return TTest;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.inference.TestUtils <69, 69>
return TTest;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.inference.TestUtils <88, 88>
return chiSquareTest;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.inference.TestUtils <88, 88>
return ChiSquareTest;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.inference.TestUtils <88, 88>
return ChiSquareTest;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.inference.TestUtils <107, 107>
return unknownDistributionChiSquareTest;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.inference.TestUtils <107, 107>
return UnknownDistributionChiSquareTest;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.inference.TestUtils <107, 107>
return UnknownDistributionChiSquareTest;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.inference.TestUtils <127, 127>
return oneWayAnova;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.inference.TestUtils <127, 127>
return OneWayAnova;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.inference.TestUtils <127, 127>
return OneWayAnova;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.inference.ChiSquareTestImpl <100, 100>
return sumSq;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.inference.ChiSquareTestImpl <100, 100>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.inference.ChiSquareTestImpl <100, 100>
return sumSq;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.inference.ChiSquareTestImpl <179, 179>
return sumSq;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.inference.ChiSquareTestImpl <179, 179>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.inference.ChiSquareTestImpl <179, 179>
return sumSq;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.inference.ChiSquareTestImpl <283, 283>
return sumSq;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.inference.ChiSquareTestImpl <283, 283>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.inference.ChiSquareTestImpl <283, 283>
return sumSq;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.correlation.SpearmansCorrelation <106, 106>
return rankCorrelation;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.correlation.SpearmansCorrelation <106, 106>
return PearsonsCorrelation;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.correlation.SpearmansCorrelation <106, 106>
return PearsonsCorrelation;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.correlation.PearsonsCorrelation <120, 120>
return correlationMatrix;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.correlation.PearsonsCorrelation <120, 120>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.correlation.PearsonsCorrelation <120, 120>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.correlation.PearsonsCorrelation <197, 197>
return outMatrix;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.correlation.PearsonsCorrelation <197, 197>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.correlation.PearsonsCorrelation <197, 197>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.correlation.PearsonsCorrelation <263, 263>
return outMatrix;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.correlation.PearsonsCorrelation <263, 263>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.correlation.PearsonsCorrelation <263, 263>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.correlation.Covariance <139, 139>
return covarianceMatrix;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.correlation.Covariance <139, 139>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.correlation.Covariance <139, 139>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.correlation.Covariance <149, 149>
return n;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.correlation.Covariance <149, 149>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.correlation.Covariance <149, 149>
return n;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.stat.correlation.Covariance <171, 171>
return outMatrix;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.stat.correlation.Covariance <171, 171>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.stat.correlation.Covariance <171, 171>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer <133, 133>
return maxIterations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer <133, 133>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer <133, 133>
return maxIterations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer <138, 138>
return totalIterations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer <138, 138>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer <138, 138>
return totalIterations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer <148, 148>
return maxEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer <148, 148>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer <148, 148>
return maxEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer <153, 153>
return totalEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer <153, 153>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer <153, 153>
return totalEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer <158, 158>
return totalGradientEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer <158, 158>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer <158, 158>
return totalGradientEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer <106, 106>
return totalIterations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer <106, 106>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer <106, 106>
return totalIterations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer <111, 111>
return maxIterations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer <111, 111>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer <111, 111>
return maxIterations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer <116, 116>
return maxEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer <116, 116>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer <116, 116>
return maxEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer <121, 121>
return totalEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer <121, 121>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer <121, 121>
return totalEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer <137, 137>
return maxIterations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer <137, 137>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer <137, 137>
return maxIterations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer <142, 142>
return totalIterations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer <142, 142>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer <142, 142>
return totalIterations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer <152, 152>
return maxEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer <152, 152>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer <152, 152>
return maxEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer <157, 157>
return totalEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer <157, 157>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer <157, 157>
return totalEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer <162, 162>
return totalJacobianEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer <162, 162>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer <162, 162>
return totalJacobianEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer <79, 79>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer <79, 79>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer <79, 79>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer <85, 85>
return functionValue;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer <85, 85>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer <85, 85>
return functionValue;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer <117, 117>
return maxEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer <117, 117>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer <117, 117>
return maxEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer <122, 122>
return evaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer <122, 122>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer <122, 122>
return evaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.univariate.BrentOptimizer <181, 181>
return x;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.univariate.BrentOptimizer <181, 181>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.univariate.BrentOptimizer <181, 181>
return x;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.VectorialPointValuePair <79, 79>
return point;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.VectorialPointValuePair <79, 79>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.VectorialPointValuePair <79, 79>
return point;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.VectorialPointValuePair <95, 95>
return value;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.VectorialPointValuePair <95, 95>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.VectorialPointValuePair <95, 95>
return value;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.LinearConstraint <168, 168>
return coefficients;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.LinearConstraint <168, 168>
return RealVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.LinearConstraint <168, 168>
return RealVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.LinearConstraint <176, 176>
return relationship;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.LinearConstraint <176, 176>
return null;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.LinearConstraint <176, 176>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.LinearConstraint <184, 184>
return value;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.LinearConstraint <184, 184>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.LinearConstraint <184, 184>
return value;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.AbstractLinearOptimizer <72, 72>
return maxIterations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.AbstractLinearOptimizer <72, 72>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.AbstractLinearOptimizer <72, 72>
return maxIterations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.AbstractLinearOptimizer <77, 77>
return iterations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.AbstractLinearOptimizer <77, 77>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.AbstractLinearOptimizer <77, 77>
return iterations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.AbstractLinearOptimizer <106, 106>
return doOptimize();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.AbstractLinearOptimizer <106, 106>
return doOptimize();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.AbstractLinearOptimizer <106, 106>
return doOptimize();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.SimplexTableau <183, 183>
return matrix;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.SimplexTableau <183, 183>
return double[][]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.SimplexTableau <183, 183>
return matrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.SimplexTableau <202, 202>
return normalized;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.SimplexTableau <202, 202>
return ListVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.SimplexTableau <202, 202>
return normalized;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.SimplexTableau <240, 240>
return count;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.SimplexTableau <240, 240>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.SimplexTableau <240, 240>
return count;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.SimplexTableau <264, 264>
return sum;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.SimplexTableau <264, 264>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.SimplexTableau <264, 264>
return sum;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.SimplexTableau <281, 281>
return row;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.SimplexTableau <281, 281>
return int;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.SimplexTableau <281, 281>
return row;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.SimplexTableau <445, 445>
return numDecisionVariables;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.SimplexTableau <445, 445>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.SimplexTableau <445, 445>
return numDecisionVariables;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.SimplexTableau <462, 462>
return numSlackVariables;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.SimplexTableau <462, 462>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.SimplexTableau <462, 462>
return numSlackVariables;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.SimplexTableau <470, 470>
return numArtificialVariables;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.SimplexTableau <470, 470>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.SimplexTableau <470, 470>
return numArtificialVariables;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.SimplexSolver <67, 67>
return minPos;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.SimplexSolver <67, 67>
return int;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.SimplexSolver <67, 67>
return minPos;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.SimplexSolver <89, 89>
return minRatioPos;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.SimplexSolver <89, 89>
return int;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.SimplexSolver <89, 89>
return minRatioPos;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.LinearObjectiveFunction <75, 75>
return coefficients;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.LinearObjectiveFunction <75, 75>
return RealVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.LinearObjectiveFunction <75, 75>
return RealVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.LinearObjectiveFunction <83, 83>
return constantTerm;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.LinearObjectiveFunction <83, 83>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.LinearObjectiveFunction <83, 83>
return constantTerm;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.Relationship <49, 49>
return stringValue;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.Relationship <49, 49>
return stringValue;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.Relationship <49, 49>
return stringValue;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.Relationship <59, 59>
return GEQ;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.Relationship <59, 59>
return GEQ;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.Relationship <59, 59>
return GEQ;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.Relationship <61, 61>
return LEQ;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.Relationship <61, 61>
return LEQ;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.Relationship <61, 61>
return LEQ;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.linear.Relationship <63, 63>
return EQ;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.linear.Relationship <63, 63>
return EQ;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.linear.Relationship <63, 63>
return EQ;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.RealPointValuePair <79, 79>
return point;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.RealPointValuePair <79, 79>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.RealPointValuePair <79, 79>
return point;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.RealPointValuePair <86, 86>
return value;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.RealPointValuePair <86, 86>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.RealPointValuePair <86, 86>
return value;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer <128, 128>
return maxIterations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer <128, 128>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer <128, 128>
return maxIterations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer <138, 138>
return maxEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer <138, 138>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer <138, 138>
return maxEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer <143, 143>
return totalIterations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer <143, 143>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer <143, 143>
return totalIterations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer <148, 148>
return totalEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer <148, 148>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer <148, 148>
return totalEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint <57, 57>
return weight;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint <57, 57>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint <57, 57>
return weight;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint <64, 64>
return x;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint <64, 64>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint <64, 64>
return x;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint <71, 71>
return y;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint <71, 71>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint <71, 71>
return y;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.fitting.HarmonicCoefficientsGuesser <283, 283>
return a;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.fitting.HarmonicCoefficientsGuesser <283, 283>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.fitting.HarmonicCoefficientsGuesser <283, 283>
return a;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.fitting.HarmonicCoefficientsGuesser <290, 290>
return omega;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.fitting.HarmonicCoefficientsGuesser <290, 290>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.fitting.HarmonicCoefficientsGuesser <290, 290>
return omega;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.fitting.HarmonicCoefficientsGuesser <297, 297>
return phi;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.fitting.HarmonicCoefficientsGuesser <297, 297>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.fitting.HarmonicCoefficientsGuesser <297, 297>
return phi;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.fitting.PolynomialFitter <89, 89>
return gradient;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.fitting.PolynomialFitter <89, 89>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.fitting.PolynomialFitter <89, 89>
return gradient;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.fitting.PolynomialFitter <98, 98>
return y;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.fitting.PolynomialFitter <98, 98>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.fitting.PolynomialFitter <98, 98>
return y;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.fitting.HarmonicFunction <62, 62>
return a;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.fitting.HarmonicFunction <62, 62>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.fitting.HarmonicFunction <62, 62>
return a;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.fitting.HarmonicFunction <69, 69>
return omega;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.fitting.HarmonicFunction <69, 69>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.fitting.HarmonicFunction <69, 69>
return omega;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.fitting.HarmonicFunction <76, 76>
return phi;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.fitting.HarmonicFunction <76, 76>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.fitting.HarmonicFunction <76, 76>
return phi;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.fitting.CurveFitter <158, 172>
return new MultivariateMatrixFunction() {
                public double[][] value(double[] point)
                    throws FunctionEvaluationException, IllegalArgumentException {

                    final double[][] jacobian = new double[observations.size()][];

                    int i = 0;
                    for (WeightedObservedPoint observed : observations) {
                        jacobian[i++] = f.gradient(observed.getX(), point);
                    }

                    return jacobian;

                }
            };

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.fitting.CurveFitter <158, 172>
return new MultivariateMatrixFunction() {
                public double[][] value(double[] point)
                    throws FunctionEvaluationException, IllegalArgumentException {

                    final double[][] jacobian = new double[observations.size()][];

                    int i = 0;
                    for (WeightedObservedPoint observed : observations) {
                        jacobian[i++] = f.gradient(observed.getX(), point);
                    }

                    return jacobian;

                }
            };

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.fitting.CurveFitter <158, 172>
return new MultivariateMatrixFunction() {
                public double[][] value(double[] point)
                    throws FunctionEvaluationException, IllegalArgumentException {

                    final double[][] jacobian = new double[observations.size()][];

                    int i = 0;
                    for (WeightedObservedPoint observed : observations) {
                        jacobian[i++] = f.gradient(observed.getX(), point);
                    }

                    return jacobian;

                }
            };

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.fitting.CurveFitter <186, 186>
return values;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.fitting.CurveFitter <186, 186>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.fitting.CurveFitter <186, 186>
return values;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.LeastSquaresConverter <188, 188>
return sumSquares;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.LeastSquaresConverter <188, 188>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.LeastSquaresConverter <188, 188>
return sumSquares;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <122, 122>
return maxIterations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <122, 122>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <122, 122>
return maxIterations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <127, 127>
return iterations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <127, 127>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <127, 127>
return iterations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <137, 137>
return maxEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <137, 137>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <137, 137>
return maxEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <142, 142>
return objectiveEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <142, 142>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <142, 142>
return objectiveEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <147, 147>
return jacobianEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <147, 147>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <147, 147>
return jacobianEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <157, 157>
return checker;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <157, 157>
return VectorialConvergenceChecker;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <157, 157>
return VectorialConvergenceChecker;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <249, 249>
return chiSquare;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <249, 249>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <249, 249>
return chiSquare;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <312, 312>
return errors;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <312, 312>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <312, 312>
return errors;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <346, 346>
return doOptimize();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <346, 346>
return doOptimize();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer <346, 346>
return doOptimize();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <92, 92>
return maxIterations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <92, 92>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <92, 92>
return maxIterations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <97, 97>
return iterations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <97, 97>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <97, 97>
return iterations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <107, 107>
return maxEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <107, 107>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <107, 107>
return maxEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <112, 112>
return evaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <112, 112>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <112, 112>
return evaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <117, 117>
return gradientEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <117, 117>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <117, 117>
return gradientEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <127, 127>
return checker;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <127, 127>
return RealConvergenceChecker;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <127, 127>
return RealConvergenceChecker;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <187, 187>
return doOptimize();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <187, 187>
return doOptimize();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer <187, 187>
return doOptimize();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.general.GaussNewtonOptimizer <130, 130>
return current;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.general.GaussNewtonOptimizer <130, 130>
return VectorialPointValuePair;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.general.GaussNewtonOptimizer <130, 130>
return VectorialPointValuePair;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer <151, 151>
return current;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer <151, 151>
return RealPointValuePair;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer <151, 151>
return RealPointValuePair;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer <233, 233>
return b;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer <233, 233>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer <233, 233>
return b;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer <287, 287>
return dotProduct;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer <287, 287>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer <287, 287>
return dotProduct;

---fix ingredient(SamePackage)  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.direct.DirectSearchOptimizer <225, 225>
return maxIterations;

---fix ingredient(SamePackage)  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.direct.DirectSearchOptimizer <225, 225>
return intVar;

---fix ingredient(SamePackage)  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.direct.DirectSearchOptimizer <225, 225>
return maxIterations;

---fix ingredient(SamePackage)  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.direct.DirectSearchOptimizer <235, 235>
return maxEvaluations;

---fix ingredient(SamePackage)  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.direct.DirectSearchOptimizer <235, 235>
return intVar;

---fix ingredient(SamePackage)  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.direct.DirectSearchOptimizer <235, 235>
return maxEvaluations;

---fix ingredient(SamePackage)  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.direct.DirectSearchOptimizer <240, 240>
return iterations;

---fix ingredient(SamePackage)  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.direct.DirectSearchOptimizer <240, 240>
return intVar;

---fix ingredient(SamePackage)  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.direct.DirectSearchOptimizer <240, 240>
return iterations;

---fix ingredient(SamePackage)  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.direct.DirectSearchOptimizer <245, 245>
return evaluations;

---fix ingredient(SamePackage)  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.direct.DirectSearchOptimizer <245, 245>
return intVar;

---fix ingredient(SamePackage)  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.direct.DirectSearchOptimizer <245, 245>
return evaluations;

---fix ingredient(SamePackage)  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.optimization.direct.DirectSearchOptimizer <255, 255>
return checker;

---fix ingredient(SamePackage)  <parseContainCheck>  varMapType:0--- org.apache.commons.math.optimization.direct.DirectSearchOptimizer <255, 255>
return RealConvergenceChecker;

---fix ingredient(SamePackage)  <parseContainCheck>  varMapType:1--- org.apache.commons.math.optimization.direct.DirectSearchOptimizer <255, 255>
return RealConvergenceChecker;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.MaxEvaluationsExceededException <64, 64>
return maxEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.MaxEvaluationsExceededException <64, 64>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.MaxEvaluationsExceededException <64, 64>
return maxEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.estimation.WeightedMeasurement <97, 97>
return weight;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.estimation.WeightedMeasurement <97, 97>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.estimation.WeightedMeasurement <97, 97>
return weight;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.estimation.WeightedMeasurement <106, 106>
return measuredValue;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.estimation.WeightedMeasurement <106, 106>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.estimation.WeightedMeasurement <106, 106>
return measuredValue;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.estimation.WeightedMeasurement <160, 160>
return ignored;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.estimation.WeightedMeasurement <160, 160>
return booleanVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.estimation.WeightedMeasurement <160, 160>
return ignored;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.estimation.AbstractEstimator <68, 68>
return costEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.estimation.AbstractEstimator <68, 68>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.estimation.AbstractEstimator <68, 68>
return costEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.estimation.AbstractEstimator <77, 77>
return jacobianEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.estimation.AbstractEstimator <77, 77>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.estimation.AbstractEstimator <77, 77>
return jacobianEvaluations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.estimation.AbstractEstimator <159, 159>
return chiSquare;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.estimation.AbstractEstimator <159, 159>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.estimation.AbstractEstimator <159, 159>
return chiSquare;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.estimation.AbstractEstimator <226, 226>
return errors;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.estimation.AbstractEstimator <226, 226>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.estimation.AbstractEstimator <226, 226>
return errors;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.estimation.EstimatedParameter <88, 88>
return estimate;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.estimation.EstimatedParameter <88, 88>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.estimation.EstimatedParameter <88, 88>
return estimate;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.estimation.EstimatedParameter <95, 95>
return name;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.estimation.EstimatedParameter <95, 95>
return StringVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.estimation.EstimatedParameter <95, 95>
return name;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.estimation.EstimatedParameter <109, 109>
return bound;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.estimation.EstimatedParameter <109, 109>
return booleanVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.estimation.EstimatedParameter <109, 109>
return bound;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.special.Gamma <107, 107>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.special.Gamma <107, 107>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.special.Gamma <107, 107>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.special.Gamma <187, 187>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.special.Gamma <187, 187>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.special.Gamma <187, 187>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.special.Gamma <261, 261>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.special.Gamma <261, 261>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.special.Gamma <261, 261>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.special.Erf <55, 55>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.special.Erf <55, 55>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.special.Erf <55, 55>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.special.Beta <156, 156>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.special.Beta <156, 156>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.special.Beta <156, 156>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.special.Beta <199, 199>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.special.Beta <199, 199>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.special.Beta <199, 199>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.RandomDataImpl <373, 373>
return n;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.RandomDataImpl <373, 373>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.RandomDataImpl <373, 373>
return n;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.RandomDataImpl <376, 376>
return n;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.RandomDataImpl <376, 376>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.RandomDataImpl <376, 376>
return n;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.RandomDataImpl <538, 538>
return rand;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.RandomDataImpl <538, 538>
return RandomGenerator;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.RandomDataImpl <538, 538>
return RandomGenerator;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.RandomDataImpl <554, 554>
return secRand;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.RandomDataImpl <554, 554>
return SecureRandom;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.RandomDataImpl <554, 554>
return SecureRandom;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.RandomDataImpl <684, 684>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.RandomDataImpl <684, 684>
return int[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.RandomDataImpl <684, 684>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.RandomDataImpl <720, 720>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.RandomDataImpl <720, 720>
return Object[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.RandomDataImpl <720, 720>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.RandomDataImpl <760, 760>
return natural;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.RandomDataImpl <760, 760>
return int[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.RandomDataImpl <760, 760>
return natural;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.UncorrelatedRandomVectorGenerator <82, 82>
return random;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.UncorrelatedRandomVectorGenerator <82, 82>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.UncorrelatedRandomVectorGenerator <82, 82>
return random;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.BitsStreamGenerator <112, 112>
return random;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.BitsStreamGenerator <112, 112>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.BitsStreamGenerator <112, 112>
return random;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.BitsStreamGenerator <140, 140>
return random;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.BitsStreamGenerator <140, 140>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.BitsStreamGenerator <140, 140>
return random;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.EmpiricalDistributionImpl <451, 451>
return sampleStats;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.EmpiricalDistributionImpl <451, 451>
return SummaryStatistics;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.EmpiricalDistributionImpl <451, 451>
return SummaryStatistics;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.EmpiricalDistributionImpl <460, 460>
return binCount;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.EmpiricalDistributionImpl <460, 460>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.EmpiricalDistributionImpl <460, 460>
return binCount;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.EmpiricalDistributionImpl <471, 471>
return binStats;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.EmpiricalDistributionImpl <471, 471>
return ListVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.EmpiricalDistributionImpl <471, 471>
return binStats;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.EmpiricalDistributionImpl <486, 486>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.EmpiricalDistributionImpl <486, 486>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.EmpiricalDistributionImpl <486, 486>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.EmpiricalDistributionImpl <495, 495>
return loaded;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.EmpiricalDistributionImpl <495, 495>
return booleanVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.EmpiricalDistributionImpl <495, 495>
return loaded;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.CorrelatedRandomVectorGenerator <131, 131>
return generator;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.CorrelatedRandomVectorGenerator <131, 131>
return NormalizedRandomGenerator;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.CorrelatedRandomVectorGenerator <131, 131>
return NormalizedRandomGenerator;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.CorrelatedRandomVectorGenerator <141, 141>
return root;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.CorrelatedRandomVectorGenerator <141, 141>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.CorrelatedRandomVectorGenerator <141, 141>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.CorrelatedRandomVectorGenerator <152, 152>
return rank;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.CorrelatedRandomVectorGenerator <152, 152>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.CorrelatedRandomVectorGenerator <152, 152>
return rank;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.CorrelatedRandomVectorGenerator <284, 284>
return correlated;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.CorrelatedRandomVectorGenerator <284, 284>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.CorrelatedRandomVectorGenerator <284, 284>
return correlated;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.ValueServer <144, 144>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.ValueServer <144, 144>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.ValueServer <144, 144>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.ValueServer <190, 190>
return mode;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.ValueServer <190, 190>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.ValueServer <190, 190>
return mode;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.ValueServer <205, 205>
return valuesFileURL;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.ValueServer <205, 205>
return URLVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.ValueServer <205, 205>
return valuesFileURL;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.ValueServer <229, 229>
return empiricalDistribution;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.ValueServer <229, 229>
return EmpiricalDistribution;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.ValueServer <229, 229>
return EmpiricalDistribution;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.ValueServer <265, 265>
return mu;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.ValueServer <265, 265>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.ValueServer <265, 265>
return mu;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.ValueServer <279, 279>
return sigma;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.ValueServer <279, 279>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.ValueServer <279, 279>
return sigma;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.AbstractRandomGenerator <215, 215>
return (float) nextDouble();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.AbstractRandomGenerator <215, 215>
return (float) nextDouble();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.AbstractRandomGenerator <215, 215>
return (float) nextDouble();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.random.AbstractRandomGenerator <256, 256>
return dev;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.random.AbstractRandomGenerator <256, 256>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.random.AbstractRandomGenerator <256, 256>
return dev;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.AbstractIntegerDistribution <201, 201>
return x0;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.AbstractIntegerDistribution <201, 201>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.AbstractIntegerDistribution <201, 201>
return x0;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <93, 93>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <93, 93>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <93, 93>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <155, 155>
return numberOfSuccesses;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <155, 155>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <155, 155>
return numberOfSuccesses;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <163, 163>
return populationSize;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <163, 163>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <163, 163>
return populationSize;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <171, 171>
return sampleSize;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <171, 171>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <171, 171>
return sampleSize;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <205, 205>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <205, 205>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <205, 205>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <288, 288>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <288, 288>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <288, 288>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <312, 312>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <312, 312>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.HypergeometricDistributionImpl <312, 312>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.FDistributionImpl <83, 83>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.FDistributionImpl <83, 83>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.FDistributionImpl <83, 83>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.FDistributionImpl <106, 106>
return Double.POSITIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.FDistributionImpl <106, 106>
return Double.POSITIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.FDistributionImpl <106, 106>
return Double.POSITIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.FDistributionImpl <136, 136>
return Double.MAX_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.FDistributionImpl <136, 136>
return Double.MAX_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.FDistributionImpl <136, 136>
return Double.MAX_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.FDistributionImpl <155, 155>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.FDistributionImpl <155, 155>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.FDistributionImpl <155, 155>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.FDistributionImpl <178, 178>
return numeratorDegreesOfFreedom;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.FDistributionImpl <178, 178>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.FDistributionImpl <178, 178>
return numeratorDegreesOfFreedom;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.FDistributionImpl <201, 201>
return denominatorDegreesOfFreedom;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.FDistributionImpl <201, 201>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.FDistributionImpl <201, 201>
return denominatorDegreesOfFreedom;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.ChiSquaredDistributionImpl <115, 115>
return Double.POSITIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.ChiSquaredDistributionImpl <115, 115>
return Double.POSITIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.ChiSquaredDistributionImpl <115, 115>
return Double.POSITIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.ChiSquaredDistributionImpl <158, 158>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.ChiSquaredDistributionImpl <158, 158>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.ChiSquaredDistributionImpl <158, 158>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.ChiSquaredDistributionImpl <184, 184>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.ChiSquaredDistributionImpl <184, 184>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.ChiSquaredDistributionImpl <184, 184>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.ChiSquaredDistributionImpl <203, 203>
return gamma;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.ChiSquaredDistributionImpl <203, 203>
return GammaDistribution;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.ChiSquaredDistributionImpl <203, 203>
return GammaDistribution;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.ZipfDistributionImpl <62, 62>
return numberOfElements;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.ZipfDistributionImpl <62, 62>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.ZipfDistributionImpl <62, 62>
return numberOfElements;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.ZipfDistributionImpl <89, 89>
return exponent;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.ZipfDistributionImpl <89, 89>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.ZipfDistributionImpl <89, 89>
return exponent;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.ZipfDistributionImpl <166, 166>
return numberOfElements;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.ZipfDistributionImpl <166, 166>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.ZipfDistributionImpl <166, 166>
return numberOfElements;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.ZipfDistributionImpl <184, 184>
return value;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.ZipfDistributionImpl <184, 184>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.ZipfDistributionImpl <184, 184>
return value;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.BinomialDistributionImpl <61, 61>
return numberOfTrials;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.BinomialDistributionImpl <61, 61>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.BinomialDistributionImpl <61, 61>
return numberOfTrials;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.BinomialDistributionImpl <69, 69>
return probabilityOfSuccess;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.BinomialDistributionImpl <69, 69>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.BinomialDistributionImpl <69, 69>
return probabilityOfSuccess;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.BinomialDistributionImpl <123, 123>
return getNumberOfTrials();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.BinomialDistributionImpl <123, 123>
return getNumberOfTrials();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.BinomialDistributionImpl <123, 123>
return getNumberOfTrials();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.BinomialDistributionImpl <147, 147>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.BinomialDistributionImpl <147, 147>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.BinomialDistributionImpl <147, 147>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.BinomialDistributionImpl <167, 167>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.BinomialDistributionImpl <167, 167>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.BinomialDistributionImpl <167, 167>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.BinomialDistributionImpl <190, 190>
return Integer.MAX_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.BinomialDistributionImpl <190, 190>
return Integer.MAX_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.BinomialDistributionImpl <190, 190>
return Integer.MAX_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.AbstractContinuousDistribution <98, 98>
return lowerBound;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.AbstractContinuousDistribution <98, 98>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.AbstractContinuousDistribution <98, 98>
return lowerBound;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.AbstractContinuousDistribution <101, 101>
return upperBound;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.AbstractContinuousDistribution <101, 101>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.AbstractContinuousDistribution <101, 101>
return upperBound;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.AbstractContinuousDistribution <110, 110>
return root;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.AbstractContinuousDistribution <110, 110>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.AbstractContinuousDistribution <110, 110>
return root;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.CauchyDistributionImpl <76, 76>
return median;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.CauchyDistributionImpl <76, 76>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.CauchyDistributionImpl <76, 76>
return median;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.CauchyDistributionImpl <84, 84>
return scale;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.CauchyDistributionImpl <84, 84>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.CauchyDistributionImpl <84, 84>
return scale;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.CauchyDistributionImpl <112, 112>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.CauchyDistributionImpl <112, 112>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.CauchyDistributionImpl <112, 112>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.CauchyDistributionImpl <155, 155>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.CauchyDistributionImpl <155, 155>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.CauchyDistributionImpl <155, 155>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.CauchyDistributionImpl <177, 177>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.CauchyDistributionImpl <177, 177>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.CauchyDistributionImpl <177, 177>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.CauchyDistributionImpl <200, 200>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.CauchyDistributionImpl <200, 200>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.CauchyDistributionImpl <200, 200>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.PascalDistributionImpl <60, 60>
return numberOfSuccesses;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.PascalDistributionImpl <60, 60>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.PascalDistributionImpl <60, 60>
return numberOfSuccesses;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.PascalDistributionImpl <68, 68>
return probabilityOfSuccess;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.PascalDistributionImpl <68, 68>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.PascalDistributionImpl <68, 68>
return probabilityOfSuccess;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.PascalDistributionImpl <141, 141>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.PascalDistributionImpl <141, 141>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.PascalDistributionImpl <141, 141>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.PascalDistributionImpl <159, 159>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.PascalDistributionImpl <159, 159>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.PascalDistributionImpl <159, 159>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.PascalDistributionImpl <188, 188>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.PascalDistributionImpl <188, 188>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.PascalDistributionImpl <188, 188>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.GammaDistributionImpl <79, 79>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.GammaDistributionImpl <79, 79>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.GammaDistributionImpl <79, 79>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.GammaDistributionImpl <102, 102>
return Double.POSITIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.GammaDistributionImpl <102, 102>
return Double.POSITIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.GammaDistributionImpl <102, 102>
return Double.POSITIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.GammaDistributionImpl <126, 126>
return alpha;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.GammaDistributionImpl <126, 126>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.GammaDistributionImpl <126, 126>
return alpha;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.GammaDistributionImpl <148, 148>
return beta;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.GammaDistributionImpl <148, 148>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.GammaDistributionImpl <148, 148>
return beta;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.GammaDistributionImpl <174, 174>
return Double.MIN_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.GammaDistributionImpl <174, 174>
return Double.MIN_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.GammaDistributionImpl <174, 174>
return Double.MIN_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.GammaDistributionImpl <202, 202>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.GammaDistributionImpl <202, 202>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.GammaDistributionImpl <202, 202>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.GammaDistributionImpl <228, 228>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.GammaDistributionImpl <228, 228>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.GammaDistributionImpl <228, 228>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.WeibullDistributionImpl <67, 67>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.WeibullDistributionImpl <67, 67>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.WeibullDistributionImpl <67, 67>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.WeibullDistributionImpl <75, 75>
return alpha;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.WeibullDistributionImpl <75, 75>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.WeibullDistributionImpl <75, 75>
return alpha;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.WeibullDistributionImpl <83, 83>
return beta;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.WeibullDistributionImpl <83, 83>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.WeibullDistributionImpl <83, 83>
return beta;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.WeibullDistributionImpl <111, 111>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.WeibullDistributionImpl <111, 111>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.WeibullDistributionImpl <111, 111>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.WeibullDistributionImpl <165, 165>
return Double.MAX_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.WeibullDistributionImpl <165, 165>
return Double.MAX_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.WeibullDistributionImpl <165, 165>
return Double.MAX_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.ExponentialDistributionImpl <65, 65>
return mean;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.ExponentialDistributionImpl <65, 65>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.ExponentialDistributionImpl <65, 65>
return mean;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.ExponentialDistributionImpl <103, 103>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.ExponentialDistributionImpl <103, 103>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.ExponentialDistributionImpl <103, 103>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.ExponentialDistributionImpl <131, 131>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.ExponentialDistributionImpl <131, 131>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.ExponentialDistributionImpl <131, 131>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.ExponentialDistributionImpl <162, 162>
return getMean();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.ExponentialDistributionImpl <162, 162>
return getMean();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.ExponentialDistributionImpl <162, 162>
return getMean();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.ExponentialDistributionImpl <165, 165>
return Double.MAX_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.ExponentialDistributionImpl <165, 165>
return Double.MAX_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.ExponentialDistributionImpl <165, 165>
return Double.MAX_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.ExponentialDistributionImpl <187, 187>
return getMean();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.ExponentialDistributionImpl <187, 187>
return getMean();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.ExponentialDistributionImpl <187, 187>
return getMean();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.TDistributionImpl <68, 68>
return degreesOfFreedom;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.TDistributionImpl <68, 68>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.TDistributionImpl <68, 68>
return degreesOfFreedom;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.TDistributionImpl <95, 95>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.TDistributionImpl <95, 95>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.TDistributionImpl <95, 95>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.TDistributionImpl <116, 116>
return Double.NEGATIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.TDistributionImpl <116, 116>
return Double.NEGATIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.TDistributionImpl <116, 116>
return Double.NEGATIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.TDistributionImpl <119, 119>
return Double.POSITIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.TDistributionImpl <119, 119>
return Double.POSITIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.TDistributionImpl <119, 119>
return Double.POSITIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.TDistributionImpl <149, 149>
return Double.MAX_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.TDistributionImpl <149, 149>
return Double.MAX_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.TDistributionImpl <149, 149>
return Double.MAX_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.PoissonDistributionImpl <79, 79>
return this.mean;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.PoissonDistributionImpl <79, 79>
return AbstractIntegerDistribution.doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.PoissonDistributionImpl <79, 79>
return AbstractIntegerDistribution.mean;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.PoissonDistributionImpl <175, 175>
return Integer.MAX_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.PoissonDistributionImpl <175, 175>
return Integer.MAX_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.PoissonDistributionImpl <175, 175>
return Integer.MAX_VALUE;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.BetaDistributionImpl <71, 71>
return alpha;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.BetaDistributionImpl <71, 71>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.BetaDistributionImpl <71, 71>
return alpha;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.BetaDistributionImpl <82, 82>
return beta;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.BetaDistributionImpl <82, 82>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.BetaDistributionImpl <82, 82>
return beta;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.BetaDistributionImpl <131, 131>
return p;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.BetaDistributionImpl <131, 131>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.BetaDistributionImpl <131, 131>
return p;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.NormalDistributionImpl <72, 72>
return mean;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.NormalDistributionImpl <72, 72>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.NormalDistributionImpl <72, 72>
return mean;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.NormalDistributionImpl <88, 88>
return standardDeviation;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.NormalDistributionImpl <88, 88>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.NormalDistributionImpl <88, 88>
return standardDeviation;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.NormalDistributionImpl <157, 157>
return Double.NEGATIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.NormalDistributionImpl <157, 157>
return Double.NEGATIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.NormalDistributionImpl <157, 157>
return Double.NEGATIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.NormalDistributionImpl <160, 160>
return Double.POSITIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.NormalDistributionImpl <160, 160>
return Double.POSITIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.NormalDistributionImpl <160, 160>
return Double.POSITIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.NormalDistributionImpl <184, 184>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.NormalDistributionImpl <184, 184>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.NormalDistributionImpl <184, 184>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.NormalDistributionImpl <206, 206>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.NormalDistributionImpl <206, 206>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.NormalDistributionImpl <206, 206>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.distribution.NormalDistributionImpl <229, 229>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.distribution.NormalDistributionImpl <229, 229>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.distribution.NormalDistributionImpl <229, 229>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.Fraction <293, 293>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.Fraction <293, 293>
return Number;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.Fraction <293, 293>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.Fraction <348, 348>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.Fraction <348, 348>
return booleanVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.Fraction <348, 348>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.Fraction <358, 358>
return (float)doubleValue();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.Fraction <358, 358>
return (float)doubleValue();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.Fraction <358, 358>
return (float)doubleValue();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.Fraction <366, 366>
return denominator;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.Fraction <366, 366>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.Fraction <366, 366>
return denominator;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.Fraction <374, 374>
return numerator;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.Fraction <374, 374>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.Fraction <374, 374>
return numerator;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.Fraction <393, 393>
return (int)doubleValue();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.Fraction <393, 393>
return (int)doubleValue();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.Fraction <393, 393>
return (int)doubleValue();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.Fraction <403, 403>
return (long)doubleValue();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.Fraction <403, 403>
return (long)doubleValue();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.Fraction <403, 403>
return (long)doubleValue();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.Fraction <544, 544>
return ZERO;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.Fraction <544, 544>
return Number;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.Fraction <544, 544>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.Fraction <613, 613>
return ZERO;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.Fraction <613, 613>
return Number;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.Fraction <613, 613>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.Fraction <655, 655>
return str;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.Fraction <655, 655>
return StringVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.Fraction <655, 655>
return str;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.BigFraction <114, 114>
return ZERO;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.BigFraction <114, 114>
return Number;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.BigFraction <114, 114>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.BigFraction <718, 718>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.BigFraction <718, 718>
return booleanVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.BigFraction <718, 718>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.BigFraction <743, 743>
return denominator;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.BigFraction <743, 743>
return BigInteger;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.BigFraction <743, 743>
return BigInteger;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.BigFraction <776, 776>
return numerator;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.BigFraction <776, 776>
return BigInteger;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.BigFraction <776, 776>
return BigInteger;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.BigFraction <905, 905>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.BigFraction <905, 905>
return Number;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.BigFraction <905, 905>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.BigFraction <1124, 1124>
return str;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.BigFraction <1124, 1124>
return StringVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.BigFraction <1124, 1124>
return str;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.FractionField <47, 47>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.FractionField <47, 47>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.FractionField <47, 47>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.FractionField <52, 52>
return Fraction.ONE;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.FractionField <52, 52>
return Fraction.ONE;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.FractionField <52, 52>
return Fraction.ONE;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.FractionField <57, 57>
return Fraction.ZERO;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.FractionField <57, 57>
return Fraction.ZERO;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.FractionField <57, 57>
return Fraction.ZERO;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.FractionField <73, 73>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.FractionField <73, 73>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.FractionField <73, 73>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.FractionFormat <154, 154>
return toAppendTo;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.FractionFormat <154, 154>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.FractionFormat <154, 154>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.FractionFormat <191, 191>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.FractionFormat <191, 191>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.FractionFormat <191, 191>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.FractionFormat <210, 210>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.FractionFormat <210, 210>
return Number;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.FractionFormat <210, 210>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.ProperFractionFormat <110, 110>
return toAppendTo;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.ProperFractionFormat <110, 110>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.ProperFractionFormat <110, 110>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.ProperFractionFormat <118, 118>
return wholeFormat;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.ProperFractionFormat <118, 118>
return NumberFormat;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.ProperFractionFormat <118, 118>
return NumberFormat;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.ProperFractionFormat <138, 138>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.ProperFractionFormat <138, 138>
return Number;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.ProperFractionFormat <138, 138>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.AbstractFormat <94, 94>
return nf;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.AbstractFormat <94, 94>
return NumberFormat;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.AbstractFormat <94, 94>
return NumberFormat;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.AbstractFormat <102, 102>
return denominatorFormat;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.AbstractFormat <102, 102>
return NumberFormat;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.AbstractFormat <102, 102>
return NumberFormat;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.AbstractFormat <110, 110>
return numeratorFormat;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.AbstractFormat <110, 110>
return NumberFormat;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.AbstractFormat <110, 110>
return NumberFormat;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.AbstractFormat <177, 177>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.AbstractFormat <177, 177>
return charVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.AbstractFormat <177, 177>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.BigFractionField <47, 47>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.BigFractionField <47, 47>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.BigFractionField <47, 47>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.BigFractionField <52, 52>
return BigFraction.ONE;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.BigFractionField <52, 52>
return BigFraction.ONE;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.BigFractionField <52, 52>
return BigFraction.ONE;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.BigFractionField <57, 57>
return BigFraction.ZERO;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.BigFractionField <57, 57>
return BigFraction.ZERO;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.BigFractionField <57, 57>
return BigFraction.ZERO;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.BigFractionField <73, 73>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.BigFractionField <73, 73>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.BigFractionField <73, 73>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.ProperBigFractionFormat <110, 110>
return toAppendTo;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.ProperBigFractionFormat <110, 110>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.ProperBigFractionFormat <110, 110>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.ProperBigFractionFormat <118, 118>
return wholeFormat;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.ProperBigFractionFormat <118, 118>
return NumberFormat;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.ProperBigFractionFormat <118, 118>
return NumberFormat;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.ProperBigFractionFormat <138, 138>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.ProperBigFractionFormat <138, 138>
return Number;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.ProperBigFractionFormat <138, 138>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.BigFractionFormat <146, 146>
return toAppendTo;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.BigFractionFormat <146, 146>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.BigFractionFormat <146, 146>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.BigFractionFormat <180, 180>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.BigFractionFormat <180, 180>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.BigFractionFormat <180, 180>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.BigFractionFormat <199, 199>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.BigFractionFormat <199, 199>
return Number;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.BigFractionFormat <199, 199>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.fraction.BigFractionFormat <282, 282>
return n;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.fraction.BigFractionFormat <282, 282>
return BigInteger;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.fraction.BigFractionFormat <282, 282>
return BigInteger;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.DimensionMismatchException <46, 46>
return dimension1;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.DimensionMismatchException <46, 46>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.DimensionMismatchException <46, 46>
return dimension1;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.DimensionMismatchException <54, 54>
return dimension2;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.DimensionMismatchException <54, 54>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.DimensionMismatchException <54, 54>
return dimension2;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl <38, 38>
return newBrentSolver();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl <38, 38>
return newBrentSolver();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl <38, 38>
return newBrentSolver();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl <44, 44>
return new BisectionSolver();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl <44, 44>
return new BisectionSolver();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl <44, 44>
return new BisectionSolver();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl <50, 50>
return new BrentSolver();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl <50, 50>
return new BrentSolver();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl <50, 50>
return new BrentSolver();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl <56, 56>
return new NewtonSolver();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl <56, 56>
return new NewtonSolver();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl <56, 56>
return new NewtonSolver();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl <62, 62>
return new SecantSolver();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl <62, 62>
return new SecantSolver();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl <62, 62>
return new SecantSolver();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.NewtonSolver <123, 123>
return x1;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.NewtonSolver <123, 123>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.NewtonSolver <123, 123>
return x1;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.BrentSolver <104, 104>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.BrentSolver <104, 104>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.BrentSolver <104, 104>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.BrentSolver <111, 111>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.BrentSolver <111, 111>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.BrentSolver <111, 111>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.BrentSolver <123, 123>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.BrentSolver <123, 123>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.BrentSolver <123, 123>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.BrentSolver <195, 195>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.BrentSolver <195, 195>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.BrentSolver <195, 195>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.BrentSolver <240, 240>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.BrentSolver <240, 240>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.BrentSolver <240, 240>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.BrentSolver <247, 247>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.BrentSolver <247, 247>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.BrentSolver <247, 247>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl <110, 110>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl <110, 110>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl <110, 110>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl <116, 116>
return functionValue;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl <116, 116>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl <116, 116>
return functionValue;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl <126, 126>
return functionValueAccuracy;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl <126, 126>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl <126, 126>
return functionValueAccuracy;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.BisectionSolver <102, 102>
return m;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.BisectionSolver <102, 102>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.BisectionSolver <102, 102>
return m;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.MullerSolver <96, 96>
if (f.value(min) == 0.0) { return min; }

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <96, 96>
if (UnivariateRealFunction.value(doubleVar) == 0.0) { return doubleVar; }

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.MullerSolver <96, 96>
if (UnivariateRealFunction.value(min) == 0.0) { return min; }

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.MullerSolver <97, 97>
if (f.value(max) == 0.0) { return max; }

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <97, 97>
if (UnivariateRealFunction.value(doubleVar) == 0.0) { return doubleVar; }

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.MullerSolver <97, 97>
if (UnivariateRealFunction.value(max) == 0.0) { return max; }

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.MullerSolver <98, 98>
if (f.value(initial) == 0.0) { return initial; }

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <98, 98>
if (UnivariateRealFunction.value(doubleVar) == 0.0) { return doubleVar; }

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.MullerSolver <98, 98>
if (UnivariateRealFunction.value(initial) == 0.0) { return initial; }

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.MullerSolver <150, 150>
if (y0 == 0.0) { return min; }

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <150, 150>
if (doubleVar == 0.0) { return doubleVar; }

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.MullerSolver <150, 150>
if (y0 == 0.0) { return min; }

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.MullerSolver <151, 151>
if (y2 == 0.0) { return max; }

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <151, 151>
if (doubleVar == 0.0) { return doubleVar; }

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.MullerSolver <151, 151>
if (y2 == 0.0) { return max; }

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.MullerSolver <177, 177>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <177, 177>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.MullerSolver <177, 177>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.MullerSolver <181, 181>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <181, 181>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.MullerSolver <181, 181>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.MullerSolver <290, 290>
if (y0 == 0.0) { return min; }

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <290, 290>
if (doubleVar == 0.0) { return doubleVar; }

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.MullerSolver <290, 290>
if (y0 == 0.0) { return min; }

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.MullerSolver <291, 291>
if (y1 == 0.0) { return max; }

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <291, 291>
if (doubleVar == 0.0) { return doubleVar; }

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.MullerSolver <291, 291>
if (y1 == 0.0) { return max; }

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.MullerSolver <330, 330>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <330, 330>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.MullerSolver <330, 330>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.MullerSolver <334, 334>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.MullerSolver <334, 334>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.MullerSolver <334, 334>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.RiddersSolver <94, 94>
if (f.value(min) == 0.0) { return min; }

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.RiddersSolver <94, 94>
if (UnivariateRealFunction.value(doubleVar) == 0.0) { return doubleVar; }

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.RiddersSolver <94, 94>
if (UnivariateRealFunction.value(min) == 0.0) { return min; }

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.RiddersSolver <95, 95>
if (f.value(max) == 0.0) { return max; }

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.RiddersSolver <95, 95>
if (UnivariateRealFunction.value(doubleVar) == 0.0) { return doubleVar; }

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.RiddersSolver <95, 95>
if (UnivariateRealFunction.value(max) == 0.0) { return max; }

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.RiddersSolver <96, 96>
if (f.value(initial) == 0.0) { return initial; }

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.RiddersSolver <96, 96>
if (UnivariateRealFunction.value(doubleVar) == 0.0) { return doubleVar; }

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.RiddersSolver <96, 96>
if (UnivariateRealFunction.value(initial) == 0.0) { return initial; }

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.RiddersSolver <134, 134>
if (y1 == 0.0) { return min; }

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.RiddersSolver <134, 134>
if (doubleVar == 0.0) { return doubleVar; }

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.RiddersSolver <134, 134>
if (y1 == 0.0) { return min; }

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.RiddersSolver <135, 135>
if (y2 == 0.0) { return max; }

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.RiddersSolver <135, 135>
if (doubleVar == 0.0) { return doubleVar; }

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.RiddersSolver <135, 135>
if (y2 == 0.0) { return max; }

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.RiddersSolver <146, 146>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.RiddersSolver <146, 146>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.RiddersSolver <146, 146>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.RiddersSolver <158, 158>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.RiddersSolver <158, 158>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.RiddersSolver <158, 158>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.RiddersSolver <162, 162>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.RiddersSolver <162, 162>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.RiddersSolver <162, 162>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.LaguerreSolver <120, 120>
if (f.value(min) == 0.0) { return min; }

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.LaguerreSolver <120, 120>
if (UnivariateRealFunction.value(doubleVar) == 0.0) { return doubleVar; }

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.LaguerreSolver <120, 120>
if (UnivariateRealFunction.value(min) == 0.0) { return min; }

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.LaguerreSolver <121, 121>
if (f.value(max) == 0.0) { return max; }

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.LaguerreSolver <121, 121>
if (UnivariateRealFunction.value(doubleVar) == 0.0) { return doubleVar; }

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.LaguerreSolver <121, 121>
if (UnivariateRealFunction.value(max) == 0.0) { return max; }

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.LaguerreSolver <122, 122>
if (f.value(initial) == 0.0) { return initial; }

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.LaguerreSolver <122, 122>
if (UnivariateRealFunction.value(doubleVar) == 0.0) { return doubleVar; }

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.LaguerreSolver <122, 122>
if (UnivariateRealFunction.value(initial) == 0.0) { return initial; }

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.LaguerreSolver <163, 163>
if (f.value(min) == 0.0) { return min; }

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.LaguerreSolver <163, 163>
if (UnivariateRealFunction.value(doubleVar) == 0.0) { return doubleVar; }

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.LaguerreSolver <163, 163>
if (UnivariateRealFunction.value(min) == 0.0) { return min; }

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.LaguerreSolver <164, 164>
if (f.value(max) == 0.0) { return max; }

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.LaguerreSolver <164, 164>
if (UnivariateRealFunction.value(doubleVar) == 0.0) { return doubleVar; }

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.LaguerreSolver <164, 164>
if (UnivariateRealFunction.value(max) == 0.0) { return max; }

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.LaguerreSolver <176, 176>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.LaguerreSolver <176, 176>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.LaguerreSolver <176, 176>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.LaguerreSolver <184, 184>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.LaguerreSolver <184, 184>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.LaguerreSolver <184, 184>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.LaguerreSolver <278, 278>
return root;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.LaguerreSolver <278, 278>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.LaguerreSolver <278, 278>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.LaguerreSolver <335, 335>
return z;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.LaguerreSolver <335, 335>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.LaguerreSolver <335, 335>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.LaguerreSolver <340, 340>
return z;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.LaguerreSolver <340, 340>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.LaguerreSolver <340, 340>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.SecantSolver <150, 150>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.SecantSolver <150, 150>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.SecantSolver <150, 150>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.SecantSolver <155, 155>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.SecantSolver <155, 155>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.SecantSolver <155, 155>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactory <52, 52>
return new UnivariateRealSolverFactoryImpl();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactory <52, 52>
return new UnivariateRealSolverFactoryImpl();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactory <52, 52>
return new UnivariateRealSolverFactoryImpl();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <80, 80>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <80, 80>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <80, 80>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <94, 94>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <94, 94>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.integration.SimpsonIntegrator <94, 94>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.integration.RombergIntegrator <96, 96>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.integration.RombergIntegrator <96, 96>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.integration.RombergIntegrator <96, 96>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.integration.TrapezoidIntegrator <85, 85>
return s;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.integration.TrapezoidIntegrator <85, 85>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.integration.TrapezoidIntegrator <85, 85>
return s;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.integration.TrapezoidIntegrator <96, 96>
return s;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.integration.TrapezoidIntegrator <96, 96>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.integration.TrapezoidIntegrator <96, 96>
return s;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.integration.TrapezoidIntegrator <128, 128>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.integration.TrapezoidIntegrator <128, 128>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.integration.TrapezoidIntegrator <128, 128>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl <109, 109>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl <109, 109>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl <109, 109>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl <142, 142>
return minimalIterationCount;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl <142, 142>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl <142, 142>
return minimalIterationCount;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.integration.LegendreGaussIntegrator <189, 189>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.integration.LegendreGaussIntegrator <189, 189>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.integration.LegendreGaussIntegrator <189, 189>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction <157, 157>
return polynomialSplineDerivative();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction <157, 157>
return polynomialSplineDerivative();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction <157, 157>
return polynomialSplineDerivative();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction <180, 180>
return n;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction <180, 180>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction <180, 180>
return n;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction <194, 194>
return p;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction <194, 194>
return PolynomialFunction;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction <194, 194>
return PolynomialFunction;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction <208, 208>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction <208, 208>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction <208, 208>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.polynomials.PolynomialFunction <131, 131>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.polynomials.PolynomialFunction <131, 131>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.polynomials.PolynomialFunction <131, 131>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.polynomials.PolynomialFunction <243, 243>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.polynomials.PolynomialFunction <243, 243>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.polynomials.PolynomialFunction <243, 243>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.polynomials.PolynomialFunction <261, 261>
return polynomialDerivative();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.polynomials.PolynomialFunction <261, 261>
return polynomialDerivative();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.polynomials.PolynomialFunction <261, 261>
return polynomialDerivative();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.polynomials.PolynomialFunction <332, 332>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.polynomials.PolynomialFunction <332, 332>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.polynomials.PolynomialFunction <332, 332>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm <111, 111>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm <111, 111>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm <111, 111>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm <124, 124>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm <124, 124>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm <124, 124>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm <140, 140>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm <140, 140>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm <140, 140>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm <166, 166>
return value;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm <166, 166>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm <166, 166>
return value;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm <111, 111>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm <111, 111>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm <111, 111>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm <124, 124>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm <124, 124>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm <124, 124>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm <140, 140>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm <140, 140>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm <140, 140>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm <208, 208>
return value;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm <208, 208>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm <208, 208>
return value;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolator <125, 125>
return a;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolator <125, 125>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolator <125, 125>
return a;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.analysis.interpolation.LoessInterpolator <300, 300>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.analysis.interpolation.LoessInterpolator <300, 300>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.analysis.interpolation.LoessInterpolator <300, 300>
return res;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <196, 196>
return entries;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <196, 196>
return OpenIntToDoubleHashMap;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <196, 196>
return OpenIntToDoubleHashMap;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <213, 213>
return epsilon;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <213, 213>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <213, 213>
return epsilon;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <252, 252>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <252, 252>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <252, 252>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <262, 262>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <262, 262>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <262, 262>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <277, 277>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <277, 277>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <277, 277>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <292, 292>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <292, 292>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <292, 292>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <301, 301>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <301, 301>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <301, 301>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <306, 306>
return new OpenMapRealVector(this);

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <306, 306>
return new OpenMapRealVector(this);

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <306, 306>
return new OpenMapRealVector(this);

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <318, 318>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <318, 318>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <318, 318>
return res;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <334, 334>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <334, 334>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <334, 334>
return res;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <346, 346>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <346, 346>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <346, 346>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <358, 358>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <358, 358>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <358, 358>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <370, 370>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <370, 370>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <370, 370>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <382, 382>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <382, 382>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <382, 382>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <399, 399>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <399, 399>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <399, 399>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <410, 410>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <410, 410>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <410, 410>
return res;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <415, 415>
return virtualSize;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <415, 415>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <415, 415>
return virtualSize;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <497, 497>
return max;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <497, 497>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <497, 497>
return max;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <517, 517>
return max;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <517, 517>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <517, 517>
return max;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <528, 528>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <528, 528>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <528, 528>
return res;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <556, 556>
return max;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <556, 556>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <556, 556>
return max;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <578, 578>
return max;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <578, 578>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <578, 578>
return max;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <589, 589>
return max;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <589, 589>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <589, 589>
return max;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <617, 617>
return infiniteFound;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <617, 617>
return booleanVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <617, 617>
return infiniteFound;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <1049, 1049>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <1049, 1049>
return AbstractRealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <1049, 1049>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <1068, 1068>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <1068, 1068>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <1068, 1068>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <1084, 1084>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <1084, 1084>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <1084, 1084>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <1151, 1151>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <1151, 1151>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <1151, 1151>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <1174, 1174>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <1174, 1174>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <1174, 1174>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <1182, 1182>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <1182, 1182>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <1182, 1182>
return OpenMapRealVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <1233, 1233>
return getData();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <1233, 1233>
return getData();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <1233, 1233>
return getData();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealVector <1255, 1255>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealVector <1255, 1255>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealVector <1255, 1255>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealMatrix <69, 69>
return new OpenMapRealMatrix(this);

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealMatrix <69, 69>
return new OpenMapRealMatrix(this);

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealMatrix <69, 69>
return new OpenMapRealMatrix(this);

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealMatrix <82, 82>
return columnDimension;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealMatrix <82, 82>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealMatrix <82, 82>
return columnDimension;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealMatrix <116, 116>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealMatrix <116, 116>
return AbstractRealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealMatrix <116, 116>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealMatrix <151, 151>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealMatrix <151, 151>
return AbstractRealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealMatrix <151, 151>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealMatrix <179, 179>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealMatrix <179, 179>
return AbstractRealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealMatrix <179, 179>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealMatrix <220, 220>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealMatrix <220, 220>
return AbstractRealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealMatrix <220, 220>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.OpenMapRealMatrix <235, 235>
return rowDimension;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.OpenMapRealMatrix <235, 235>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.OpenMapRealMatrix <235, 235>
return rowDimension;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.RealVectorFormat <141, 141>
return prefix;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.RealVectorFormat <141, 141>
return StringVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.RealVectorFormat <141, 141>
return prefix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.RealVectorFormat <149, 149>
return suffix;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.RealVectorFormat <149, 149>
return StringVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.RealVectorFormat <149, 149>
return suffix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.RealVectorFormat <157, 157>
return separator;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.RealVectorFormat <157, 157>
return StringVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.RealVectorFormat <157, 157>
return separator;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.RealVectorFormat <165, 165>
return format;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.RealVectorFormat <165, 165>
return NumberFormat;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.RealVectorFormat <165, 165>
return NumberFormat;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.RealVectorFormat <224, 224>
return toAppendTo;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.RealVectorFormat <224, 224>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.RealVectorFormat <224, 224>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.RealVectorFormat <269, 269>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.RealVectorFormat <269, 269>
return ArrayRealVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.RealVectorFormat <269, 269>
return ArrayRealVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldMatrix <121, 121>
return new SparseFieldMatrix<T>(this);

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldMatrix <121, 121>
return new SparseFieldMatrix<T>(this);

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldMatrix <121, 121>
return new SparseFieldMatrix<T>(this);

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldMatrix <134, 134>
return columnDimension;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldMatrix <134, 134>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldMatrix <134, 134>
return columnDimension;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldMatrix <148, 148>
return rowDimension;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldMatrix <148, 148>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldMatrix <148, 148>
return rowDimension;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.LUDecompositionImpl <175, 175>
return cachedL;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.LUDecompositionImpl <175, 175>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.LUDecompositionImpl <175, 175>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.LUDecompositionImpl <190, 190>
return cachedU;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.LUDecompositionImpl <190, 190>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.LUDecompositionImpl <190, 190>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.LUDecompositionImpl <202, 202>
return cachedP;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.LUDecompositionImpl <202, 202>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.LUDecompositionImpl <202, 202>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.LUDecompositionImpl <220, 220>
return determinant;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.LUDecompositionImpl <220, 220>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.LUDecompositionImpl <220, 220>
return determinant;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.LUDecompositionImpl <296, 296>
return bp;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.LUDecompositionImpl <296, 296>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.LUDecompositionImpl <296, 296>
return bp;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractFieldMatrix <98, 98>
return array;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractFieldMatrix <98, 98>
return T[][]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractFieldMatrix <98, 98>
return array;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractFieldMatrix <115, 115>
return array;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractFieldMatrix <115, 115>
return T[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractFieldMatrix <115, 115>
return array;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractFieldMatrix <159, 159>
return field;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractFieldMatrix <159, 159>
return Field;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractFieldMatrix <159, 159>
return Field;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractFieldMatrix <184, 184>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractFieldMatrix <184, 184>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractFieldMatrix <184, 184>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractFieldMatrix <203, 203>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractFieldMatrix <203, 203>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractFieldMatrix <203, 203>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractFieldMatrix <219, 219>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractFieldMatrix <219, 219>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractFieldMatrix <219, 219>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractFieldMatrix <235, 235>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractFieldMatrix <235, 235>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractFieldMatrix <235, 235>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractFieldMatrix <260, 260>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractFieldMatrix <260, 260>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractFieldMatrix <260, 260>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractFieldMatrix <282, 282>
return data;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractFieldMatrix <282, 282>
return T[][]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractFieldMatrix <282, 282>
return data;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractFieldMatrix <301, 301>
return subMatrix;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractFieldMatrix <301, 301>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractFieldMatrix <301, 301>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractFieldMatrix <325, 325>
return subMatrix;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractFieldMatrix <325, 325>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractFieldMatrix <325, 325>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractFieldMatrix <444, 444>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractFieldMatrix <444, 444>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractFieldMatrix <444, 444>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractFieldMatrix <477, 477>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractFieldMatrix <477, 477>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractFieldMatrix <477, 477>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractFieldMatrix <556, 556>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractFieldMatrix <556, 556>
return T[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractFieldMatrix <556, 556>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractFieldMatrix <588, 588>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractFieldMatrix <588, 588>
return T[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractFieldMatrix <588, 588>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractFieldMatrix <641, 641>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractFieldMatrix <641, 641>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractFieldMatrix <641, 641>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractFieldMatrix <668, 668>
return trace;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractFieldMatrix <668, 668>
return TVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractFieldMatrix <668, 668>
return trace;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractFieldMatrix <692, 692>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractFieldMatrix <692, 692>
return T[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractFieldMatrix <692, 692>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractFieldMatrix <744, 744>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractFieldMatrix <744, 744>
return T[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractFieldMatrix <744, 744>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractFieldMatrix <1015, 1015>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractFieldMatrix <1015, 1015>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractFieldMatrix <1015, 1015>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.QRDecompositionImpl <167, 167>
return cachedR;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.QRDecompositionImpl <167, 167>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.QRDecompositionImpl <167, 167>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.QRDecompositionImpl <176, 176>
return cachedQ;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.QRDecompositionImpl <176, 176>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.QRDecompositionImpl <176, 176>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.QRDecompositionImpl <219, 219>
return cachedQT;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.QRDecompositionImpl <219, 219>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.QRDecompositionImpl <219, 219>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.QRDecompositionImpl <240, 240>
return cachedH;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.QRDecompositionImpl <240, 240>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.QRDecompositionImpl <240, 240>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.QRDecompositionImpl <330, 330>
return x;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.QRDecompositionImpl <330, 330>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.QRDecompositionImpl <330, 330>
return x;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.MatrixUtils <146, 146>
return m;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.MatrixUtils <146, 146>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.MatrixUtils <146, 146>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.MatrixUtils <206, 206>
return m;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.MatrixUtils <206, 206>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.MatrixUtils <206, 206>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.MatrixUtils <225, 225>
return m;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.MatrixUtils <225, 225>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.MatrixUtils <225, 225>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.MatrixUtils <338, 338>
return m;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.MatrixUtils <338, 338>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.MatrixUtils <338, 338>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.MatrixUtils <361, 361>
return m;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.MatrixUtils <361, 361>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.MatrixUtils <361, 361>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.MatrixUtils <437, 437>
return m;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.MatrixUtils <437, 437>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.MatrixUtils <437, 437>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.MatrixUtils <460, 460>
return m;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.MatrixUtils <460, 460>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.MatrixUtils <460, 460>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.Array2DRowFieldMatrix <288, 288>
return copyOut();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.Array2DRowFieldMatrix <288, 288>
return copyOut();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.Array2DRowFieldMatrix <288, 288>
return copyOut();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.Array2DRowFieldMatrix <299, 299>
return data;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.Array2DRowFieldMatrix <299, 299>
return T[][]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.Array2DRowFieldMatrix <299, 299>
return data;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.Array2DRowFieldMatrix <425, 425>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.Array2DRowFieldMatrix <425, 425>
return T[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.Array2DRowFieldMatrix <425, 425>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.Array2DRowFieldMatrix <450, 450>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.Array2DRowFieldMatrix <450, 450>
return T[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.Array2DRowFieldMatrix <450, 450>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.Array2DRowFieldMatrix <600, 600>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.Array2DRowFieldMatrix <600, 600>
return T[][]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.Array2DRowFieldMatrix <600, 600>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <244, 244>
return blocks;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <244, 244>
return double[][]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <244, 244>
return blocks;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <278, 278>
return blocks;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <278, 278>
return double[][]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <278, 278>
return blocks;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <301, 301>
return copied;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <301, 301>
return AbstractRealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <301, 301>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <342, 342>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <342, 342>
return AbstractRealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <342, 342>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <372, 372>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <372, 372>
return AbstractRealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <372, 372>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <413, 413>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <413, 413>
return AbstractRealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <413, 413>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <443, 443>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <443, 443>
return AbstractRealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <443, 443>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <463, 463>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <463, 463>
return AbstractRealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <463, 463>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <483, 483>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <483, 483>
return AbstractRealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <483, 483>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <539, 539>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <539, 539>
return AbstractRealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <539, 539>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <610, 610>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <610, 610>
return AbstractRealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <610, 610>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <640, 640>
return data;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <640, 640>
return double[][]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <640, 640>
return data;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <667, 667>
return maxColSum;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <667, 667>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <667, 667>
return maxColSum;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <772, 772>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <772, 772>
return AbstractRealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <772, 772>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <888, 888>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <888, 888>
return AbstractRealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <888, 888>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <977, 977>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <977, 977>
return AbstractRealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <977, 977>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <1126, 1126>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <1126, 1126>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <1126, 1126>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <1177, 1177>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <1177, 1177>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <1177, 1177>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <1310, 1310>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <1310, 1310>
return AbstractRealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <1310, 1310>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <1317, 1317>
return rows;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <1317, 1317>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <1317, 1317>
return rows;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <1323, 1323>
return columns;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <1323, 1323>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <1323, 1323>
return columns;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <1365, 1365>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <1365, 1365>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <1365, 1365>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockRealMatrix <1414, 1414>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockRealMatrix <1414, 1414>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockRealMatrix <1414, 1414>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.FieldLUDecompositionImpl <167, 167>
return cachedL;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.FieldLUDecompositionImpl <167, 167>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.FieldLUDecompositionImpl <167, 167>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.FieldLUDecompositionImpl <182, 182>
return cachedU;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.FieldLUDecompositionImpl <182, 182>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.FieldLUDecompositionImpl <182, 182>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.FieldLUDecompositionImpl <194, 194>
return cachedP;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.FieldLUDecompositionImpl <194, 194>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.FieldLUDecompositionImpl <194, 194>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.FieldLUDecompositionImpl <212, 212>
return determinant;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.FieldLUDecompositionImpl <212, 212>
return TVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.FieldLUDecompositionImpl <212, 212>
return determinant;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.FieldLUDecompositionImpl <298, 298>
return bp;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.FieldLUDecompositionImpl <298, 298>
return T[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.FieldLUDecompositionImpl <298, 298>
return bp;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.CholeskyDecompositionImpl <158, 158>
return cachedL;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.CholeskyDecompositionImpl <158, 158>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.CholeskyDecompositionImpl <158, 158>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.CholeskyDecompositionImpl <169, 169>
return cachedLT;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.CholeskyDecompositionImpl <169, 169>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.CholeskyDecompositionImpl <169, 169>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.CholeskyDecompositionImpl <180, 180>
return determinant;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.CholeskyDecompositionImpl <180, 180>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.CholeskyDecompositionImpl <180, 180>
return determinant;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.CholeskyDecompositionImpl <240, 240>
return x;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.CholeskyDecompositionImpl <240, 240>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.CholeskyDecompositionImpl <240, 240>
return x;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.Array2DRowRealMatrix <296, 296>
return copyOut();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.Array2DRowRealMatrix <296, 296>
return copyOut();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.Array2DRowRealMatrix <296, 296>
return copyOut();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.Array2DRowRealMatrix <307, 307>
return data;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.Array2DRowRealMatrix <307, 307>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.Array2DRowRealMatrix <307, 307>
return data;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.Array2DRowRealMatrix <433, 433>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.Array2DRowRealMatrix <433, 433>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.Array2DRowRealMatrix <433, 433>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.Array2DRowRealMatrix <458, 458>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.Array2DRowRealMatrix <458, 458>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.Array2DRowRealMatrix <458, 458>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.Array2DRowRealMatrix <608, 608>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.Array2DRowRealMatrix <608, 608>
return double[][]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.Array2DRowRealMatrix <608, 608>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.DefaultFieldMatrixPreservingVisitor <58, 58>
return zero;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.DefaultFieldMatrixPreservingVisitor <58, 58>
return TVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.DefaultFieldMatrixPreservingVisitor <58, 58>
return zero;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.DefaultRealMatrixChangingVisitor <40, 40>
return value;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.DefaultRealMatrixChangingVisitor <40, 40>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.DefaultRealMatrixChangingVisitor <40, 40>
return value;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BigMatrixImpl <497, 497>
return copyOut();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BigMatrixImpl <497, 497>
return copyOut();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BigMatrixImpl <497, 497>
return copyOut();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BigMatrixImpl <517, 517>
return d;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BigMatrixImpl <517, 517>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BigMatrixImpl <517, 517>
return d;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BigMatrixImpl <528, 528>
return data;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BigMatrixImpl <528, 528>
return BigDecimal;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BigMatrixImpl <528, 528>
return BigDecimal;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BigMatrixImpl <538, 538>
return roundingMode;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BigMatrixImpl <538, 538>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BigMatrixImpl <538, 538>
return roundingMode;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BigMatrixImpl <557, 557>
return scale;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BigMatrixImpl <557, 557>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BigMatrixImpl <557, 557>
return scale;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BigMatrixImpl <584, 584>
return maxColSum;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BigMatrixImpl <584, 584>
return BigDecimal;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BigMatrixImpl <584, 584>
return BigDecimal;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BigMatrixImpl <797, 797>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BigMatrixImpl <797, 797>
return BigDecimal[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BigMatrixImpl <797, 797>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BigMatrixImpl <818, 818>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BigMatrixImpl <818, 818>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BigMatrixImpl <818, 818>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BigMatrixImpl <838, 838>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BigMatrixImpl <838, 838>
return BigDecimal[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BigMatrixImpl <838, 838>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BigMatrixImpl <859, 859>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BigMatrixImpl <859, 859>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BigMatrixImpl <859, 859>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BigMatrixImpl <947, 947>
return ZERO;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BigMatrixImpl <947, 947>
return BigDecimal;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BigMatrixImpl <947, 947>
return BigDecimal;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BigMatrixImpl <953, 953>
return det;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BigMatrixImpl <953, 953>
return BigDecimal;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BigMatrixImpl <953, 953>
return BigDecimal;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BigMatrixImpl <1016, 1016>
return trace;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BigMatrixImpl <1016, 1016>
return BigDecimal;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BigMatrixImpl <1016, 1016>
return BigDecimal;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BigMatrixImpl <1042, 1042>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BigMatrixImpl <1042, 1042>
return BigDecimal[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BigMatrixImpl <1042, 1042>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BigMatrixImpl <1083, 1083>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BigMatrixImpl <1083, 1083>
return BigDecimal[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BigMatrixImpl <1083, 1083>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BigMatrixImpl <1110, 1110>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BigMatrixImpl <1110, 1110>
return BigDecimal[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BigMatrixImpl <1110, 1110>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BigMatrixImpl <1378, 1378>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BigMatrixImpl <1378, 1378>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BigMatrixImpl <1378, 1378>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BigMatrixImpl <1432, 1432>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BigMatrixImpl <1432, 1432>
return int[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BigMatrixImpl <1432, 1432>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BigMatrixImpl <1449, 1449>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BigMatrixImpl <1449, 1449>
return BigDecimal[][]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BigMatrixImpl <1449, 1449>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayRealVector <863, 863>
return data;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayRealVector <863, 863>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayRealVector <863, 863>
return data;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayRealVector <877, 877>
return dot;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayRealVector <877, 877>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayRealVector <877, 877>
return dot;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayRealVector <889, 889>
return dot;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayRealVector <889, 889>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayRealVector <889, 889>
return dot;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayRealVector <918, 918>
return sum;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayRealVector <918, 918>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayRealVector <918, 918>
return sum;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayRealVector <927, 927>
return max;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayRealVector <927, 927>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayRealVector <927, 927>
return max;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayRealVector <988, 988>
return sum;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayRealVector <988, 988>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayRealVector <988, 988>
return sum;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayRealVector <1001, 1001>
return sum;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayRealVector <1001, 1001>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayRealVector <1001, 1001>
return sum;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayRealVector <1034, 1034>
return max;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayRealVector <1034, 1034>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayRealVector <1034, 1034>
return max;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayRealVector <1047, 1047>
return max;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayRealVector <1047, 1047>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayRealVector <1047, 1047>
return max;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayRealVector <1121, 1121>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayRealVector <1121, 1121>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayRealVector <1121, 1121>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayRealVector <1147, 1147>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayRealVector <1147, 1147>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayRealVector <1147, 1147>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayRealVector <1200, 1200>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayRealVector <1200, 1200>
return ArrayRealVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayRealVector <1200, 1200>
return ArrayRealVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayRealVector <1367, 1367>
return this.isNaN();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayRealVector <1367, 1367>
return ArrayRealVector.isNaN();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayRealVector <1367, 1367>
return ArrayRealVector.isNaN();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <250, 250>
return blocks;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <250, 250>
return T[][]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <250, 250>
return blocks;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <288, 288>
return blocks;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <288, 288>
return T[][]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <288, 288>
return blocks;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <311, 311>
return copied;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <311, 311>
return AbstractFieldMatrix<T>;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <311, 311>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <352, 352>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <352, 352>
return AbstractFieldMatrix<T>;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <352, 352>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <382, 382>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <382, 382>
return AbstractFieldMatrix<T>;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <382, 382>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <423, 423>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <423, 423>
return AbstractFieldMatrix<T>;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <423, 423>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <453, 453>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <453, 453>
return AbstractFieldMatrix<T>;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <453, 453>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <473, 473>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <473, 473>
return AbstractFieldMatrix<T>;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <473, 473>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <493, 493>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <493, 493>
return AbstractFieldMatrix<T>;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <493, 493>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <551, 551>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <551, 551>
return AbstractFieldMatrix<T>;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <551, 551>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <625, 625>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <625, 625>
return AbstractFieldMatrix<T>;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <625, 625>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <655, 655>
return data;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <655, 655>
return T[][]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <655, 655>
return data;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <749, 749>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <749, 749>
return AbstractFieldMatrix<T>;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <749, 749>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <865, 865>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <865, 865>
return AbstractFieldMatrix<T>;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <865, 865>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <954, 954>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <954, 954>
return AbstractFieldMatrix<T>;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <954, 954>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <1103, 1103>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <1103, 1103>
return T[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <1103, 1103>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <1154, 1154>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <1154, 1154>
return T[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <1154, 1154>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <1289, 1289>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <1289, 1289>
return AbstractFieldMatrix<T>;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <1289, 1289>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <1296, 1296>
return rows;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <1296, 1296>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <1296, 1296>
return rows;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <1302, 1302>
return columns;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <1302, 1302>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <1302, 1302>
return columns;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <1346, 1346>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <1346, 1346>
return T[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <1346, 1346>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BlockFieldMatrix <1397, 1397>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BlockFieldMatrix <1397, 1397>
return T[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BlockFieldMatrix <1397, 1397>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.RealMatrixImpl <298, 298>
return copyOut();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.RealMatrixImpl <298, 298>
return copyOut();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.RealMatrixImpl <298, 298>
return copyOut();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.RealMatrixImpl <309, 309>
return data;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.RealMatrixImpl <309, 309>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.RealMatrixImpl <309, 309>
return data;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.RealMatrixImpl <435, 435>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.RealMatrixImpl <435, 435>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.RealMatrixImpl <435, 435>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.RealMatrixImpl <460, 460>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.RealMatrixImpl <460, 460>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.RealMatrixImpl <460, 460>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.RealMatrixImpl <610, 610>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.RealMatrixImpl <610, 610>
return double[][]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.RealMatrixImpl <610, 610>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayFieldVector <233, 233>
return field;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayFieldVector <233, 233>
return Field;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayFieldVector <233, 233>
return Field;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayFieldVector <483, 483>
return data;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayFieldVector <483, 483>
return T[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayFieldVector <483, 483>
return data;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayFieldVector <497, 497>
return dot;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayFieldVector <497, 497>
return TVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayFieldVector <497, 497>
return dot;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayFieldVector <509, 509>
return dot;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayFieldVector <509, 509>
return TVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayFieldVector <509, 509>
return dot;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayFieldVector <556, 556>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayFieldVector <556, 556>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayFieldVector <556, 556>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayFieldVector <582, 582>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayFieldVector <582, 582>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayFieldVector <582, 582>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayFieldVector <635, 635>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayFieldVector <635, 635>
return ArrayFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayFieldVector <635, 635>
return ArrayFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.ArrayFieldVector <786, 786>
return h;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.ArrayFieldVector <786, 786>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.ArrayFieldVector <786, 786>
return h;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.TriDiagonalTransformer <93, 93>
return cachedQ;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.TriDiagonalTransformer <93, 93>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.TriDiagonalTransformer <93, 93>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.TriDiagonalTransformer <137, 137>
return cachedQt;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.TriDiagonalTransformer <137, 137>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.TriDiagonalTransformer <137, 137>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.TriDiagonalTransformer <164, 164>
return cachedT;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.TriDiagonalTransformer <164, 164>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.TriDiagonalTransformer <164, 164>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.TriDiagonalTransformer <175, 175>
return householderVectors;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.TriDiagonalTransformer <175, 175>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.TriDiagonalTransformer <175, 175>
return householderVectors;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.TriDiagonalTransformer <185, 185>
return main;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.TriDiagonalTransformer <185, 185>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.TriDiagonalTransformer <185, 185>
return main;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.TriDiagonalTransformer <195, 195>
return secondary;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.TriDiagonalTransformer <195, 195>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.TriDiagonalTransformer <195, 195>
return secondary;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.DefaultFieldMatrixChangingVisitor <54, 54>
return value;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.DefaultFieldMatrixChangingVisitor <54, 54>
return TVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.DefaultFieldMatrixChangingVisitor <54, 54>
return value;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.DefaultFieldMatrixChangingVisitor <59, 59>
return zero;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.DefaultFieldMatrixChangingVisitor <59, 59>
return TVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.DefaultFieldMatrixChangingVisitor <59, 59>
return zero;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractRealMatrix <91, 91>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractRealMatrix <91, 91>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractRealMatrix <91, 91>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractRealMatrix <110, 110>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractRealMatrix <110, 110>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractRealMatrix <110, 110>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractRealMatrix <126, 126>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractRealMatrix <126, 126>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractRealMatrix <126, 126>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractRealMatrix <142, 142>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractRealMatrix <142, 142>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractRealMatrix <142, 142>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractRealMatrix <167, 167>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractRealMatrix <167, 167>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractRealMatrix <167, 167>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractRealMatrix <189, 189>
return data;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractRealMatrix <189, 189>
return double[][]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractRealMatrix <189, 189>
return data;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractRealMatrix <274, 274>
return subMatrix;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractRealMatrix <274, 274>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractRealMatrix <274, 274>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractRealMatrix <298, 298>
return subMatrix;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractRealMatrix <298, 298>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractRealMatrix <298, 298>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractRealMatrix <419, 419>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractRealMatrix <419, 419>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractRealMatrix <419, 419>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractRealMatrix <452, 452>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractRealMatrix <452, 452>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractRealMatrix <452, 452>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractRealMatrix <531, 531>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractRealMatrix <531, 531>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractRealMatrix <531, 531>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractRealMatrix <563, 563>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractRealMatrix <563, 563>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractRealMatrix <563, 563>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractRealMatrix <616, 616>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractRealMatrix <616, 616>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractRealMatrix <616, 616>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractRealMatrix <669, 669>
return trace;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractRealMatrix <669, 669>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractRealMatrix <669, 669>
return trace;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractRealMatrix <693, 693>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractRealMatrix <693, 693>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractRealMatrix <693, 693>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractRealMatrix <745, 745>
return out;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractRealMatrix <745, 745>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractRealMatrix <745, 745>
return out;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.AbstractRealMatrix <1067, 1067>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.AbstractRealMatrix <1067, 1067>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.AbstractRealMatrix <1067, 1067>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BiDiagonalTransformer <127, 127>
return cachedU;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BiDiagonalTransformer <127, 127>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BiDiagonalTransformer <127, 127>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BiDiagonalTransformer <158, 158>
return cachedB;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BiDiagonalTransformer <158, 158>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BiDiagonalTransformer <158, 158>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BiDiagonalTransformer <208, 208>
return cachedV;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BiDiagonalTransformer <208, 208>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BiDiagonalTransformer <208, 208>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BiDiagonalTransformer <219, 219>
return householderVectors;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BiDiagonalTransformer <219, 219>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BiDiagonalTransformer <219, 219>
return householderVectors;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BiDiagonalTransformer <229, 229>
return main;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BiDiagonalTransformer <229, 229>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BiDiagonalTransformer <229, 229>
return main;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.BiDiagonalTransformer <239, 239>
return secondary;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.BiDiagonalTransformer <239, 239>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.BiDiagonalTransformer <239, 239>
return secondary;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <129, 129>
return entries;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <129, 129>
return OpenIntToFieldHashMap;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <129, 129>
return OpenIntToFieldHashMap;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <152, 152>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <152, 152>
return SparseFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <152, 152>
return SparseFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <164, 164>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <164, 164>
return SparseFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <164, 164>
return SparseFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <179, 179>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <179, 179>
return SparseFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <179, 179>
return SparseFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <195, 195>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <195, 195>
return FieldVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <195, 195>
return FieldVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <204, 204>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <204, 204>
return FieldVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <204, 204>
return FieldVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <209, 209>
return new SparseFieldVector<T>(this);

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <209, 209>
return new SparseFieldVector<T>(this);

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <209, 209>
return new SparseFieldVector<T>(this);

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <221, 221>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <221, 221>
return TVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <221, 221>
return res;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <237, 237>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <237, 237>
return TVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <237, 237>
return res;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <250, 250>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <250, 250>
return SparseFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <250, 250>
return SparseFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <262, 262>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <262, 262>
return SparseFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <262, 262>
return SparseFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <274, 274>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <274, 274>
return SparseFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <274, 274>
return SparseFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <286, 286>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <286, 286>
return SparseFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <286, 286>
return SparseFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <297, 297>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <297, 297>
return T[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <297, 297>
return res;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <302, 302>
return virtualSize;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <302, 302>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <302, 302>
return virtualSize;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <313, 313>
return field;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <313, 313>
return Field;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <313, 313>
return Field;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <331, 331>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <331, 331>
return SparseFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <331, 331>
return SparseFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <419, 419>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <419, 419>
return AbstractFieldMatrix<T>;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <419, 419>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <435, 435>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <435, 435>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <435, 435>
return FieldMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <510, 510>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <510, 510>
return SparseFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <510, 510>
return SparseFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <533, 533>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <533, 533>
return SparseFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <533, 533>
return SparseFieldVector;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <538, 538>
return getData();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <538, 538>
return getData();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <538, 538>
return getData();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SparseFieldVector <606, 606>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SparseFieldVector <606, 606>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SparseFieldVector <606, 606>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SingularValueDecompositionImpl <165, 165>
return cachedU;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SingularValueDecompositionImpl <165, 165>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SingularValueDecompositionImpl <165, 165>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SingularValueDecompositionImpl <178, 178>
return cachedUt;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SingularValueDecompositionImpl <178, 178>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SingularValueDecompositionImpl <178, 178>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SingularValueDecompositionImpl <192, 192>
return cachedS;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SingularValueDecompositionImpl <192, 192>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SingularValueDecompositionImpl <192, 192>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SingularValueDecompositionImpl <242, 242>
return cachedV;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SingularValueDecompositionImpl <242, 242>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SingularValueDecompositionImpl <242, 242>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SingularValueDecompositionImpl <255, 255>
return cachedVt;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SingularValueDecompositionImpl <255, 255>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SingularValueDecompositionImpl <255, 255>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.SingularValueDecompositionImpl <447, 447>
return nonSingular;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.SingularValueDecompositionImpl <447, 447>
return booleanVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.SingularValueDecompositionImpl <447, 447>
return nonSingular;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.EigenDecompositionImpl <269, 269>
return cachedV;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.EigenDecompositionImpl <269, 269>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.EigenDecompositionImpl <269, 269>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.EigenDecompositionImpl <280, 280>
return cachedD;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.EigenDecompositionImpl <280, 280>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.EigenDecompositionImpl <280, 280>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.EigenDecompositionImpl <302, 302>
return cachedVt;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.EigenDecompositionImpl <302, 302>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.EigenDecompositionImpl <302, 302>
return RealMatrix;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.EigenDecompositionImpl <348, 348>
return determinant;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.EigenDecompositionImpl <348, 348>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.EigenDecompositionImpl <348, 348>
return determinant;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.EigenDecompositionImpl <416, 416>
return bp;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.EigenDecompositionImpl <416, 416>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.EigenDecompositionImpl <416, 416>
return bp;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.EigenDecompositionImpl <700, 700>
return list;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.EigenDecompositionImpl <700, 700>
return ListVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.EigenDecompositionImpl <700, 700>
return list;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.EigenDecompositionImpl <992, 992>
return deflatedEnd;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.EigenDecompositionImpl <992, 992>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.EigenDecompositionImpl <992, 992>
return deflatedEnd;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.EigenDecompositionImpl <1075, 1075>
return deflatedEnd;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.EigenDecompositionImpl <1075, 1075>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.EigenDecompositionImpl <1075, 1075>
return deflatedEnd;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.EigenDecompositionImpl <1084, 1084>
return deflatedEnd;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.EigenDecompositionImpl <1084, 1084>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.EigenDecompositionImpl <1084, 1084>
return deflatedEnd;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.EigenDecompositionImpl <1112, 1112>
return deflatedEnd;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.EigenDecompositionImpl <1112, 1112>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.EigenDecompositionImpl <1112, 1112>
return deflatedEnd;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.linear.EigenDecompositionImpl <1228, 1228>
return count;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.linear.EigenDecompositionImpl <1228, 1228>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.linear.EigenDecompositionImpl <1228, 1228>
return count;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ConvergingAlgorithmImpl <73, 73>
return iterationCount;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ConvergingAlgorithmImpl <73, 73>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ConvergingAlgorithmImpl <73, 73>
return iterationCount;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ConvergingAlgorithmImpl <83, 83>
return absoluteAccuracy;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ConvergingAlgorithmImpl <83, 83>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ConvergingAlgorithmImpl <83, 83>
return absoluteAccuracy;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ConvergingAlgorithmImpl <98, 98>
return maximalIterationCount;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ConvergingAlgorithmImpl <98, 98>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ConvergingAlgorithmImpl <98, 98>
return maximalIterationCount;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.ConvergingAlgorithmImpl <113, 113>
return relativeAccuracy;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.ConvergingAlgorithmImpl <113, 113>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.ConvergingAlgorithmImpl <113, 113>
return relativeAccuracy;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.MathRuntimeException <74, 74>
return s;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.MathRuntimeException <74, 74>
return StringVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.MathRuntimeException <74, 74>
return s;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.MathRuntimeException <137, 137>
return pattern;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.MathRuntimeException <137, 137>
return StringVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.MathRuntimeException <137, 137>
return pattern;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.MathRuntimeException <270, 270>
return ioe;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.MathRuntimeException <270, 270>
return IOException;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.MathRuntimeException <270, 270>
return IOException;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.MathRuntimeException <306, 306>
return iae;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.MathRuntimeException <306, 306>
return IllegalArgumentException;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.MathRuntimeException <306, 306>
return IllegalArgumentException;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.MaxIterationsExceededException <64, 64>
return maxIterations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.MaxIterationsExceededException <64, 64>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.MaxIterationsExceededException <64, 64>
return maxIterations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.MathException <73, 73>
return s;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.MathException <73, 73>
return StringVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.MathException <73, 73>
return s;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.MathException <146, 146>
return pattern;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.MathException <146, 146>
return StringVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.MathException <146, 146>
return pattern;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.ListPopulation <83, 83>
return chromosomes;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.ListPopulation <83, 83>
return ListVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.ListPopulation <83, 83>
return chromosomes;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.ListPopulation <107, 107>
return bestChromosome;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.ListPopulation <107, 107>
return Chromosome;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.ListPopulation <107, 107>
return Chromosome;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.ListPopulation <115, 115>
return this.populationLimit;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.ListPopulation <115, 115>
return ListPopulation.intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.ListPopulation <115, 115>
return ListPopulation.populationLimit;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.ChromosomePair <50, 50>
return first;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.ChromosomePair <50, 50>
return Chromosome;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.ChromosomePair <50, 50>
return Chromosome;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.ChromosomePair <59, 59>
return second;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.ChromosomePair <59, 59>
return Chromosome;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.ChromosomePair <59, 59>
return Chromosome;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.RandomKey <138, 138>
return res;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.RandomKey <138, 138>
return ListVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.RandomKey <138, 138>
return res;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.RandomKey <197, 197>
return repr;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.RandomKey <197, 197>
return ListVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.RandomKey <197, 197>
return repr;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.RandomKey <213, 213>
return repr;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.RandomKey <213, 213>
return ListVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.RandomKey <213, 213>
return repr;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.RandomKey <288, 288>
return baseSequence;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.RandomKey <288, 288>
return ListVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.RandomKey <288, 288>
return baseSequence;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.BinaryMutation <49, 49>
return newChrom;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.BinaryMutation <49, 49>
return Chromosome;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.BinaryMutation <49, 49>
return Chromosome;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.GeneticAlgorithm <55, 55>
return randomGenerator;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.GeneticAlgorithm <55, 55>
return RandomGenerator;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.GeneticAlgorithm <55, 55>
return RandomGenerator;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.GeneticAlgorithm <110, 110>
return current;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.GeneticAlgorithm <110, 110>
return Population;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.GeneticAlgorithm <110, 110>
return Population;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.GeneticAlgorithm <167, 167>
return nextGeneration;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.GeneticAlgorithm <167, 167>
return Population;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.GeneticAlgorithm <167, 167>
return Population;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.GeneticAlgorithm <175, 175>
return crossoverPolicy;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.GeneticAlgorithm <175, 175>
return CrossoverPolicy;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.GeneticAlgorithm <175, 175>
return CrossoverPolicy;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.GeneticAlgorithm <183, 183>
return crossoverRate;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.GeneticAlgorithm <183, 183>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.GeneticAlgorithm <183, 183>
return crossoverRate;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.GeneticAlgorithm <191, 191>
return mutationPolicy;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.GeneticAlgorithm <191, 191>
return MutationPolicy;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.GeneticAlgorithm <191, 191>
return MutationPolicy;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.GeneticAlgorithm <199, 199>
return mutationRate;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.GeneticAlgorithm <199, 199>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.GeneticAlgorithm <199, 199>
return mutationRate;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.GeneticAlgorithm <207, 207>
return selectionPolicy;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.GeneticAlgorithm <207, 207>
return SelectionPolicy;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.GeneticAlgorithm <207, 207>
return SelectionPolicy;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.TournamentSelection <102, 102>
return arity;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.TournamentSelection <102, 102>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.TournamentSelection <102, 102>
return arity;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.FixedGenerationCount <67, 67>
return numGenerations;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.FixedGenerationCount <67, 67>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.FixedGenerationCount <67, 67>
return numGenerations;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.BinaryChromosome <69, 69>
return rList;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.BinaryChromosome <69, 69>
return ListVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.BinaryChromosome <69, 69>
return rList;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.AbstractListChromosome <71, 71>
return representation;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.AbstractListChromosome <71, 71>
return ListVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.AbstractListChromosome <71, 71>
return representation;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.Chromosome <49, 49>
return this.fitness;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.Chromosome <49, 49>
return Chromosome.doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.Chromosome <49, 49>
return Chromosome.fitness;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.Chromosome <92, 92>
if (this.isSame(anotherChr))
                return anotherChr;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.Chromosome <92, 92>
if (Chromosome.isSame(Chromosome))
                return Chromosome;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.Chromosome <92, 92>
if (Chromosome.isSame(Chromosome))
                return Chromosome;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.ElitisticListPopulation <83, 83>
return nextGeneration;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.ElitisticListPopulation <83, 83>
return ListPopulation;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.ElitisticListPopulation <83, 83>
return null;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.genetics.ElitisticListPopulation <105, 105>
return this.elitismRate;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.genetics.ElitisticListPopulation <105, 105>
return ListPopulation.doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.genetics.ElitisticListPopulation <105, 105>
return ListPopulation.elitismRate;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.CompositeFormat <56, 56>
return nf;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.CompositeFormat <56, 56>
return NumberFormat;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.CompositeFormat <56, 56>
return NumberFormat;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.CompositeFormat <97, 97>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.CompositeFormat <97, 97>
return charVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.CompositeFormat <97, 97>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.CompositeFormat <128, 128>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.CompositeFormat <128, 128>
return Number;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.CompositeFormat <128, 128>
return Number;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.CompositeFormat <161, 161>
return number;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.CompositeFormat <161, 161>
return Number;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.CompositeFormat <161, 161>
return Number;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.CompositeFormat <218, 218>
return toAppendTo;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.CompositeFormat <218, 218>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.CompositeFormat <218, 218>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.TransformerMap <152, 152>
return value;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.TransformerMap <152, 152>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.TransformerMap <152, 152>
return value;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.TransformerMap <190, 190>
return hash;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.TransformerMap <190, 190>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.TransformerMap <190, 190>
return hash;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.BigRealField <47, 47>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.BigRealField <47, 47>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.BigRealField <47, 47>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.BigRealField <52, 52>
return BigReal.ONE;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.BigRealField <52, 52>
return BigReal.ONE;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.BigRealField <52, 52>
return BigReal.ONE;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.BigRealField <57, 57>
return BigReal.ZERO;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.BigRealField <57, 57>
return BigReal.ZERO;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.BigRealField <57, 57>
return BigReal.ZERO;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.BigRealField <73, 73>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.BigRealField <73, 73>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.BigRealField <73, 73>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <90, 90>
return (int)s;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <90, 90>
return (int)longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <90, 90>
return (int)s;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <150, 150>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <150, 150>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <150, 150>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <184, 184>
return n;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <184, 184>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <184, 184>
return n;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <223, 223>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <223, 223>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <223, 223>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <254, 254>
return n;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <254, 254>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <254, 254>
return n;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <333, 333>
return logSum;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <333, 333>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <333, 333>
return logSum;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <572, 572>
return logSum;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <572, 572>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <572, 572>
return logSum;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <788, 788>
return lcm;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <788, 788>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <788, 788>
return lcm;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <826, 826>
return (int)m;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <826, 826>
return (int)longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <826, 826>
return (int)m;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <881, 881>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <881, 881>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <881, 881>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <905, 905>
return d;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <905, 905>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <905, 905>
return d;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <954, 954>
return d;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <954, 954>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <954, 954>
return d;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <1024, 1024>
return x;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <1024, 1024>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <1024, 1024>
return x;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <1153, 1153>
return unscaled;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <1153, 1153>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <1153, 1153>
return unscaled;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <1276, 1276>
return (int)s;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <1276, 1276>
return (int)longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <1276, 1276>
return (int)s;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <1302, 1302>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <1302, 1302>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <1302, 1302>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <1331, 1331>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <1331, 1331>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <1331, 1331>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <1361, 1361>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <1361, 1361>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <1361, 1361>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <1391, 1391>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <1391, 1391>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <1391, 1391>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <1421, 1421>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <1421, 1421>
return longVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <1421, 1421>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <1471, 1471>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <1471, 1471>
return BigInteger;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <1471, 1471>
return BigInteger;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <1501, 1501>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <1501, 1501>
return BigInteger;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <1501, 1501>
return BigInteger;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <1517, 1517>
return sum;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <1517, 1517>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <1517, 1517>
return sum;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <1532, 1532>
return sum;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <1532, 1532>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <1532, 1532>
return sum;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <1579, 1579>
return max;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <1579, 1579>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <1579, 1579>
return max;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.MathUtils <1594, 1594>
return max;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.MathUtils <1594, 1594>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.MathUtils <1594, 1594>
return max;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.ContinuedFraction <173, 173>
return c;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.ContinuedFraction <173, 173>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.ContinuedFraction <173, 173>
return c;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.BigReal <220, 220>
return d;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.BigReal <220, 220>
return BigDecimal;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.BigReal <220, 220>
return BigDecimal;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToDoubleHashMap <158, 158>
return capacity;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToDoubleHashMap <158, 158>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToDoubleHashMap <158, 158>
return capacity;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToDoubleHashMap <186, 186>
return missingEntries;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToDoubleHashMap <186, 186>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToDoubleHashMap <186, 186>
return missingEntries;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToDoubleHashMap <197, 197>
return missingEntries;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToDoubleHashMap <197, 197>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToDoubleHashMap <197, 197>
return missingEntries;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToDoubleHashMap <238, 238>
return new Iterator();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToDoubleHashMap <238, 238>
return new Iterator();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToDoubleHashMap <238, 238>
return new Iterator();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToDoubleHashMap <272, 272>
return index;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToDoubleHashMap <272, 272>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToDoubleHashMap <272, 272>
return index;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToDoubleHashMap <292, 292>
return index;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToDoubleHashMap <292, 292>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToDoubleHashMap <292, 292>
return index;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToDoubleHashMap <305, 305>
return firstRemoved;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToDoubleHashMap <305, 305>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToDoubleHashMap <305, 305>
return firstRemoved;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToDoubleHashMap <340, 340>
return size;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToDoubleHashMap <340, 340>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToDoubleHashMap <340, 340>
return size;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToDoubleHashMap <358, 358>
return missingEntries;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToDoubleHashMap <358, 358>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToDoubleHashMap <358, 358>
return missingEntries;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToDoubleHashMap <369, 369>
return missingEntries;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToDoubleHashMap <369, 369>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToDoubleHashMap <369, 369>
return missingEntries;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToDoubleHashMap <396, 396>
return previous;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToDoubleHashMap <396, 396>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToDoubleHashMap <396, 396>
return previous;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToDoubleHashMap <424, 424>
return previous;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToDoubleHashMap <424, 424>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToDoubleHashMap <424, 424>
return previous;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.ResizableDoubleArray <309, 309>
return discarded;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.ResizableDoubleArray <309, 309>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.ResizableDoubleArray <309, 309>
return discarded;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.ResizableDoubleArray <331, 331>
return discarded;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.ResizableDoubleArray <331, 331>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.ResizableDoubleArray <331, 331>
return discarded;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.ResizableDoubleArray <524, 524>
return contractionCriteria;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.ResizableDoubleArray <524, 524>
return floatVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.ResizableDoubleArray <524, 524>
return contractionCriteria;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.ResizableDoubleArray <560, 560>
return elementArray;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.ResizableDoubleArray <560, 560>
return double[]Var;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.ResizableDoubleArray <560, 560>
return elementArray;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.ResizableDoubleArray <576, 576>
return expansionFactor;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.ResizableDoubleArray <576, 576>
return floatVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.ResizableDoubleArray <576, 576>
return expansionFactor;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.ResizableDoubleArray <587, 587>
return expansionMode;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.ResizableDoubleArray <587, 587>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.ResizableDoubleArray <587, 587>
return expansionMode;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.ResizableDoubleArray <609, 609>
return (numElements);

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.ResizableDoubleArray <609, 609>
return (intVar);

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.ResizableDoubleArray <609, 609>
return (numElements);

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.ResizableDoubleArray <626, 626>
return (internalArray);

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.ResizableDoubleArray <626, 626>
return (double[]Var);

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.ResizableDoubleArray <626, 626>
return (internalArray);

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.ResizableDoubleArray <642, 642>
return (internalArray);

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.ResizableDoubleArray <642, 642>
return (double[]Var);

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.ResizableDoubleArray <642, 642>
return (internalArray);

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.ResizableDoubleArray <794, 794>
return startIndex;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.ResizableDoubleArray <794, 794>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.ResizableDoubleArray <794, 794>
return startIndex;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.ResizableDoubleArray <840, 840>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.ResizableDoubleArray <840, 840>
return ResizableDoubleArray;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.ResizableDoubleArray <840, 840>
return ResizableDoubleArray;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToFieldHashMap <170, 170>
return capacity;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToFieldHashMap <170, 170>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToFieldHashMap <170, 170>
return capacity;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToFieldHashMap <198, 198>
return missingEntries;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToFieldHashMap <198, 198>
return TVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToFieldHashMap <198, 198>
return missingEntries;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToFieldHashMap <209, 209>
return missingEntries;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToFieldHashMap <209, 209>
return TVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToFieldHashMap <209, 209>
return missingEntries;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToFieldHashMap <250, 250>
return new Iterator();

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToFieldHashMap <250, 250>
return new Iterator();

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToFieldHashMap <250, 250>
return new Iterator();

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToFieldHashMap <284, 284>
return index;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToFieldHashMap <284, 284>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToFieldHashMap <284, 284>
return index;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToFieldHashMap <304, 304>
return index;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToFieldHashMap <304, 304>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToFieldHashMap <304, 304>
return index;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToFieldHashMap <317, 317>
return firstRemoved;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToFieldHashMap <317, 317>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToFieldHashMap <317, 317>
return firstRemoved;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToFieldHashMap <352, 352>
return size;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToFieldHashMap <352, 352>
return intVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToFieldHashMap <352, 352>
return size;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToFieldHashMap <370, 370>
return missingEntries;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToFieldHashMap <370, 370>
return TVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToFieldHashMap <370, 370>
return missingEntries;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToFieldHashMap <381, 381>
return missingEntries;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToFieldHashMap <381, 381>
return TVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToFieldHashMap <381, 381>
return missingEntries;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToFieldHashMap <408, 408>
return previous;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToFieldHashMap <408, 408>
return TVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToFieldHashMap <408, 408>
return previous;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.util.OpenIntToFieldHashMap <436, 436>
return previous;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.util.OpenIntToFieldHashMap <436, 436>
return TVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.util.OpenIntToFieldHashMap <436, 436>
return previous;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.ComplexField <47, 47>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.ComplexField <47, 47>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.ComplexField <47, 47>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.ComplexField <52, 52>
return Complex.ONE;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.ComplexField <52, 52>
return Complex.ONE;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.ComplexField <52, 52>
return Complex.ONE;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.ComplexField <57, 57>
return Complex.ZERO;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.ComplexField <57, 57>
return Complex.ZERO;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.ComplexField <57, 57>
return Complex.ZERO;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.ComplexField <73, 73>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.ComplexField <73, 73>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.ComplexField <73, 73>
return LazyHolder.INSTANCE;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.Complex <118, 118>
return Double.POSITIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.Complex <118, 118>
return Double.POSITIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.Complex <118, 118>
return Double.POSITIVE_INFINITY;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.Complex <174, 174>
return NaN;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.Complex <174, 174>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.Complex <174, 174>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.Complex <216, 216>
return NaN;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.Complex <216, 216>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.Complex <216, 216>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.Complex <222, 222>
return NaN;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.Complex <222, 222>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.Complex <222, 222>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.Complex <226, 226>
return ZERO;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.Complex <226, 226>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.Complex <226, 226>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.Complex <288, 288>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.Complex <288, 288>
return booleanVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.Complex <288, 288>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.Complex <313, 313>
return imaginary;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.Complex <313, 313>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.Complex <313, 313>
return imaginary;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.Complex <322, 322>
return real;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.Complex <322, 322>
return doubleVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.Complex <322, 322>
return real;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.Complex <333, 333>
return isNaN;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.Complex <333, 333>
return booleanVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.Complex <333, 333>
return isNaN;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.Complex <346, 346>
return isInfinite;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.Complex <346, 346>
return booleanVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.Complex <346, 346>
return isInfinite;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.Complex <378, 378>
return NaN;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.Complex <378, 378>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.Complex <378, 378>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.Complex <383, 383>
return INF;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.Complex <383, 383>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.Complex <383, 383>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.Complex <417, 417>
return NaN;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.Complex <417, 417>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.Complex <417, 417>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.Complex <422, 422>
return INF;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.Complex <422, 422>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.Complex <422, 422>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.Complex <437, 437>
return NaN;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.Complex <437, 437>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.Complex <437, 437>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.Complex <463, 463>
return NaN;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.Complex <463, 463>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.Complex <463, 463>
return Complex;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.Complex <973, 973>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.Complex <973, 973>
return ListVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.Complex <973, 973>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.Complex <978, 978>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.Complex <978, 978>
return ListVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.Complex <978, 978>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.Complex <996, 996>
return result;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.Complex <996, 996>
return ListVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.Complex <996, 996>
return result;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.ComplexFormat <167, 167>
return toAppendTo;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.ComplexFormat <167, 167>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.ComplexFormat <167, 167>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.ComplexFormat <200, 200>
return ret;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.ComplexFormat <200, 200>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.ComplexFormat <200, 200>
return StringBuffer;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.ComplexFormat <208, 208>
return imaginaryCharacter;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.ComplexFormat <208, 208>
return StringVar;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.ComplexFormat <208, 208>
return imaginaryCharacter;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.ComplexFormat <216, 216>
return imaginaryFormat;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.ComplexFormat <216, 216>
return NumberFormat;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.ComplexFormat <216, 216>
return NumberFormat;

---fix ingredient  <parseContainCheck>  varMapType:ori--- org.apache.commons.math.complex.ComplexFormat <242, 242>
return realFormat;

---fix ingredient  <parseContainCheck>  varMapType:0--- org.apache.commons.math.complex.ComplexFormat <242, 242>
return NumberFormat;

---fix ingredient  <parseContainCheck>  varMapType:1--- org.apache.commons.math.complex.ComplexFormat <242, 242>
return NumberFormat;

