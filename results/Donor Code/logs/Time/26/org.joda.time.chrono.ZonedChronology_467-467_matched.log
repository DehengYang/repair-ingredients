---patch code 0--- org.joda.time.chrono.ZonedChronology <467, 467>
long longVar = DateTimeZone.convertLocalToUTC(longVar, false, longVar);

---fix ingredient(SameMethod)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <467, 467>
long longVar = DateTimeZone.convertLocalToUTC(longVar, false);

---patch code 1--- org.joda.time.chrono.ZonedChronology <467, 467>
long result = DateTimeZone.convertLocalToUTC(localInstant, false, instant);

---fix ingredient(SameMethod)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <467, 467>
long result = DateTimeZone.convertLocalToUTC(localInstant, false);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <436, 436>
return DateTimeZone.convertLocalToUTC(longVar, false);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <448, 448>
return DateTimeZone.convertLocalToUTC(longVar, false);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <460, 460>
return DateTimeZone.convertLocalToUTC(longVar, false);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <481, 481>
return DateTimeZone.convertLocalToUTC(longVar, false);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <528, 528>
return DateTimeZone.convertLocalToUTC(longVar, false);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <540, 540>
return DateTimeZone.convertLocalToUTC(longVar, false);

---patch code ori--- org.joda.time.chrono.ZonedChronology <467, 467>
long result = iZone.convertLocalToUTC(localInstant, false, instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <666, 666>
long instant = zone.convertLocalToUTC(localMillis, false);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <666, 666>
long longVar = DateTimeZone.convertLocalToUTC(longVar, false);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.LocalDate <666, 666>
long instant = DateTimeZone.convertLocalToUTC(localMillis, false);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.LenientDateTimeField <75, 75>
return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.LenientDateTimeField <75, 75>
return Chronology.getZone().convertLocalToUTC(longVar, false, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTimeZone <943, 943>
return convertLocalToUTC(instantLocal, strict);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTimeZone <943, 943>
return convertLocalToUTC(longVar, booleanVar);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <406, 406>
long localInstant = iZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <406, 406>
long longVar = DateTimeZone.convertUTCToLocal(longVar);

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <406, 406>
long localInstant = DateTimeZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <411, 411>
long localInstant = iZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <411, 411>
long longVar = DateTimeZone.convertUTCToLocal(longVar);

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <411, 411>
long localInstant = DateTimeZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <416, 416>
long localInstant = iZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <416, 416>
long longVar = DateTimeZone.convertUTCToLocal(longVar);

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <416, 416>
long localInstant = DateTimeZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <434, 434>
long localInstant = iZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <434, 434>
long longVar = DateTimeZone.convertUTCToLocal(longVar);

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <434, 434>
long localInstant = DateTimeZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <446, 446>
long localInstant = iZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <446, 446>
long longVar = DateTimeZone.convertUTCToLocal(longVar);

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <446, 446>
long localInstant = DateTimeZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <458, 458>
long localInstant = iZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <458, 458>
long longVar = DateTimeZone.convertUTCToLocal(longVar);

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <458, 458>
long localInstant = DateTimeZone.convertUTCToLocal(instant);

---fix ingredient(SameMethod)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <465, 465>
long localInstant = iZone.convertUTCToLocal(instant);

---fix ingredient(SameMethod)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <465, 465>
long longVar = DateTimeZone.convertUTCToLocal(longVar);

---fix ingredient(SameMethod)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <465, 465>
long localInstant = DateTimeZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <479, 479>
long localInstant = iZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <479, 479>
long longVar = DateTimeZone.convertUTCToLocal(longVar);

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <479, 479>
long localInstant = DateTimeZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <507, 507>
long localInstant = iZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <507, 507>
long longVar = DateTimeZone.convertUTCToLocal(longVar);

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <507, 507>
long localInstant = DateTimeZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <512, 512>
long localInstant = iZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <512, 512>
long longVar = DateTimeZone.convertUTCToLocal(longVar);

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <512, 512>
long localInstant = DateTimeZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <526, 526>
long localInstant = iZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <526, 526>
long longVar = DateTimeZone.convertUTCToLocal(longVar);

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <526, 526>
long localInstant = DateTimeZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <538, 538>
long localInstant = iZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <538, 538>
long longVar = DateTimeZone.convertUTCToLocal(longVar);

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <538, 538>
long localInstant = DateTimeZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <545, 545>
long localInstant = iZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <545, 545>
long longVar = DateTimeZone.convertUTCToLocal(longVar);

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <545, 545>
long localInstant = DateTimeZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <554, 554>
long localInstant = iZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <554, 554>
long longVar = DateTimeZone.convertUTCToLocal(longVar);

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <554, 554>
long localInstant = DateTimeZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <571, 571>
long localInstant = iZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <571, 571>
long longVar = DateTimeZone.convertUTCToLocal(longVar);

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <571, 571>
long localInstant = DateTimeZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <344, 344>
int offset = this.iZone.getOffset(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <344, 344>
int intVar = AssembledChronology.DateTimeZone.getOffset(longVar);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <354, 354>
int offset = this.iZone.getOffsetFromLocal(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <354, 354>
int intVar = AssembledChronology.DateTimeZone.getOffsetFromLocal(longVar);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <592, 592>
int offset = this.iZone.getOffset(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <592, 592>
int intVar = AssembledChronology.DateTimeZone.getOffset(longVar);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <364, 364>
return iZone.convertUTCToLocal(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <364, 364>
return DateTimeZone.convertUTCToLocal(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.CachedDateTimeZone <123, 123>
return iZone.nextTransition(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.CachedDateTimeZone <123, 123>
return DateTimeZone.nextTransition(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.CachedDateTimeZone <127, 127>
return iZone.previousTransition(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.CachedDateTimeZone <127, 127>
return DateTimeZone.previousTransition(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <546, 546>
long result = getWrappedField().roundFloor(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <546, 546>
long longVar = getWrappedField().roundFloor(longVar);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.LimitChronology <546, 546>
long result = getWrappedField().roundFloor(instant);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <553, 553>
long result = getWrappedField().roundCeiling(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <553, 553>
long longVar = getWrappedField().roundCeiling(longVar);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.LimitChronology <553, 553>
long result = getWrappedField().roundCeiling(instant);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <560, 560>
long result = getWrappedField().roundHalfFloor(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <560, 560>
long longVar = getWrappedField().roundHalfFloor(longVar);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.LimitChronology <560, 560>
long result = getWrappedField().roundHalfFloor(instant);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <567, 567>
long result = getWrappedField().roundHalfCeiling(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <567, 567>
long longVar = getWrappedField().roundHalfCeiling(longVar);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.LimitChronology <567, 567>
long result = getWrappedField().roundHalfCeiling(instant);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <574, 574>
long result = getWrappedField().roundHalfEven(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <574, 574>
long longVar = getWrappedField().roundHalfEven(longVar);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.LimitChronology <574, 574>
long result = getWrappedField().roundHalfEven(instant);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <581, 581>
long result = getWrappedField().remainder(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <581, 581>
long longVar = getWrappedField().remainder(longVar);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.LimitChronology <581, 581>
long result = getWrappedField().remainder(instant);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <417, 417>
long result = getWrappedField().add(instant, amount);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <417, 417>
long longVar = getWrappedField().add(longVar, intVar);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.LimitChronology <417, 417>
long result = getWrappedField().add(instant, amount);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <424, 424>
long result = getWrappedField().add(instant, amount);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <424, 424>
long longVar = getWrappedField().add(longVar, longVar);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.LimitChronology <424, 424>
long result = getWrappedField().add(instant, amount);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <477, 477>
long result = getWrappedField().add(instant, amount);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <477, 477>
long longVar = getWrappedField().add(longVar, intVar);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.LimitChronology <477, 477>
long result = getWrappedField().add(instant, amount);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <484, 484>
long result = getWrappedField().add(instant, amount);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <484, 484>
long longVar = getWrappedField().add(longVar, longVar);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.LimitChronology <484, 484>
long result = getWrappedField().add(instant, amount);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <491, 491>
long result = getWrappedField().addWrapField(instant, amount);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <491, 491>
long longVar = getWrappedField().addWrapField(longVar, intVar);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.LimitChronology <491, 491>
long result = getWrappedField().addWrapField(instant, amount);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <510, 510>
long result = getWrappedField().set(instant, value);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <510, 510>
long longVar = getWrappedField().set(longVar, intVar);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.LimitChronology <510, 510>
long result = getWrappedField().set(instant, value);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.LenientDateTimeField <72, 72>
long localInstant = iBase.getZone().convertUTCToLocal(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.LenientDateTimeField <72, 72>
long longVar = Chronology.getZone().convertUTCToLocal(longVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.field.LenientDateTimeField <72, 72>
long localInstant = Chronology.getZone().convertUTCToLocal(instant);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <517, 517>
long result = getWrappedField().set(instant, text, locale);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <517, 517>
long longVar = getWrappedField().set(longVar, StringVar, Locale);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.LimitChronology <517, 517>
long result = getWrappedField().set(instant, text, Locale);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <431, 431>
long localInstant = iField.add(instant + offset, value);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <431, 431>
long longVar = DateTimeField.add(longVar + intVar, intVar);

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <431, 431>
long localInstant = DateTimeField.add(instant + offset, value);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <443, 443>
long localInstant = iField.add(instant + offset, value);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <443, 443>
long longVar = DateTimeField.add(longVar + intVar, longVar);

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <443, 443>
long localInstant = DateTimeField.add(instant + offset, value);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <455, 455>
long localInstant = iField.addWrapField(instant + offset, value);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <455, 455>
long longVar = DateTimeField.addWrapField(longVar + intVar, intVar);

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <455, 455>
long localInstant = DateTimeField.addWrapField(instant + offset, value);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <874, 874>
long instant = DateTimeUtils.currentTimeMillis();

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <874, 874>
long longVar = DateTimeUtils.currentTimeMillis();

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.LocalDate <874, 874>
long instant = DateTimeUtils.currentTimeMillis();

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.YearMonthDay <770, 770>
long instant = DateTimeUtils.currentTimeMillis();

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.YearMonthDay <770, 770>
long longVar = DateTimeUtils.currentTimeMillis();

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.YearMonthDay <770, 770>
long instant = DateTimeUtils.currentTimeMillis();

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <440, 440>
long instantMillis = DateTimeUtils.getInstantMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.MutableDateTime <440, 440>
long longVar = DateTimeUtils.getInstantMillis(ReadableInstant);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.MutableDateTime <440, 440>
long instantMillis = DateTimeUtils.getInstantMillis(ReadableInstant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <858, 858>
long instantMillis = DateTimeUtils.getInstantMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.MutableDateTime <858, 858>
long longVar = DateTimeUtils.getInstantMillis(ReadableInstant);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.MutableDateTime <858, 858>
long instantMillis = DateTimeUtils.getInstantMillis(ReadableInstant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <859, 859>
Chronology instantChrono = DateTimeUtils.getInstantChronology(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <906, 906>
long instantMillis = DateTimeUtils.getInstantMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.MutableDateTime <906, 906>
long longVar = DateTimeUtils.getInstantMillis(ReadableInstant);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.MutableDateTime <906, 906>
long instantMillis = DateTimeUtils.getInstantMillis(ReadableInstant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <907, 907>
Chronology instantChrono = DateTimeUtils.getInstantChronology(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.AbstractInstant <344, 344>
long instantMillis = DateTimeUtils.getInstantMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.base.AbstractInstant <344, 344>
long longVar = DateTimeUtils.getInstantMillis(ReadableInstant);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.base.AbstractInstant <344, 344>
long instantMillis = DateTimeUtils.getInstantMillis(ReadableInstant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.AbstractInstant <378, 378>
long instantMillis = DateTimeUtils.getInstantMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.base.AbstractInstant <378, 378>
long longVar = DateTimeUtils.getInstantMillis(ReadableInstant);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.base.AbstractInstant <378, 378>
long instantMillis = DateTimeUtils.getInstantMillis(ReadableInstant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.AbstractInstant <412, 412>
long instantMillis = DateTimeUtils.getInstantMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.base.AbstractInstant <412, 412>
long longVar = DateTimeUtils.getInstantMillis(ReadableInstant);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.base.AbstractInstant <412, 412>
long instantMillis = DateTimeUtils.getInstantMillis(ReadableInstant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.Partial <655, 655>
long millis = DateTimeUtils.getInstantMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.Partial <655, 655>
long longVar = DateTimeUtils.getInstantMillis(ReadableInstant);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.Partial <655, 655>
long millis = DateTimeUtils.getInstantMillis(ReadableInstant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.Partial <656, 656>
Chronology chrono = DateTimeUtils.getInstantChronology(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatter <457, 457>
long millis = DateTimeUtils.getInstantMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatter <457, 457>
long longVar = DateTimeUtils.getInstantMillis(ReadableInstant);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.format.DateTimeFormatter <457, 457>
long millis = DateTimeUtils.getInstantMillis(ReadableInstant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatter <458, 458>
Chronology chrono = DateTimeUtils.getInstantChronology(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatter <469, 469>
long millis = DateTimeUtils.getInstantMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatter <469, 469>
long longVar = DateTimeUtils.getInstantMillis(ReadableInstant);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.format.DateTimeFormatter <469, 469>
long millis = DateTimeUtils.getInstantMillis(ReadableInstant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatter <470, 470>
Chronology chrono = DateTimeUtils.getInstantChronology(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatter <494, 494>
printTo(buf, instant, null);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatter <494, 494>
printTo(StringBuffer, longVar, null);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatter <505, 505>
printTo(out, instant, null);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatter <505, 505>
printTo(Writer, longVar, null);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicWeekyearDateTimeField <133, 133>
int thisWeekyear = get( instant );

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicWeekyearDateTimeField <133, 133>
int intVar = get( longVar );

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicFixedMonthChronology <65, 65>
int thisYear = getYear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicFixedMonthChronology <65, 65>
int intVar = getYear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicFixedMonthChronology <67, 67>
int millisOfDay = getMillisOfDay(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicFixedMonthChronology <67, 67>
int intVar = getMillisOfDay(longVar);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <318, 318>
int offset = getOffsetToAdd(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <318, 318>
int intVar = getOffsetToAdd(longVar);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <324, 324>
int offset = getOffsetToAdd(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <324, 324>
int intVar = getOffsetToAdd(longVar);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <430, 430>
int offset = getOffsetToAdd(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <430, 430>
int intVar = getOffsetToAdd(longVar);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <442, 442>
int offset = getOffsetToAdd(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <442, 442>
int intVar = getOffsetToAdd(longVar);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <454, 454>
int offset = getOffsetToAdd(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <454, 454>
int intVar = getOffsetToAdd(longVar);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <522, 522>
int offset = getOffsetToAdd(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <522, 522>
int intVar = getOffsetToAdd(longVar);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <534, 534>
int offset = getOffsetToAdd(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <534, 534>
int intVar = getOffsetToAdd(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicChronology <493, 493>
int year = getYear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicChronology <493, 493>
int intVar = getYear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicChronology <575, 575>
int thisYear = getYear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicChronology <575, 575>
int intVar = getYear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicYearDateTimeField <61, 61>
int thisYear = get(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicYearDateTimeField <61, 61>
int intVar = get(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicYearDateTimeField <127, 127>
int year = get(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicYearDateTimeField <127, 127>
int intVar = get(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.IslamicChronology <305, 305>
int thisYear = getYear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.IslamicChronology <305, 305>
int intVar = getYear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.IslamicChronology <307, 307>
int millisOfDay = getMillisOfDay(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.IslamicChronology <307, 307>
int intVar = getMillisOfDay(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicGJChronology <175, 175>
int thisYear = getYear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicGJChronology <175, 175>
int intVar = getYear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicGJChronology <177, 177>
int millisOfDay = getMillisOfDay(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicGJChronology <177, 177>
int intVar = getMillisOfDay(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJEraDateTimeField <82, 82>
int oldEra = get(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJEraDateTimeField <82, 82>
int intVar = get(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <163, 163>
super(instant, zone);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateMidnight <163, 163>
super(longVar, DateTimeZone);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <178, 178>
super(instant, chronology);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateMidnight <178, 178>
super(longVar, Chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <225, 225>
super(instant, zone);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MonthDay <231, 231>
super(instant, chronology);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.MonthDay <231, 231>
super(longVar, Chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTimeZone <746, 746>
String nameKey = getNameKey(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTimeZone <746, 746>
String StringVar = getNameKey(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTimeZone <786, 786>
String nameKey = getNameKey(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTimeZone <786, 786>
String StringVar = getNameKey(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.PreciseDateTimeField <95, 95>
int thisValue = get(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.PreciseDateTimeField <95, 95>
int intVar = get(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <461, 461>
int current = get(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <461, 461>
int intVar = get(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <886, 886>
long newInstant = roundFloor(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <886, 886>
long longVar = roundFloor(longVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.field.BaseDateTimeField <886, 886>
long newInstant = roundFloor(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <903, 903>
long floor = roundFloor(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <903, 903>
long longVar = roundFloor(longVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.field.BaseDateTimeField <903, 903>
long floor = roundFloor(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <904, 904>
long ceiling = roundCeiling(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <904, 904>
long longVar = roundCeiling(longVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.field.BaseDateTimeField <904, 904>
long ceiling = roundCeiling(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <927, 927>
long floor = roundFloor(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <927, 927>
long longVar = roundFloor(longVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.field.BaseDateTimeField <927, 927>
long floor = roundFloor(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <928, 928>
long ceiling = roundCeiling(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <928, 928>
long longVar = roundCeiling(longVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.field.BaseDateTimeField <928, 928>
long ceiling = roundCeiling(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <955, 955>
long floor = roundFloor(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <955, 955>
long longVar = roundFloor(longVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.field.BaseDateTimeField <955, 955>
long floor = roundFloor(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <956, 956>
long ceiling = roundCeiling(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <956, 956>
long longVar = roundCeiling(longVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.field.BaseDateTimeField <956, 956>
long ceiling = roundCeiling(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.YearMonth <223, 223>
super(instant, chronology);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.YearMonth <223, 223>
super(longVar, Chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.TimeOfDay <256, 256>
super(instant, chronology);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.TimeOfDay <256, 256>
super(longVar, Chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <177, 177>
super(instant, zone);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.MutableDateTime <177, 177>
super(longVar, DateTimeZone);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <191, 191>
super(instant, chronology);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.MutableDateTime <191, 191>
super(longVar, Chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <234, 234>
super(instant, zone);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.YearMonthDay <210, 210>
super(instant, chronology);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.YearMonthDay <210, 210>
super(longVar, Chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTimeUtils <167, 167>
Chronology chrono = instant.getChronology();

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <160, 160>
super(instant, zone);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <160, 160>
super(longVar, DateTimeZone);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <174, 174>
super(instant, chronology);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <174, 174>
super(longVar, Chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <219, 219>
super(instant, zone);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatter <581, 581>
printTo(buf, instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatter <596, 596>
printTo(buf, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatter <596, 596>
printTo(StringBuffer, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatter <698, 698>
long instantMillis = instant.getMillis();

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatter <698, 698>
long longVar = ReadWritableInstant.getMillis();

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.format.DateTimeFormatter <698, 698>
long instantMillis = ReadWritableInstant.getMillis();

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatter <699, 699>
Chronology chrono = instant.getChronology();

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatter <712, 712>
instant.setChronology(chrono);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatterBuilder <1846, 1846>
printTo(buf, null, instant, chrono);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatterBuilder <1846, 1846>
printTo(StringBuffer, null, longVar, Chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatterBuilder <1855, 1855>
printTo(null, out, instant, chrono);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatterBuilder <1855, 1855>
printTo(null, Writer, longVar, Chronology);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <834, 834>
long instant = GJChronology.getInstanceUTC().set(partial, 0L);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <834, 834>
long longVar = GJChronology.getInstanceUTC().set(ReadablePartial, 0L);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.GJChronology <834, 834>
long instant = GJChronology.getInstanceUTC().set(ReadablePartial, 0L);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicWeekyearDateTimeField <162, 162>
long workInstant = instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicWeekyearDateTimeField <162, 162>
long longVar = longVar;

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.BasicWeekyearDateTimeField <162, 162>
long workInstant = instant;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <846, 846>
long testInstant = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <846, 846>
long longVar = longVar;

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.tz.DateTimeZoneBuilder <846, 846>
long testInstant = instant;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MonthDay <248, 248>
super(instant, null, ISODateTimeFormat.localDateParser());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.YearMonth <240, 240>
super(instant, null, ISODateTimeFormat.localDateParser());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.TimeOfDay <276, 276>
super(instant, null, ISODateTimeFormat.timeParser());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.YearMonthDay <230, 230>
super(instant, null, ISODateTimeFormat.dateOptionalTimeParser());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1510, 1510>
int i = Arrays.binarySearch(transitions, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1510, 1510>
int intVar = Arrays.binarySearch(long[]Var, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1529, 1529>
int i = Arrays.binarySearch(transitions, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1529, 1529>
int intVar = Arrays.binarySearch(long[]Var, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1548, 1548>
int i = Arrays.binarySearch(transitions, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1548, 1548>
int intVar = Arrays.binarySearch(long[]Var, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1571, 1571>
int i = Arrays.binarySearch(transitions, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1571, 1571>
int intVar = Arrays.binarySearch(long[]Var, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1588, 1588>
int i = Arrays.binarySearch(transitions, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1588, 1588>
int intVar = Arrays.binarySearch(long[]Var, longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <326, 326>
return FieldUtils.safeAdd(instant, add);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <326, 326>
return FieldUtils.safeAdd(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.PreciseDurationField <105, 105>
return FieldUtils.safeAdd(instant, addition);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.PreciseDurationField <105, 105>
return FieldUtils.safeAdd(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.PreciseDurationField <110, 110>
return FieldUtils.safeAdd(instant, addition);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.PreciseDurationField <110, 110>
return FieldUtils.safeAdd(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.MillisDurationField <117, 117>
return FieldUtils.safeAdd(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.MillisDurationField <117, 117>
return FieldUtils.safeAdd(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.MillisDurationField <121, 121>
return FieldUtils.safeAdd(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.MillisDurationField <121, 121>
return FieldUtils.safeAdd(longVar, longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicDayOfYearDateTimeField <68, 68>
int year = iChronology.getYear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicDayOfYearDateTimeField <68, 68>
int intVar = AssembledChronology.getYear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField <87, 87>
int weekyear = iChronology.getWeekyear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField <87, 87>
int intVar = AssembledChronology.getWeekyear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicWeekyearDateTimeField <140, 140>
int thisDow = iChronology.getDayOfWeek(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicWeekyearDateTimeField <140, 140>
int intVar = AssembledChronology.getDayOfWeek(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicWeekyearDateTimeField <154, 154>
int setToWeek = iChronology.getWeekOfWeekyear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicWeekyearDateTimeField <154, 154>
int intVar = AssembledChronology.getWeekOfWeekyear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicWeekyearDateTimeField <235, 235>
int wow = iChronology.getWeekOfWeekyear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicWeekyearDateTimeField <235, 235>
int intVar = AssembledChronology.getWeekOfWeekyear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicFixedMonthChronology <66, 66>
int dayOfYear = getDayOfYear(instant, thisYear);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicFixedMonthChronology <66, 66>
int intVar = getDayOfYear(longVar, intVar);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <140, 140>
int offset = zone.getOffsetFromLocal(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <140, 140>
int intVar = DateTimeZone.getOffsetFromLocal(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicChronology <494, 494>
int week = getWeekOfWeekyear(instant, year);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicChronology <494, 494>
int intVar = getWeekOfWeekyear(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicChronology <576, 576>
int thisMonth = getMonthOfYear(instant, thisYear);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicChronology <576, 576>
int intVar = getMonthOfYear(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicYearDateTimeField <75, 75>
int thisYear = iChronology.getYear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicYearDateTimeField <75, 75>
int intVar = AssembledChronology.getYear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.IslamicChronology <306, 306>
int dayOfYear = getDayOfYear(instant, thisYear);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.IslamicChronology <306, 306>
int intVar = getDayOfYear(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <798, 798>
int min = iGregorianField.getMinimumValue(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <798, 798>
int intVar = DateTimeField.getMinimumValue(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <821, 821>
int max = iJulianField.getMaximumValue(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <821, 821>
int intVar = DateTimeField.getMaximumValue(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <98, 98>
long timePart = iChronology.getMillisOfDay(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <98, 98>
long longVar = AssembledChronology.getMillisOfDay(longVar);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <98, 98>
long timePart = AssembledChronology.getMillisOfDay(instant);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <103, 103>
int thisYear = iChronology.getYear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <103, 103>
int intVar = AssembledChronology.getYear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <158, 158>
long timePart = iChronology.getMillisOfDay(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <158, 158>
long longVar = AssembledChronology.getMillisOfDay(longVar);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <158, 158>
long timePart = AssembledChronology.getMillisOfDay(instant);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <160, 160>
int thisYear = iChronology.getYear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <160, 160>
int intVar = AssembledChronology.getYear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <294, 294>
int thisYear = iChronology.getYear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <294, 294>
int intVar = AssembledChronology.getYear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <314, 314>
int thisYear = iChronology.getYear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <314, 314>
int intVar = AssembledChronology.getYear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <343, 343>
int year = iChronology.getYear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <343, 343>
int intVar = AssembledChronology.getYear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicGJChronology <176, 176>
int dayOfYear = getDayOfYear(instant, thisYear);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicGJChronology <176, 176>
int intVar = getDayOfYear(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJEraDateTimeField <84, 84>
int year = iChronology.getYear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJEraDateTimeField <84, 84>
int intVar = AssembledChronology.getYear(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.convert.AbstractConverter <101, 101>
long instant = getInstantMillis(object, chrono);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.convert.AbstractConverter <101, 101>
long longVar = getInstantMillis(Object, Chronology);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.convert.AbstractConverter <101, 101>
long instant = getInstantMillis(Object, Chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <307, 307>
int max = getMaximumValue(instant, values);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <328, 328>
int min = getMinimumValue(instant, values);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <388, 388>
int max = getMaximumValue(instant, values);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <411, 411>
int min = getMinimumValue(instant, values);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeParserBucket <365, 365>
int intVar = DateTimeZone.getOffsetFromLocal(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatterBuilder <1610, 1610>
int year = getTwoDigitYear(instant, chrono);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatterBuilder <1610, 1610>
int intVar = getTwoDigitYear(longVar, Chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatterBuilder <1622, 1622>
int year = getTwoDigitYear(instant, chrono);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatterBuilder <1622, 1622>
int intVar = getTwoDigitYear(longVar, Chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatter <621, 621>
int offset = zone.getOffset(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatter <621, 621>
int intVar = DateTimeZone.getOffset(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatter <638, 638>
int offset = zone.getOffset(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatter <638, 638>
int intVar = DateTimeZone.getOffset(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1606, 1606>
long prev = iTailZone.previousTransition(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1606, 1606>
long longVar = DSTZone.previousTransition(longVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.tz.DateTimeZoneBuilder <1606, 1606>
long prev = DSTZone.previousTransition(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.CachedDateTimeZone <161, 161>
Info Info = new Info(DateTimeZone, longVar);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.CachedDateTimeZone <166, 166>
long longVar = DateTimeZone.nextTransition(longVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.tz.CachedDateTimeZone <166, 166>
long next = DateTimeZone.nextTransition(periodStart);

---fix ingredient(SameMethod)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <468, 473>
if (get(result) != value) {
                throw new IllegalFieldValueException(iField.getType(), new Integer(value),
                    "Illegal instant due to time zone offset transition: " +
                    DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSS").print(new Instant(localInstant)) +
                    " (" + iZone.getID() + ")");
            }

---fix ingredient(SameMethod)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <468, 473>
if (get(longVar) != intVar) {
                throw new IllegalFieldValueException(DateTimeField.getType(), new Integer(intVar),
                    "Illegal instant due to time zone offset transition: " +
                    DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSS").print(new Instant(longVar)) +
                    " (" + DateTimeZone.getID() + ")");
            }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <247, 247>
super(instant, DateTimeUtils.getChronology(chronology));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <267, 267>
this(instant, ISOChronology.getInstance(zone));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <267, 267>
this(longVar, ISOChronology.getInstance(DateTimeZone));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <330, 330>
PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <356, 356>
PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.Instant <120, 120>
InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <254, 254>
super(instant, DateTimeUtils.getChronology(chronology));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BaseDateTime <110, 110>
this(instant, ISOChronology.getInstance(zone));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.base.BaseDateTime <110, 110>
this(longVar, ISOChronology.getInstance(DateTimeZone));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BaseDateTime <147, 147>
InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BaseDateTime <169, 169>
InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BasePartial <132, 132>
PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BasePartial <159, 159>
PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <240, 240>
super(instant, DateTimeUtils.getChronology(chronology));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <261, 261>
this(instant, ISOChronology.getInstance(zone));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <261, 261>
this(longVar, ISOChronology.getInstance(DateTimeZone));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <322, 322>
PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <348, 348>
PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <294, 294>
this(instant, ISOChronology.getInstance(zone));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalTime <294, 294>
this(longVar, ISOChronology.getInstance(DateTimeZone));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <356, 356>
PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <382, 382>
PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicFixedMonthChronology <77, 77>
instant = getYearMonthDayMillis(year, 1, dayOfYear);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicFixedMonthChronology <77, 77>
longVar = getYearMonthDayMillis(intVar, 1, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.IslamicChronology <317, 317>
instant = getYearMonthDayMillis(year, 1, dayOfYear);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.IslamicChronology <317, 317>
longVar = getYearMonthDayMillis(intVar, 1, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicGJChronology <195, 195>
instant = getYearMonthDayMillis(year, 1, dayOfYear);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicGJChronology <195, 195>
longVar = getYearMonthDayMillis(intVar, 1, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.OffsetDateTimeField <113, 113>
FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.OffsetDateTimeField <113, 113>
FieldUtils.verifyValueBounds(this, get(longVar), intVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.OffsetDateTimeField <127, 127>
FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.OffsetDateTimeField <127, 127>
FieldUtils.verifyValueBounds(this, get(longVar), intVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.LenientDateTimeField <73, 73>
long difference = FieldUtils.safeSubtract(value, get(instant));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.LenientDateTimeField <73, 73>
long longVar = FieldUtils.safeSubtract(intVar, get(longVar));

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.field.LenientDateTimeField <73, 73>
long difference = FieldUtils.safeSubtract(value, get(instant));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatterBuilder <1346, 1346>
FormatUtils.appendUnpaddedInteger(buf, field.get(instant));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatterBuilder <1346, 1346>
FormatUtils.appendUnpaddedInteger(StringBuffer, DateTimeField.get(longVar));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatterBuilder <1357, 1357>
FormatUtils.writeUnpaddedInteger(out, field.get(instant));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatterBuilder <1357, 1357>
FormatUtils.writeUnpaddedInteger(Writer, DateTimeField.get(longVar));

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <677, 677>
long instant = 0L;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <677, 677>
long longVar = 0L;

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.GJChronology <677, 677>
long instant = 0L;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <840, 840>
long instant = 0L;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <840, 840>
long longVar = 0L;

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.GJChronology <840, 840>
long instant = 0L;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <210, 210>
long instant = 0L;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <210, 210>
long longVar = 0L;

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <210, 210>
long instant = 0L;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <149, 149>
super(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateMidnight <149, 149>
super(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MonthDay <216, 216>
super(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.MonthDay <216, 216>
super(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <253, 253>
this(instant, ISOChronology.getInstance());

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <253, 253>
this(longVar, ISOChronology.getInstance());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <1081, 1081>
long instant = getLocalMillis();

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <1081, 1081>
long longVar = getLocalMillis();

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.LocalDate <1081, 1081>
long instant = getLocalMillis();

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.YearMonth <208, 208>
super(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.YearMonth <208, 208>
super(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.TimeOfDay <241, 241>
super(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.TimeOfDay <241, 241>
super(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <164, 164>
super(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.MutableDateTime <164, 164>
super(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <428, 428>
super.setMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.MutableDateTime <428, 428>
super.setMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <932, 932>
setMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.MutableDateTime <932, 932>
setMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <957, 957>
setMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.MutableDateTime <957, 957>
setMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.YearMonthDay <195, 195>
super(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.YearMonthDay <195, 195>
super(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BaseDateTime <97, 97>
this(instant, ISOChronology.getInstance());

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.base.BaseDateTime <97, 97>
this(longVar, ISOChronology.getInstance());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <147, 147>
super(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <147, 147>
super(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <622, 622>
long instant = getMillis();

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <622, 622>
long longVar = getMillis();

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.DateTime <622, 622>
long instant = getMillis();

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <648, 648>
long instant = getMillis();

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <648, 648>
long longVar = getMillis();

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.DateTime <648, 648>
long instant = getMillis();

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <247, 247>
this(instant, ISOChronology.getInstance());

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <247, 247>
this(longVar, ISOChronology.getInstance());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <783, 783>
long instant = getLocalMillis();

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <783, 783>
long longVar = getLocalMillis();

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.LocalDateTime <783, 783>
long instant = getLocalMillis();

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <810, 810>
long instant = getLocalMillis();

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <810, 810>
long longVar = getLocalMillis();

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.LocalDateTime <810, 810>
long instant = getLocalMillis();

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <280, 280>
this(instant, ISOChronology.getInstance());

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalTime <280, 280>
this(longVar, ISOChronology.getInstance());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <283, 283>
long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <283, 283>
long longVar = Chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, longVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.LocalDate <283, 283>
long localMillis = Chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatter <706, 706>
instant.setMillis(bucket.computeMillis(false, text));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <277, 277>
long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <277, 277>
long longVar = Chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, longVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.LocalDateTime <277, 277>
long localMillis = Chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <310, 310>
long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalTime <310, 310>
long longVar = Chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, longVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.LocalTime <310, 310>
long localMillis = Chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MonthDay <270, 270>
super(instant, DateTimeUtils.getChronology(chronology), ISODateTimeFormat.localDateParser());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.YearMonth <262, 262>
super(instant, DateTimeUtils.getChronology(chronology), ISODateTimeFormat.localDateParser());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.TimeOfDay <301, 301>
super(instant, DateTimeUtils.getChronology(chronology), ISODateTimeFormat.timeParser());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.YearMonthDay <255, 255>
super(instant, DateTimeUtils.getChronology(chronology), ISODateTimeFormat.dateOptionalTimeParser());

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.IslamicChronology <290, 290>
long millisIslamic = instant - MILLIS_YEAR_1;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.IslamicChronology <290, 290>
long longVar = longVar - longVar;

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.IslamicChronology <290, 290>
long millisIslamic = instant - MILLIS_YEAR_1;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <635, 635>
return set(instant, text, null);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <635, 635>
return set(longVar, StringVar, null);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <104, 104>
int thisMonth = iChronology.getMonthOfYear(instant, thisYear);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <104, 104>
int intVar = AssembledChronology.getMonthOfYear(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <161, 161>
int thisMonth = iChronology.getMonthOfYear(instant, thisYear);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <161, 161>
int intVar = AssembledChronology.getMonthOfYear(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <296, 296>
int thisDom = iChronology.getDayOfMonth(instant, thisYear);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <296, 296>
int intVar = AssembledChronology.getDayOfMonth(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <344, 344>
int month = iChronology.getMonthOfYear(instant, year);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <344, 344>
int intVar = AssembledChronology.getMonthOfYear(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <331, 331>
Chronology chronology = converter.getChronology(instant, zone);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <323, 323>
Chronology chronology = converter.getChronology(instant, zone);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <357, 357>
Chronology chronology = converter.getChronology(instant, zone);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <398, 398>
long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <398, 398>
long longVar = Chronology.getDateTimeMillis(intVar, intVar, intVar, 0);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.LocalDate <398, 398>
long instant = Chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <178, 178>
checkLimits(instant, "resulting");

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <178, 178>
checkLimits(longVar, "resulting");

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <190, 190>
checkLimits(instant, "resulting");

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <190, 190>
checkLimits(longVar, "resulting");

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <199, 199>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <199, 199>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <202, 202>
checkLimits(instant, "resulting");

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <202, 202>
checkLimits(longVar, "resulting");

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <396, 396>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <396, 396>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <401, 401>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <401, 401>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <406, 406>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <406, 406>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <411, 411>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <411, 411>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <416, 416>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <416, 416>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <418, 418>
checkLimits(longVar, "resulting");

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <423, 423>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <423, 423>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <425, 425>
checkLimits(longVar, "resulting");

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <461, 461>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <461, 461>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <466, 466>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <466, 466>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <471, 471>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <471, 471>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <476, 476>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <476, 476>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <478, 478>
checkLimits(longVar, "resulting");

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <483, 483>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <483, 483>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <485, 485>
checkLimits(longVar, "resulting");

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <490, 490>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <490, 490>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <492, 492>
checkLimits(longVar, "resulting");

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <509, 509>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <509, 509>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <511, 511>
checkLimits(longVar, "resulting");

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <516, 516>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <516, 516>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <518, 518>
checkLimits(longVar, "resulting");

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <531, 531>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <531, 531>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <536, 536>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <536, 536>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <545, 545>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <545, 545>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <547, 547>
checkLimits(longVar, "resulting");

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <552, 552>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <552, 552>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <554, 554>
checkLimits(longVar, "resulting");

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <559, 559>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <559, 559>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <561, 561>
checkLimits(longVar, "resulting");

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <566, 566>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <566, 566>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <568, 568>
checkLimits(longVar, "resulting");

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <573, 573>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <573, 573>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <575, 575>
checkLimits(longVar, "resulting");

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <580, 580>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <580, 580>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <582, 582>
checkLimits(longVar, "resulting");

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <587, 587>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <587, 587>
checkLimits(longVar, null);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <592, 592>
checkLimits(instant, null);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <592, 592>
checkLimits(longVar, null);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <200, 200>
super(instant, (Chronology) null);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <308, 308>
this(instant, (Chronology) null);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <211, 211>
super(instant, (Chronology) null);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BasePartial <93, 93>
this(instant, null);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.base.BasePartial <93, 93>
this(longVar, null);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <195, 195>
super(instant, (Chronology) null);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <300, 300>
this(instant, (Chronology) null);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <334, 334>
this(instant, (Chronology) null);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.Period <1558, 1558>
Period BasePeriod = new Period(longVar, DateTimeUtils.getPeriodType(PeriodType), ISOChronology.getInstanceUTC());

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicWeekyearDateTimeField <79, 79>
return add(instant, FieldUtils.safeToInt(value));

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicWeekyearDateTimeField <79, 79>
return add(longVar, FieldUtils.safeToInt(longVar));

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicYearDateTimeField <67, 67>
return add(instant, FieldUtils.safeToInt(years));

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicYearDateTimeField <67, 67>
return add(longVar, FieldUtils.safeToInt(longVar));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDurationField <111, 111>
return FieldUtils.safeToInt(getValueAsLong(duration, instant));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDurationField <111, 111>
return FieldUtils.safeToInt(getValueAsLong(longVar, longVar));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <334, 334>
int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateParser());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <360, 360>
int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateParser());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatterBuilder <1409, 1409>
FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatterBuilder <1409, 1409>
FormatUtils.appendPaddedInteger(StringBuffer, DateTimeField.get(longVar), intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatterBuilder <1420, 1420>
FormatUtils.writePaddedInteger(out, field.get(instant), iMinPrintedDigits);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatterBuilder <1420, 1420>
FormatUtils.writePaddedInteger(Writer, DateTimeField.get(longVar), intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <326, 326>
int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <352, 352>
int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <360, 360>
int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localTimeParser());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <386, 386>
int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localTimeParser());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.Instant <121, 121>
iMillis = converter.getInstantMillis(instant, ISOChronology.getInstanceUTC());

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.Instant <121, 121>
longVar = InstantConverter.getInstantMillis(Object, ISOChronology.getInstanceUTC());

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicDayOfMonthDateTimeField <96, 96>
return iChronology.getDaysInMonthMaxForSet(instant, value);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicDayOfMonthDateTimeField <96, 96>
return AssembledChronology.getDaysInMonthMaxForSet(longVar, intVar);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <412, 412>
return DateTimeField.getAsText(longVar, Locale);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <417, 417>
return DateTimeField.getAsShortText(longVar, Locale);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <527, 527>
longVar = DateTimeField.roundFloor(longVar);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <539, 539>
longVar = DateTimeField.roundCeiling(longVar);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <563, 563>
return iField.getMinimumValue(instant, values);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <580, 580>
return iField.getMaximumValue(instant, values);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicYearDateTimeField <84, 84>
return iChronology.setYear(instant, year);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicYearDateTimeField <84, 84>
return AssembledChronology.setYear(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <562, 562>
return convertByYear(instant, iJulianChronology, iGregorianChronology);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <562, 562>
return convertByYear(longVar, BasicGJChronology, BasicGJChronology);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <566, 566>
return convertByYear(instant, iGregorianChronology, iJulianChronology);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <566, 566>
return convertByYear(longVar, BasicGJChronology, BasicGJChronology);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <570, 570>
return convertByWeekyear(instant, iJulianChronology, iGregorianChronology);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <570, 570>
return convertByWeekyear(longVar, BasicGJChronology, BasicGJChronology);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <574, 574>
return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <574, 574>
return convertByWeekyear(longVar, BasicGJChronology, BasicGJChronology);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <663, 663>
return iGregorianField.add(instant, value);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <663, 663>
return DateTimeField.add(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <667, 667>
return iGregorianField.add(instant, value);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <667, 667>
return DateTimeField.add(longVar, longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <681, 681>
instant = add(instant, valueToAdd);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <681, 681>
longVar = add(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <852, 852>
instant = iGregorianField.roundFloor(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <852, 852>
longVar = DateTimeField.roundFloor(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <860, 860>
instant = iJulianField.roundFloor(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <860, 860>
longVar = DateTimeField.roundFloor(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <867, 867>
instant = iGregorianField.roundCeiling(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <867, 867>
longVar = DateTimeField.roundCeiling(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <869, 869>
instant = iJulianField.roundCeiling(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <869, 869>
longVar = DateTimeField.roundCeiling(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <1075, 1075>
return iField.add(instant, value);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <1075, 1075>
return ImpreciseCutoverField.add(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <1079, 1079>
return iField.add(instant, value);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <1079, 1079>
return ImpreciseCutoverField.add(longVar, longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <214, 214>
instant = add(instant, valueToAdd);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <214, 214>
longVar = add(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <215, 215>
return iChronology.get(partial, instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <215, 215>
return AssembledChronology.get(ReadablePartial, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.convert.AbstractConverter <102, 102>
return chrono.get(fieldSource, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.convert.AbstractConverter <102, 102>
return Chronology.get(ReadablePartial, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <875, 875>
instant = chrono.set(this, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <875, 875>
longVar = Chronology.set(this, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.OffsetDateTimeField <112, 112>
instant = super.add(instant, amount);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.OffsetDateTimeField <112, 112>
longVar = super.add(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.OffsetDateTimeField <126, 126>
instant = super.add(instant, amount);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.OffsetDateTimeField <126, 126>
longVar = super.add(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DecoratedDateTimeField <82, 82>
return iField.set(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DecoratedDateTimeField <82, 82>
return DateTimeField.set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDurationField <106, 106>
return iField.getValue(duration, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDurationField <106, 106>
return DurationField.getValue(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDurationField <110, 110>
return iField.getValueAsLong(duration, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDurationField <110, 110>
return DurationField.getValueAsLong(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDurationField <122, 122>
return iField.getMillis(value, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDurationField <122, 122>
return DurationField.getMillis(intVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDurationField <126, 126>
return iField.getMillis(value, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDurationField <126, 126>
return DurationField.getMillis(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDurationField <130, 130>
return iField.add(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDurationField <130, 130>
return DurationField.add(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDurationField <134, 134>
return iField.add(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDurationField <134, 134>
return DurationField.add(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <100, 100>
return iField.getAsText(instant, locale);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <100, 100>
return DateTimeField.getAsText(longVar, Locale);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <120, 120>
return iField.getAsShortText(instant, locale);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <120, 120>
return DateTimeField.getAsShortText(longVar, Locale);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <140, 140>
return iField.add(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <140, 140>
return DateTimeField.add(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <144, 144>
return iField.add(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <144, 144>
return DateTimeField.add(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <156, 156>
return iField.addWrapField(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <156, 156>
return DateTimeField.addWrapField(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <172, 172>
return iField.set(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <172, 172>
return DateTimeField.set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <180, 180>
return iField.set(instant, text);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <180, 180>
return DateTimeField.set(longVar, StringVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <224, 224>
return iField.getMinimumValue(instant, values);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <240, 240>
return iField.getMaximumValue(instant, values);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DecoratedDurationField <77, 77>
return iField.getValueAsLong(duration, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DecoratedDurationField <77, 77>
return DurationField.getValueAsLong(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DecoratedDurationField <81, 81>
return iField.getMillis(value, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DecoratedDurationField <81, 81>
return DurationField.getMillis(intVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DecoratedDurationField <85, 85>
return iField.getMillis(value, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DecoratedDurationField <85, 85>
return DurationField.getMillis(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DecoratedDurationField <89, 89>
return iField.add(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DecoratedDurationField <89, 89>
return DurationField.add(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DecoratedDurationField <93, 93>
return iField.add(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DecoratedDurationField <93, 93>
return DurationField.add(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <412, 412>
instant = iRoundingField.roundFloor(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.MutableDateTime <412, 412>
longVar = DateTimeField.roundFloor(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <415, 415>
instant = iRoundingField.roundCeiling(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.MutableDateTime <415, 415>
longVar = DateTimeField.roundCeiling(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <418, 418>
instant = iRoundingField.roundHalfFloor(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.MutableDateTime <418, 418>
longVar = DateTimeField.roundHalfFloor(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <421, 421>
instant = iRoundingField.roundHalfCeiling(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.MutableDateTime <421, 421>
longVar = DateTimeField.roundHalfCeiling(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <424, 424>
instant = iRoundingField.roundHalfEven(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.MutableDateTime <424, 424>
longVar = DateTimeField.roundHalfEven(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.YearMonthDay <771, 771>
instant = chrono.set(this, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.YearMonthDay <771, 771>
longVar = Chronology.set(this, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BaseDateTime <126, 126>
iMillis = checkInstant(instant, iChronology);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.base.BaseDateTime <126, 126>
longVar = checkInstant(longVar, Chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BaseDateTime <256, 256>
iMillis = checkInstant(instant, iChronology);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.base.BaseDateTime <256, 256>
longVar = checkInstant(longVar, Chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BaseDateTime <317, 317>
iMillis = checkInstant(instant, iChronology);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.base.BaseDateTime <317, 317>
longVar = checkInstant(longVar, Chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BasePartial <111, 111>
iValues = chronology.get(this, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.base.BasePartial <111, 111>
int[]Var = Chronology.get(this, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatterBuilder <1735, 1735>
return field.getAsShortText(instant, locale);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatterBuilder <1735, 1735>
return DateTimeField.getAsShortText(longVar, Locale);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatterBuilder <1737, 1737>
return field.getAsText(instant, locale);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatterBuilder <1737, 1737>
return DateTimeField.getAsText(longVar, Locale);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatterBuilder <1884, 1884>
fraction = field.remainder(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatterBuilder <1884, 1884>
longVar = DateTimeField.remainder(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatterBuilder <2436, 2436>
return displayZone.getName(instant, locale);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatterBuilder <2436, 2436>
return DateTimeZone.getName(longVar, Locale);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatterBuilder <2438, 2438>
return displayZone.getShortName(instant, locale);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatterBuilder <2438, 2438>
return DateTimeZone.getShortName(longVar, Locale);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <317, 317>
nextField = instant.getField(fieldIndex - 1);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <338, 338>
nextField = instant.getField(fieldIndex - 1);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <400, 400>
nextField = instant.getField(fieldIndex - 1);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <423, 423>
nextField = instant.getField(fieldIndex - 1);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <717, 717>
int dayOfWeek = chrono.dayOfWeek().get(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <717, 717>
int intVar = Chronology.dayOfWeek().get(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicDayOfYearDateTimeField <52, 52>
return iChronology.getDayOfYear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicDayOfYearDateTimeField <52, 52>
return AssembledChronology.getDayOfYear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ISOYearOfEraDateTimeField <83, 83>
return super.set(instant, year);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ISOYearOfEraDateTimeField <83, 83>
return super.set(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicDayOfMonthDateTimeField <47, 47>
return iChronology.getDayOfMonth(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicDayOfMonthDateTimeField <47, 47>
return AssembledChronology.getDayOfMonth(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicDayOfMonthDateTimeField <63, 63>
return iChronology.getDaysInMonthMax(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicDayOfMonthDateTimeField <63, 63>
return AssembledChronology.getDaysInMonthMax(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField <54, 54>
return iChronology.getWeekOfWeekyear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField <54, 54>
return AssembledChronology.getWeekOfWeekyear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJDayOfWeekDateTimeField <56, 56>
return iChronology.getDayOfWeek(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJDayOfWeekDateTimeField <56, 56>
return AssembledChronology.getDayOfWeek(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicWeekyearDateTimeField <60, 60>
return iChronology.getWeekyear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicWeekyearDateTimeField <60, 60>
return AssembledChronology.getWeekyear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicWeekyearDateTimeField <92, 92>
return add(instant, years);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicWeekyearDateTimeField <92, 92>
return add(longVar, intVar);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <407, 407>
return DateTimeField.get(longVar);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <508, 508>
return DateTimeField.isLeap(longVar);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <513, 513>
return DateTimeField.getLeapAmount(longVar);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <546, 546>
return DateTimeField.remainder(longVar);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <555, 555>
return DateTimeField.getMinimumValue(longVar);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <559, 559>
return iField.getMinimumValue(instant);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <572, 572>
return DateTimeField.getMaximumValue(longVar);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <576, 576>
return iField.getMaximumValue(instant);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJYearOfEraDateTimeField <89, 89>
return super.set(instant, year);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJYearOfEraDateTimeField <89, 89>
return super.set(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicYearDateTimeField <54, 54>
return iChronology.getYear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicYearDateTimeField <54, 54>
return AssembledChronology.getYear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicYearDateTimeField <63, 63>
return set(instant, newYear);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicYearDateTimeField <63, 63>
return set(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicYearDateTimeField <78, 78>
return set(instant, wrappedYear);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicYearDateTimeField <78, 78>
return set(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <682, 682>
return GJChronology.this.get(partial, instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <682, 682>
return GJChronology.AssembledChronology.get(ReadablePartial, longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <72, 72>
return iChronology.getMonthOfYear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <72, 72>
return AssembledChronology.getMonthOfYear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <153, 153>
return add(instant, i_months);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <153, 153>
return add(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <668, 668>
return new DateTime(instant, chrono);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <668, 668>
return new DateTime(longVar, Chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <879, 879>
return new DateTime(instant, chrono);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <879, 879>
return new DateTime(longVar, Chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DecoratedDateTimeField <78, 78>
return iField.get(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DecoratedDateTimeField <78, 78>
return DateTimeField.get(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DecoratedDateTimeField <102, 102>
return iField.roundFloor(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DecoratedDateTimeField <102, 102>
return DateTimeField.roundFloor(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.StrictDateTimeField <69, 69>
return super.set(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.StrictDateTimeField <69, 69>
return super.set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.ImpreciseDateTimeField <182, 182>
return ImpreciseDateTimeField.this.add(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.ImpreciseDateTimeField <182, 182>
return ImpreciseDateTimeField.BaseDateTimeField.add(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.ImpreciseDateTimeField <186, 186>
return ImpreciseDateTimeField.this.add(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.ImpreciseDateTimeField <186, 186>
return ImpreciseDateTimeField.BaseDateTimeField.add(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <96, 96>
return iField.get(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <96, 96>
return DateTimeField.get(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <104, 104>
return iField.getAsText(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <104, 104>
return DateTimeField.getAsText(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <124, 124>
return iField.getAsShortText(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <124, 124>
return DateTimeField.getAsShortText(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <200, 200>
return iField.isLeap(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <200, 200>
return DateTimeField.isLeap(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <204, 204>
return iField.getLeapAmount(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <204, 204>
return DateTimeField.getLeapAmount(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <216, 216>
return iField.getMinimumValue(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <216, 216>
return DateTimeField.getMinimumValue(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <220, 220>
return iField.getMinimumValue(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <232, 232>
return iField.getMaximumValue(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <232, 232>
return DateTimeField.getMaximumValue(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <236, 236>
return iField.getMaximumValue(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <252, 252>
return iField.roundFloor(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <252, 252>
return DateTimeField.roundFloor(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <256, 256>
return iField.roundCeiling(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <256, 256>
return DateTimeField.roundCeiling(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <260, 260>
return iField.roundHalfFloor(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <260, 260>
return DateTimeField.roundHalfFloor(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <264, 264>
return iField.roundHalfCeiling(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <264, 264>
return DateTimeField.roundHalfCeiling(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <268, 268>
return iField.roundHalfEven(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <268, 268>
return DateTimeField.roundHalfEven(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <272, 272>
return iField.remainder(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <272, 272>
return DateTimeField.remainder(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <464, 464>
return set(instant, wrapped);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <464, 464>
return set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <619, 619>
return set(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <619, 619>
return set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.YearMonthDay <775, 775>
return new DateTime(instant, chrono);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.YearMonthDay <775, 775>
return new DateTime(longVar, Chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DurationField <210, 210>
return subtract(instant, (long) value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DurationField <210, 210>
return subtract(longVar, (long) intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.DurationField <210, 210>
return subtract(instant, (long) value);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1524, 1524>
return iTailZone.getNameKey(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1524, 1524>
return DSTZone.getNameKey(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1543, 1543>
return iTailZone.getOffset(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1543, 1543>
return DSTZone.getOffset(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1562, 1562>
return iTailZone.getStandardOffset(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1562, 1562>
return DSTZone.getStandardOffset(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1583, 1583>
return iTailZone.nextTransition(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1583, 1583>
return DSTZone.nextTransition(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BaseDateTime <148, 148>
Chronology chrono = checkChronology(converter.getChronology(instant, zone));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatterBuilder <1633, 1633>
int year = iType.getField(chrono).get(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatterBuilder <1633, 1633>
int intVar = DateTimeFieldType.getField(Chronology).get(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatterBuilder <1700, 1700>
buf.append(print(instant, chrono, locale));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatterBuilder <1700, 1700>
StringBuffer.append(print(longVar, Chronology, Locale));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatterBuilder <1710, 1710>
out.write(print(instant, chrono, locale));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatterBuilder <1710, 1710>
Writer.write(print(longVar, Chronology, Locale));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <561, 561>
long next = chrono.monthOfYear().set(instant, iMonthOfYear);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <561, 561>
long longVar = Chronology.monthOfYear().set(longVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.tz.DateTimeZoneBuilder <561, 561>
long next = Chronology.monthOfYear().set(instant, iMonthOfYear);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <603, 603>
long prev = chrono.monthOfYear().set(instant, iMonthOfYear);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <603, 603>
long longVar = Chronology.monthOfYear().set(longVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.tz.DateTimeZoneBuilder <603, 603>
long prev = Chronology.monthOfYear().set(instant, iMonthOfYear);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <709, 709>
instant = chrono.dayOfMonth().set(instant, 1);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <709, 709>
longVar = Chronology.dayOfMonth().set(longVar, 1);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <710, 710>
instant = chrono.monthOfYear().add(instant, 1);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <710, 710>
longVar = Chronology.monthOfYear().add(longVar, 1);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <102, 102>
long instant = year().set(0, year);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <102, 102>
long longVar = year().set(0, intVar);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.BaseChronology <102, 102>
long instant = year().set(0, year);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <132, 132>
long instant = year().set(0, year);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <132, 132>
long longVar = year().set(0, intVar);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.BaseChronology <132, 132>
long instant = year().set(0, year);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <435, 435>
longVar = DateTimeField.add(longVar, intVar);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <447, 447>
longVar = DateTimeField.add(longVar, longVar);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <459, 459>
longVar = DateTimeField.addWrapField(longVar, intVar);

---fix ingredient(SameMethod)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <466, 466>
longVar = DateTimeField.set(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <698, 698>
instant = iGregorianField.set(instant, value);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <698, 698>
longVar = DateTimeField.set(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <711, 711>
instant = iJulianField.set(instant, value);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <711, 711>
longVar = DateTimeField.set(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <802, 802>
instant = iGregorianField.set(instant, min);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <802, 802>
longVar = DateTimeField.set(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <825, 825>
instant = iJulianField.set(instant, max);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <825, 825>
longVar = DateTimeField.set(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <953, 953>
instant = iGregorianField.add(instant, value);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <953, 953>
longVar = iGregorianField.add(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <961, 961>
instant = iJulianField.add(instant, value);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <961, 961>
longVar = iJulianField.add(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <974, 974>
instant = iGregorianField.add(instant, value);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <974, 974>
longVar = iGregorianField.add(longVar, longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <982, 982>
instant = iJulianField.add(instant, value);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <982, 982>
longVar = iJulianField.add(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <357, 357>
chronology = converter.getChronology(instant, chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <877, 877>
instant = chrono.set(time, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <877, 877>
longVar = Chronology.set(BaseLocal, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <176, 176>
return iField.set(instant, text, locale);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DelegatedDateTimeField <176, 176>
return DateTimeField.set(longVar, StringVar, Locale);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <498, 498>
return set(instant, fieldIndex, values, wrapped);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <655, 655>
return set(instant, fieldIndex, values, value);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.YearMonthDay <773, 773>
instant = chrono.set(time, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.YearMonthDay <773, 773>
longVar = Chronology.set(BasePartial, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BasePartial <133, 133>
chronology = converter.getChronology(instant, chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BasePartial <136, 136>
iValues = converter.getPartialValues(this, instant, chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BasePartial <160, 160>
chronology = converter.getChronology(instant, chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <349, 349>
chronology = converter.getChronology(instant, chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <383, 383>
chronology = converter.getChronology(instant, chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <761, 761>
return iOfYear.next(instant, standardOffset, saveMillis);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <761, 761>
return OfYear.next(longVar, intVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <768, 768>
return iOfYear.previous(instant, standardOffset, saveMillis);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <768, 768>
return OfYear.previous(longVar, intVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <457, 458>
long instant = chronology.getDateTimeMillis(
            0L, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalTime <457, 458>
long longVar = Chronology.getDateTimeMillis(
            0L, intVar, intVar, intVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.LocalTime <457, 458>
long instant = Chronology.getDateTimeMillis(
            0L, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <136, 136>
int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <136, 136>
int intVar = AssembledChronology.getDayOfMonth(longVar, intVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <191, 191>
int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <191, 191>
int intVar = AssembledChronology.getDayOfMonth(longVar, intVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1091, 1091>
long next = rule.next(instant, iStandardOffset, saveMillis);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1091, 1091>
long longVar = Rule.next(longVar, intVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.tz.DateTimeZoneBuilder <1091, 1091>
long next = Rule.next(instant, iStandardOffset, saveMillis);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <232, 232>
return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <232, 232>
return set(longVar, FieldUtils.getWrappedValue(get(longVar), intVar, intVar, intVar));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTimeUtils <146, 148>
if (instant == null) {
            return DateTimeUtils.currentTimeMillis();
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTimeUtils <164, 166>
if (instant == null) {
            return ISOChronology.getInstance();
        }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <177, 177>
long instant = getBase().getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <177, 177>
long longVar = getBase().getDateTimeMillis(intVar, intVar, intVar, intVar);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.LimitChronology <177, 177>
long instant = getBase().getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.RemainderDateTimeField <118, 118>
return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.RemainderDateTimeField <118, 118>
return set(longVar, FieldUtils.getWrappedValue(get(longVar), intVar, 0, intVar - 1));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.StrictDateTimeField <67, 68>
FieldUtils.verifyValueBounds
            (this, value, getMinimumValue(instant), getMaximumValue(instant));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.StrictDateTimeField <67, 68>
FieldUtils.verifyValueBounds
            (this, intVar, getMinimumValue(longVar), getMaximumValue(longVar));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.PreciseDurationDateTimeField <78, 79>
FieldUtils.verifyValueBounds(this, value, getMinimumValue(),
                                     getMaximumValueForSet(instant, value));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.PreciseDurationDateTimeField <78, 79>
FieldUtils.verifyValueBounds(this, intVar, getMinimumValue(),
                                     getMaximumValueForSet(longVar, intVar));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <324, 324>
values = nextField.add(instant, fieldIndex - 1, values, 1);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <407, 407>
values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <345, 345>
long sum = instant + offset;

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <345, 345>
long longVar = longVar + intVar;

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <345, 345>
long sum = instant + offset;

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <355, 355>
long diff = instant - offset;

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <355, 355>
long longVar = longVar - intVar;

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <355, 355>
long diff = instant - offset;

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <593, 593>
long sum = instant + offset;

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <593, 593>
long longVar = longVar + intVar;

---fix ingredient(SameFile)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.ZonedChronology <593, 593>
long sum = instant + offset;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicChronology <407, 407>
long diff = instant - yearStart;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicChronology <407, 407>
long longVar = longVar - longVar;

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.BasicChronology <407, 407>
long diff = instant - yearStart;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <906, 906>
long diffFromFloor = instant - floor;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <906, 906>
long longVar = longVar - longVar;

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.field.BaseDateTimeField <906, 906>
long diffFromFloor = instant - floor;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <907, 907>
long diffToCeiling = ceiling - instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <907, 907>
long longVar = longVar - longVar;

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.field.BaseDateTimeField <907, 907>
long diffToCeiling = ceiling - instant;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <930, 930>
long diffFromFloor = instant - floor;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <930, 930>
long longVar = longVar - longVar;

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.field.BaseDateTimeField <930, 930>
long diffFromFloor = instant - floor;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <931, 931>
long diffToCeiling = ceiling - instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <931, 931>
long longVar = longVar - longVar;

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.field.BaseDateTimeField <931, 931>
long diffToCeiling = ceiling - instant;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <958, 958>
long diffFromFloor = instant - floor;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <958, 958>
long longVar = longVar - longVar;

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.field.BaseDateTimeField <958, 958>
long diffFromFloor = instant - floor;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <959, 959>
long diffToCeiling = ceiling - instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <959, 959>
long longVar = longVar - longVar;

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.field.BaseDateTimeField <959, 959>
long diffToCeiling = ceiling - instant;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatter <622, 622>
long adjustedInstant = instant + offset;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatter <622, 622>
long longVar = longVar + intVar;

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.format.DateTimeFormatter <622, 622>
long adjustedInstant = instant + offset;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatter <639, 639>
long adjustedInstant = instant + offset;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatter <639, 639>
long longVar = longVar + intVar;

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.format.DateTimeFormatter <639, 639>
long adjustedInstant = instant + offset;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicFixedMonthChronology <78, 78>
instant += millisOfDay;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicFixedMonthChronology <78, 78>
longVar += intVar;

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <141, 141>
instant -= offset;

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <141, 141>
longVar -= intVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.IslamicChronology <318, 318>
instant += millisOfDay;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.IslamicChronology <318, 318>
longVar += intVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicGJChronology <196, 196>
instant += millisOfDay;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicGJChronology <196, 196>
longVar += intVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <1169, 1169>
iInstant = instant;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <400, 400>
iLocalMillis = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <400, 400>
longVar = longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <1800, 1800>
iInstant = instant;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.Instant <106, 106>
iMillis = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.Instant <106, 106>
longVar = longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <1219, 1219>
iInstant = instant;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <1927, 1927>
iInstant = instant;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <452, 452>
iLocalMillis = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <452, 452>
longVar = longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <2019, 2019>
iInstant = instant;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <460, 460>
iLocalMillis = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalTime <460, 460>
longVar = longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <1319, 1319>
iInstant = instant;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <558, 558>
instant += offset;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <558, 558>
longVar += intVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <600, 600>
instant += offset;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <600, 600>
longVar += intVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1210, 1210>
start = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1210, 1210>
longVar = longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1214, 1214>
start = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1214, 1214>
longVar = longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1217, 1217>
start = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1217, 1217>
longVar = longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1225, 1225>
end = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1225, 1225>
longVar = longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1229, 1229>
end = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1229, 1229>
longVar = longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1232, 1232>
end = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1232, 1232>
longVar = longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1254, 1254>
start = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1254, 1254>
longVar = longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1258, 1258>
start = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1258, 1258>
longVar = longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1261, 1261>
start = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1261, 1261>
longVar = longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1269, 1269>
end = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1269, 1269>
longVar = longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1273, 1273>
end = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1273, 1273>
longVar = longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1276, 1276>
end = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1276, 1276>
longVar = longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1315, 1315>
start = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1315, 1315>
longVar = longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1318, 1318>
start = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1318, 1318>
longVar = longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1326, 1326>
end = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1326, 1326>
longVar = longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1329, 1329>
end = instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1329, 1329>
longVar = longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ISOYearOfEraDateTimeField <67, 67>
return getWrappedField().addWrapField(instant, fieldIndex, values, years);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJYearOfEraDateTimeField <65, 65>
return getWrappedField().addWrapField(instant, fieldIndex, values, years);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <887, 889>
if (newInstant != instant) {
            instant = add(newInstant, 1);
        }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <887, 889>
if (longVar != longVar) {
            longVar = add(longVar, 1);
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.ZeroIsMaxDateTimeField <72, 72>
return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BaseDateTime <170, 170>
iChronology = checkChronology(converter.getChronology(instant, chronology));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <623, 623>
instant = chrono.year().set(instant, year);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <623, 623>
longVar = Chronology.year().set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <624, 624>
instant = chrono.monthOfYear().set(instant, monthOfYear);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <624, 624>
longVar = Chronology.monthOfYear().set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <625, 625>
instant = chrono.dayOfMonth().set(instant, dayOfMonth);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <625, 625>
longVar = Chronology.dayOfMonth().set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <649, 649>
instant = chrono.hourOfDay().set(instant, hourOfDay);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <649, 649>
longVar = Chronology.hourOfDay().set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <650, 650>
instant = chrono.minuteOfHour().set(instant, minuteOfHour);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <650, 650>
longVar = Chronology.minuteOfHour().set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <651, 651>
instant = chrono.secondOfMinute().set(instant, secondOfMinute);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <651, 651>
longVar = Chronology.secondOfMinute().set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <652, 652>
instant = chrono.millisOfSecond().set(instant, millisOfSecond);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <652, 652>
longVar = Chronology.millisOfSecond().set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <784, 784>
instant = chrono.year().set(instant, year);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <784, 784>
longVar = Chronology.year().set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <785, 785>
instant = chrono.monthOfYear().set(instant, monthOfYear);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <785, 785>
longVar = Chronology.monthOfYear().set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <786, 786>
instant = chrono.dayOfMonth().set(instant, dayOfMonth);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <786, 786>
longVar = Chronology.dayOfMonth().set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <811, 811>
instant = chrono.hourOfDay().set(instant, hourOfDay);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <811, 811>
longVar = Chronology.hourOfDay().set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <812, 812>
instant = chrono.minuteOfHour().set(instant, minuteOfHour);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <812, 812>
longVar = Chronology.minuteOfHour().set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <813, 813>
instant = chrono.secondOfMinute().set(instant, secondOfMinute);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <813, 813>
longVar = Chronology.secondOfMinute().set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <814, 814>
instant = chrono.millisOfSecond().set(instant, millisOfSecond);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <814, 814>
longVar = Chronology.millisOfSecond().set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <707, 707>
instant = chrono.dayOfMonth().set(instant, iDayOfMonth);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <707, 707>
longVar = Chronology.dayOfMonth().set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <711, 711>
instant = chrono.dayOfMonth().add(instant, iDayOfMonth);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <711, 711>
longVar = Chronology.dayOfMonth().add(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <729, 729>
instant = chrono.dayOfWeek().add(instant, daysToAdd);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <729, 729>
longVar = Chronology.dayOfWeek().add(longVar, intVar);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <480, 480>
longVar = DateTimeField.set(longVar, StringVar, Locale);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <729, 729>
instant = iGregorianField.set(instant, text, locale);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <729, 729>
longVar = DateTimeField.set(longVar, StringVar, Locale);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <738, 738>
instant = iJulianField.set(instant, text, locale);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <738, 738>
longVar = DateTimeField.set(longVar, StringVar, Locale);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.AssembledChronology <151, 152>
return super.getDateTimeMillis
            (instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.AssembledChronology <151, 152>
return super.getDateTimeMillis
            (longVar, intVar, intVar, intVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <148, 148>
return iField.add(instant, fieldIndex, values, valueToAdd);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <152, 152>
return iField.addWrapPartial(instant, fieldIndex, values, valueToAdd);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <160, 160>
return iField.addWrapField(instant, fieldIndex, values, valueToAdd);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <184, 184>
return iField.set(instant, fieldIndex, values, newValue);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BasePartial <163, 163>
iValues = converter.getPartialValues(this, instant, chronology, parser);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <462, 463>
int wrapped = FieldUtils.getWrappedValue
            (current, value, getMinimumValue(instant), getMaximumValue(instant));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <462, 463>
int intVar = FieldUtils.getWrappedValue
            (intVar, intVar, getMinimumValue(longVar), getMaximumValue(longVar));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <496, 497>
int wrapped = FieldUtils.getWrappedValue
            (current, valueToAdd, getMinimumValue(instant), getMaximumValue(instant));

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJEraDateTimeField <85, 85>
return iChronology.setYear(instant, -year);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJEraDateTimeField <85, 85>
return AssembledChronology.setYear(longVar, -intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.OffsetDateTimeField <153, 153>
return super.set(instant, value - iOffset);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.OffsetDateTimeField <153, 153>
return super.set(longVar, intVar - intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.ImpreciseDateTimeField <164, 165>
return ImpreciseDateTimeField.this
                .getDifference(instant + duration, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.ImpreciseDateTimeField <164, 165>
return ImpreciseDateTimeField.this
                .getDifference(longVar + longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.ImpreciseDateTimeField <169, 170>
return ImpreciseDateTimeField.this
                .getDifferenceAsLong(instant + duration, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.ImpreciseDateTimeField <169, 170>
return ImpreciseDateTimeField.this
                .getDifferenceAsLong(longVar + longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.ImpreciseDateTimeField <174, 174>
return ImpreciseDateTimeField.this.add(instant, value) - instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.ImpreciseDateTimeField <174, 174>
return ImpreciseDateTimeField.BaseDateTimeField.add(longVar, intVar) - longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.ImpreciseDateTimeField <178, 178>
return ImpreciseDateTimeField.this.add(instant, value) - instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.ImpreciseDateTimeField <178, 178>
return ImpreciseDateTimeField.BaseDateTimeField.add(longVar, longVar) - longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicWeekyearDateTimeField <212, 212>
return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicWeekyearDateTimeField <212, 212>
return AssembledChronology.getWeeksInYear(AssembledChronology.getWeekyear(longVar)) > 52;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicWeekyearDateTimeField <216, 216>
return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicWeekyearDateTimeField <216, 216>
return AssembledChronology.getWeeksInYear(AssembledChronology.getWeekyear(longVar)) - 52;

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <523, 523>
instant = iField.roundFloor(instant + offset);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <523, 523>
longVar = DateTimeField.roundFloor(longVar + intVar);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <535, 535>
instant = iField.roundCeiling(instant + offset);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <535, 535>
longVar = DateTimeField.roundCeiling(longVar + intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <316, 316>
return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <316, 316>
return (AssembledChronology.getMonthOfYear(longVar, intVar) == intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <325, 325>
values[fieldIndex] = getMinimumValue(instant, values);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <345, 345>
values[fieldIndex] = getMaximumValue(instant, values);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <397, 397>
values[fieldIndex] = getMinimumValue(instant, values);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <408, 408>
values[fieldIndex] = getMinimumValue(instant, values);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <420, 420>
values[fieldIndex] = getMaximumValue(instant, values);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <430, 430>
values[fieldIndex] = getMaximumValue(instant, values);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <1087, 1087>
instant = type.getField(chrono).add(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <1087, 1087>
longVar = DurationFieldType.getField(Chronology).add(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BaseDateTime <150, 150>
iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.base.BaseDateTime <150, 150>
longVar = checkInstant(InstantConverter.getInstantMillis(Object, Chronology), Chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BaseDateTime <171, 171>
iMillis = checkInstant(converter.getInstantMillis(instant, chronology), iChronology);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.base.BaseDateTime <171, 171>
longVar = checkInstant(InstantConverter.getInstantMillis(Object, Chronology), Chronology);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatterBuilder <2421, 2421>
buf.append(print(instant - displayOffset, displayZone, locale));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatterBuilder <2421, 2421>
StringBuffer.append(print(longVar - intVar, DateTimeZone, Locale));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatterBuilder <2427, 2427>
out.write(print(instant - displayOffset, displayZone, locale));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatterBuilder <2427, 2427>
Writer.write(print(longVar - intVar, DateTimeZone, Locale));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1206, 1207>
start = startRecurrence.next
                    (instant, standardOffset, endRecurrence.getSaveMillis());

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1206, 1207>
longVar = Recurrence.next
                    (longVar, intVar, Recurrence.getSaveMillis());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1221, 1222>
end = endRecurrence.next
                    (instant, standardOffset, startRecurrence.getSaveMillis());

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1221, 1222>
longVar = Recurrence.next
                    (longVar, intVar, Recurrence.getSaveMillis());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1250, 1251>
start = startRecurrence.previous
                    (instant, standardOffset, endRecurrence.getSaveMillis());

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1250, 1251>
longVar = Recurrence.previous
                    (longVar, intVar, Recurrence.getSaveMillis());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1265, 1266>
end = endRecurrence.previous
                    (instant, standardOffset, startRecurrence.getSaveMillis());

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1265, 1266>
longVar = Recurrence.previous
                    (longVar, intVar, Recurrence.getSaveMillis());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1311, 1312>
start = startRecurrence.next
                    (instant, standardOffset, endRecurrence.getSaveMillis());

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1311, 1312>
longVar = Recurrence.next
                    (longVar, intVar, Recurrence.getSaveMillis());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1322, 1323>
end = endRecurrence.next
                    (instant, standardOffset, startRecurrence.getSaveMillis());

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1322, 1323>
longVar = Recurrence.next
                    (longVar, intVar, Recurrence.getSaveMillis());

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <336, 337>
long instant = iGregorianChronology.getDateTimeMillis
            (year, monthOfYear, dayOfMonth, millisOfDay);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <336, 337>
long longVar = BasicGJChronology.getDateTimeMillis
            (intVar, intVar, intVar, intVar);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.GJChronology <336, 337>
long instant = BasicGJChronology.getDateTimeMillis
            (year, monthOfYear, dayOfMonth, millisOfDay);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicWeekyearDateTimeField <234, 234>
instant = iChronology.weekOfWeekyear().roundFloor(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicWeekyearDateTimeField <234, 234>
longVar = AssembledChronology.weekOfWeekyear().roundFloor(longVar);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <302, 302>
return iField.getValue(duration, addOffset(instant));

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <302, 302>
return DurationField.getValue(longVar, addOffset(longVar));

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <306, 306>
return iField.getValueAsLong(duration, addOffset(instant));

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <306, 306>
return DurationField.getValueAsLong(longVar, addOffset(longVar));

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <310, 310>
return iField.getMillis(value, addOffset(instant));

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <310, 310>
return DurationField.getMillis(intVar, addOffset(longVar));

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <314, 314>
return iField.getMillis(value, addOffset(instant));

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <314, 314>
return DurationField.getMillis(longVar, addOffset(longVar));

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <103, 103>
instant = monthOfYear().set(instant, monthOfYear);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <103, 103>
longVar = monthOfYear().set(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <104, 104>
instant = dayOfMonth().set(instant, dayOfMonth);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <104, 104>
longVar = dayOfMonth().set(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <133, 133>
instant = monthOfYear().set(instant, monthOfYear);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <133, 133>
longVar = monthOfYear().set(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <134, 134>
instant = dayOfMonth().set(instant, dayOfMonth);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <134, 134>
longVar = dayOfMonth().set(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <135, 135>
instant = hourOfDay().set(instant, hourOfDay);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <135, 135>
longVar = hourOfDay().set(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <136, 136>
instant = minuteOfHour().set(instant, minuteOfHour);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <136, 136>
longVar = minuteOfHour().set(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <137, 137>
instant = secondOfMinute().set(instant, secondOfMinute);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <137, 137>
longVar = secondOfMinute().set(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <163, 163>
instant = hourOfDay().set(instant, hourOfDay);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <163, 163>
longVar = hourOfDay().set(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <164, 164>
instant = minuteOfHour().set(instant, minuteOfHour);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <164, 164>
longVar = minuteOfHour().set(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <165, 165>
instant = secondOfMinute().set(instant, secondOfMinute);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <165, 165>
longVar = secondOfMinute().set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <667, 667>
instant = chrono.dayOfMonth().roundFloor(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <667, 667>
longVar = Chronology.dayOfMonth().roundFloor(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ISOYearOfEraDateTimeField <50, 50>
int year = getWrappedField().get(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ISOYearOfEraDateTimeField <50, 50>
int intVar = getWrappedField().get(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicChronology <400, 400>
long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicChronology <400, 400>
long longVar = (longVar >> 1) + getApproxMillisAtEpochDividedByTwo();

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.BasicChronology <400, 400>
long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJYearOfEraDateTimeField <45, 45>
int year = getWrappedField().get(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJYearOfEraDateTimeField <45, 45>
int intVar = getWrappedField().get(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DividedDateTimeField <112, 112>
int value = getWrappedField().get(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DividedDateTimeField <112, 112>
int intVar = getWrappedField().get(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.RemainderDateTimeField <100, 100>
int value = getWrappedField().get(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.RemainderDateTimeField <100, 100>
int intVar = getWrappedField().get(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.AbstractPartialFieldProperty <275, 275>
int otherValue = instant.get(getFieldType());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.AbstractReadableInstantFieldProperty <395, 395>
int otherValue = instant.get(getFieldType());

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.ZeroIsMaxDateTimeField <52, 52>
int value = getWrappedField().get(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.ZeroIsMaxDateTimeField <52, 52>
int intVar = getWrappedField().get(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatter <482, 482>
appendable.append(print(instant));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatter <517, 517>
appendable.append(print(instant));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatter <517, 517>
Appendable.append(print(longVar));

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJEraDateTimeField <92, 92>
return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJEraDateTimeField <92, 92>
return set(longVar, GJLocaleSymbols.forLocale(Locale).eraTextToValue(StringVar));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DividedDateTimeField <153, 153>
return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DividedDateTimeField <153, 153>
return set(longVar, FieldUtils.getWrappedValue(get(longVar), intVar, intVar, intVar));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.OffsetDateTimeField <140, 140>
return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.OffsetDateTimeField <140, 140>
return set(longVar, FieldUtils.getWrappedValue(get(longVar), intVar, intVar, intVar));

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <319, 319>
instant = iField.add(instant + offset, value);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <319, 319>
longVar = DurationField.add(longVar + intVar, intVar);

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <325, 325>
instant = iField.add(instant + offset, value);

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <325, 325>
longVar = DurationField.add(longVar + intVar, longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <844, 844>
instant = field.set(instant, values[i]);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <844, 844>
longVar = DateTimeField.set(longVar, int[]Var[intVar]);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <348, 348>
return set(instant, fieldIndex, values, values[fieldIndex]);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <433, 433>
return set(instant, fieldIndex, values, values[fieldIndex]);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <200, 201>
instant = getBase().getDateTimeMillis
            (instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <200, 201>
longVar = getBase().getDateTimeMillis
            (longVar, intVar, intVar, intVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <340, 341>
instant = iJulianChronology.getDateTimeMillis
                (year, monthOfYear, dayOfMonth, millisOfDay);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <340, 341>
longVar = BasicGJChronology.getDateTimeMillis
                (intVar, intVar, intVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.AssembledChronology <148, 149>
return base.getDateTimeMillis
                (instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.AssembledChronology <148, 149>
return Chronology.getDateTimeMillis
                (longVar, intVar, intVar, intVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DelegatedDateTimeField <188, 188>
return iField.set(instant, fieldIndex, values, text, locale);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.CachedDateTimeZone <171, 171>
Info = (Info.iNextInfo = new Info(DateTimeZone, longVar));

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicYearDateTimeField <129, 132>
if (instant != yearStartMillis) {
            // Bump up to start of next year.
            instant = iChronology.getYearMillis(year + 1);
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicYearDateTimeField <129, 132>
if (longVar != longVar) {
            // Bump up to start of next year.
            longVar = AssembledChronology.getYearMillis(intVar + 1);
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <930, 931>
long instant = getChronology().getDateTimeMillis(
            getMillis(), hour, minuteOfHour, secondOfMinute, millisOfSecond);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.MutableDateTime <930, 931>
long longVar = getChronology().getDateTimeMillis(
            getMillis(), intVar, intVar, intVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.MutableDateTime <930, 931>
long instant = getChronology().getDateTimeMillis(
            getMillis(), hour, minuteOfHour, secondOfMinute, millisOfSecond);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <826, 828>
if (instant >= iCutover) {
                max = iJulianField.get(iJulianField.add(iCutover, -1));
            }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <826, 828>
if (longVar >= longVar) {
                intVar = DateTimeField.get(DateTimeField.add(longVar, -1));
            }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormat <788, 788>
p.printTo(buf, instant, chrono, displayOffset, displayZone, locale);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormat <788, 788>
DateTimePrinter.printTo(StringBuffer, longVar, Chronology, intVar, DateTimeZone, Locale);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormat <795, 795>
p.printTo(out, instant, chrono, displayOffset, displayZone, locale);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormat <795, 795>
DateTimePrinter.printTo(Writer, longVar, Chronology, intVar, DateTimeZone, Locale);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTimeZone <812, 814>
if (instant == null) {
            return getOffset(DateTimeUtils.currentTimeMillis());
        }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <320, 320>
return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <320, 320>
return longVar - (booleanVar ? intVar : getOffsetFromLocalToSubtract(longVar));

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <326, 326>
return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <326, 326>
return longVar - (booleanVar ? intVar : getOffsetFromLocalToSubtract(longVar));

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <794, 796>
if (instant < iCutover) {
                return iJulianField.getMinimumValue(instant);
            }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <794, 796>
if (longVar < longVar) {
                return DateTimeField.getMinimumValue(longVar);
            }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <817, 819>
if (instant >= iCutover) {
                return iGregorianField.getMaximumValue(instant);
            }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <817, 819>
if (longVar >= longVar) {
                return DateTimeField.getMaximumValue(longVar);
            }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJYearOfEraDateTimeField <86, 88>
if (iChronology.getYear(instant) <= 0) {
            year = 1 - year;
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJYearOfEraDateTimeField <86, 88>
if (AssembledChronology.getYear(longVar) <= 0) {
            intVar = 1 - intVar;
        }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <303, 304>
return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +
            iChronology.getMillisOfDay(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <303, 304>
return AssembledChronology.getYearMonthDayMillis(intVar, intVar, intVar) +
            AssembledChronology.getMillisOfDay(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <803, 805>
if (instant < iCutover) {
                min = iGregorianField.get(iCutover);
            }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <803, 805>
if (longVar < longVar) {
                intVar = DateTimeField.get(longVar);
            }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <344, 344>
values = nextField.add(instant, fieldIndex - 1, values, -1);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <429, 429>
values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <187, 189>
long instant = getBase().getDateTimeMillis
            (year, monthOfYear, dayOfMonth,
             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <187, 189>
long longVar = getBase().getDateTimeMillis
            (intVar, intVar, intVar,
             intVar, intVar, intVar, intVar);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.LimitChronology <187, 189>
long instant = getBase().getDateTimeMillis
            (year, monthOfYear, dayOfMonth,
             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.MutableDateTime <955, 956>
long instant = getChronology().getDateTimeMillis(
            year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.MutableDateTime <955, 956>
long longVar = getChronology().getDateTimeMillis(
            intVar, intVar, intVar, intVar, intVar, intVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.MutableDateTime <955, 956>
long instant = getChronology().getDateTimeMillis(
            year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicWeekyearDateTimeField <75, 75>
return set(instant, get(instant) + years);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicWeekyearDateTimeField <75, 75>
return set(longVar, get(longVar) + intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicChronology <517, 519>
if (instant < firstWeekMillis1) {
            return getWeeksInYear(year - 1);
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicChronology <517, 519>
if (longVar < longVar) {
            return getWeeksInYear(intVar - 1);
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DividedDateTimeField <129, 129>
return getWrappedField().add(instant, amount * iDivisor);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DividedDateTimeField <129, 129>
return getWrappedField().add(longVar, intVar * intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DividedDateTimeField <141, 141>
return getWrappedField().add(instant, amount * iDivisor);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DividedDateTimeField <141, 141>
return getWrappedField().add(longVar, longVar * intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.ScaledDurationField <63, 63>
return getWrappedField().getValue(duration, instant) / iScalar;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.ScaledDurationField <63, 63>
return getWrappedField().getValue(longVar, longVar) / intVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.ScaledDurationField <67, 67>
return getWrappedField().getValueAsLong(duration, instant) / iScalar;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.ScaledDurationField <67, 67>
return getWrappedField().getValueAsLong(longVar, longVar) / intVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1092, 1095>
if (next <= instant) {
                    it.remove();
                    continue;
                }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1092, 1095>
if (longVar <= longVar) {
                    Iterator.remove();
                    continue;
                }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicWeekyearDateTimeField <243, 243>
return instant - roundFloor(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicWeekyearDateTimeField <243, 243>
return longVar - roundFloor(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicChronology <535, 535>
daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicChronology <535, 535>
longVar = longVar / DateTimeConstants.MILLIS_PER_DAY;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicYearDateTimeField <137, 137>
return instant - roundFloor(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicYearDateTimeField <137, 137>
return longVar - roundFloor(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <350, 350>
return instant - roundFloor(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <350, 350>
return longVar - roundFloor(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.OffsetDateTimeField <100, 100>
return super.get(instant) + iOffset;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.OffsetDateTimeField <100, 100>
return super.get(longVar) + intVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <994, 994>
return instant - roundFloor(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <994, 994>
return longVar - roundFloor(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DurationField <212, 212>
return add(instant, -value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DurationField <212, 212>
return add(longVar, -intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DurationField <227, 227>
return add(instant, -value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DurationField <227, 227>
return add(longVar, -longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <679, 679>
instant = partial.getFieldType(i).getField(GJChronology.this).set(instant, values[i]);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <679, 679>
longVar = ReadablePartial.getFieldType(intVar).getField(GJChronology.this).set(longVar, int[]Var[intVar]);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <305, 305>
instant = period.getFieldType(i).getField(this).add(instant, value * scalar);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <305, 305>
longVar = ReadablePeriod.getFieldType(intVar).getField(this).add(longVar, longVar * intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <732, 734>
if (instant + iGapDuration < iCutover) {
                        instant = gregorianToJulian(instant);
                    }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <732, 734>
if (longVar + iGapDuration < longVar) {
                        longVar = gregorianToJulian(longVar);
                    }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <741, 743>
if (instant - iGapDuration >= iCutover) {
                        instant = julianToGregorian(instant);
                    }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <741, 743>
if (longVar - iGapDuration >= longVar) {
                        longVar = julianToGregorian(longVar);
                    }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <855, 857>
if (instant + iGapDuration < iCutover) {
                        instant = gregorianToJulian(instant);
                    }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <855, 857>
if (longVar + iGapDuration < longVar) {
                        longVar = gregorianToJulian(longVar);
                    }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <872, 874>
if (instant - iGapDuration >= iCutover) {
                        instant = julianToGregorian(instant);
                    }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <872, 874>
if (longVar - iGapDuration >= longVar) {
                        longVar = julianToGregorian(longVar);
                    }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <956, 958>
if (instant + iGapDuration < iCutover) {
                        instant = gregorianToJulian(instant);
                    }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <956, 958>
if (longVar + iGapDuration < iCutover) {
                        longVar = gregorianToJulian(longVar);
                    }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <964, 966>
if (instant - iGapDuration >= iCutover) {
                        instant = julianToGregorian(instant);
                    }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <964, 966>
if (longVar - iGapDuration >= iCutover) {
                        longVar = julianToGregorian(longVar);
                    }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <977, 979>
if (instant + iGapDuration < iCutover) {
                        instant = gregorianToJulian(instant);
                    }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <977, 979>
if (longVar + iGapDuration < iCutover) {
                        longVar = gregorianToJulian(longVar);
                    }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <985, 987>
if (instant - iGapDuration >= iCutover) {
                        instant = julianToGregorian(instant);
                    }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <985, 987>
if (longVar - iGapDuration >= iCutover) {
                        longVar = julianToGregorian(longVar);
                    }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <226, 226>
values[i] = partial.getFieldType(i).getField(this).get(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <226, 226>
int[]Var[intVar] = ReadablePartial.getFieldType(intVar).getField(this).get(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DividedDateTimeField <205, 205>
return field.roundFloor(field.set(instant, get(instant) * iDivisor));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DividedDateTimeField <205, 205>
return DateTimeField.roundFloor(DateTimeField.set(longVar, get(longVar) * intVar));

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <212, 212>
instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <212, 212>
longVar = ReadablePartial.getFieldType(intVar).getField(AssembledChronology).set(longVar, int[]Var[intVar]);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <849, 853>
if (instant == Long.MIN_VALUE) {
                year = Integer.MIN_VALUE;
            } else {
                year = chrono.year().get(instant + wallOffset);
            }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <849, 853>
if (longVar == Long.MIN_VALUE) {
                intVar = Integer.MIN_VALUE;
            } else {
                intVar = Chronology.year().get(longVar + intVar);
            }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatterBuilder <2522, 2522>
elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatterBuilder <2522, 2522>
DateTimePrinter[]Var[intVar].printTo(StringBuffer, longVar, Chronology, intVar, DateTimeZone, Locale);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatterBuilder <2541, 2541>
elements[i].printTo(out, instant, chrono, displayOffset, displayZone, locale);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatterBuilder <2541, 2541>
DateTimePrinter[]Var[intVar].printTo(Writer, longVar, Chronology, intVar, DateTimeZone, Locale);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ISOYearOfEraDateTimeField <80, 82>
if (getWrappedField().get(instant) < 0) {
            year = -year;
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ISOYearOfEraDateTimeField <80, 82>
if (getWrappedField().get(longVar) < 0) {
            intVar = -intVar;
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <460, 460>
long instant = getChronology().add(getMillis(), durationToAdd, scalar);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateMidnight <460, 460>
long longVar = getChronology().add(getMillis(), longVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.DateMidnight <460, 460>
long instant = getChronology().add(getMillis(), durationToAdd, scalar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <500, 500>
long instant = getChronology().add(period, getMillis(), scalar);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateMidnight <500, 500>
long longVar = getChronology().add(ReadablePeriod, getMillis(), intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.DateMidnight <500, 500>
long instant = getChronology().add(ReadablePeriod, getMillis(), scalar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.Instant <161, 161>
long instant = getChronology().add(getMillis(), durationToAdd, scalar);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.Instant <161, 161>
long longVar = getChronology().add(getMillis(), longVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.Instant <161, 161>
long instant = getChronology().add(getMillis(), durationToAdd, scalar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <747, 747>
long instant = getChronology().add(getMillis(), durationToAdd, scalar);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <747, 747>
long longVar = getChronology().add(getMillis(), longVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.DateTime <747, 747>
long instant = getChronology().add(getMillis(), durationToAdd, scalar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <787, 787>
long instant = getChronology().add(period, getMillis(), scalar);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <787, 787>
long longVar = getChronology().add(ReadablePeriod, getMillis(), intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.DateTime <787, 787>
long instant = getChronology().add(ReadablePeriod, getMillis(), scalar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <933, 933>
long instant = getChronology().add(period, getLocalMillis(), scalar);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <933, 933>
long longVar = getChronology().add(ReadablePeriod, getLocalMillis(), intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.LocalDateTime <933, 933>
long instant = getChronology().add(ReadablePeriod, getLocalMillis(), scalar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <793, 793>
long instant = getChronology().add(period, getLocalMillis(), scalar);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalTime <793, 793>
long longVar = getChronology().add(ReadablePeriod, getLocalMillis(), intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.LocalTime <793, 793>
long instant = getChronology().add(ReadablePeriod, getLocalMillis(), scalar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ISOYearOfEraDateTimeField <55, 55>
return getWrappedField().add(instant, years);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ISOYearOfEraDateTimeField <55, 55>
return getWrappedField().add(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ISOYearOfEraDateTimeField <59, 59>
return getWrappedField().add(instant, years);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ISOYearOfEraDateTimeField <59, 59>
return getWrappedField().add(longVar, longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ISOYearOfEraDateTimeField <63, 63>
return getWrappedField().addWrapField(instant, years);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ISOYearOfEraDateTimeField <63, 63>
return getWrappedField().addWrapField(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <397, 397>
return getWrappedField().getValue(duration, instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <397, 397>
return getWrappedField().getValue(longVar, longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <402, 402>
return getWrappedField().getValueAsLong(duration, instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <402, 402>
return getWrappedField().getValueAsLong(longVar, longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <407, 407>
return getWrappedField().getMillis(value, instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <407, 407>
return getWrappedField().getMillis(intVar, longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <412, 412>
return getWrappedField().getMillis(value, instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <412, 412>
return getWrappedField().getMillis(longVar, longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <467, 467>
return getWrappedField().getAsText(instant, locale);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <467, 467>
return getWrappedField().getAsText(longVar, Locale);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <472, 472>
return getWrappedField().getAsShortText(instant, locale);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <472, 472>
return getWrappedField().getAsShortText(longVar, Locale);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicChronology <477, 477>
return getDayOfYear(instant, getYear(instant));

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicChronology <477, 477>
return getDayOfYear(longVar, getYear(longVar));

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicChronology <508, 508>
return getWeekOfWeekyear(instant, getYear(instant));

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicChronology <508, 508>
return getWeekOfWeekyear(longVar, getYear(longVar));

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJYearOfEraDateTimeField <53, 53>
return getWrappedField().add(instant, years);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJYearOfEraDateTimeField <53, 53>
return getWrappedField().add(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJYearOfEraDateTimeField <57, 57>
return getWrappedField().add(instant, years);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJYearOfEraDateTimeField <57, 57>
return getWrappedField().add(longVar, longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJYearOfEraDateTimeField <61, 61>
return getWrappedField().addWrapField(instant, years);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJYearOfEraDateTimeField <61, 61>
return getWrappedField().addWrapField(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicYearDateTimeField <99, 99>
return iChronology.isLeapYear(get(instant));

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicYearDateTimeField <99, 99>
return AssembledChronology.isLeapYear(get(longVar));

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicYearDateTimeField <123, 123>
return iChronology.getYearMillis(get(instant));

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicYearDateTimeField <123, 123>
return AssembledChronology.getYearMillis(get(longVar));

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <342, 345>
if (instant >= iCutoverMillis) {
                // Okay, it's in the illegal cutover gap.
                throw new IllegalArgumentException("Specified date does not exist");
            }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <342, 345>
if (longVar >= longVar) {
                // Okay, it's in the illegal cutover gap.
                throw new IllegalArgumentException("Specified date does not exist");
            }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <371, 374>
if (instant >= iCutoverMillis) {
                // Okay, it's in the illegal cutover gap.
                throw new IllegalArgumentException("Specified date does not exist");
            }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <371, 374>
if (longVar >= longVar) {
                // Okay, it's in the illegal cutover gap.
                throw new IllegalArgumentException("Specified date does not exist");
            }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <105, 105>
return millisOfDay().set(instant, millisOfDay);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <105, 105>
return millisOfDay().set(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <138, 138>
return millisOfSecond().set(instant, millisOfSecond);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <138, 138>
return millisOfSecond().set(longVar, intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <166, 166>
return millisOfSecond().set(instant, millisOfSecond);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <166, 166>
return millisOfSecond().set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <305, 305>
return chronology.dayOfMonth().roundFloor(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateMidnight <305, 305>
return Chronology.dayOfMonth().roundFloor(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.UnsupportedDateTimeField <225, 225>
return getDurationField().add(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.UnsupportedDateTimeField <225, 225>
return getDurationField().add(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.UnsupportedDateTimeField <234, 234>
return getDurationField().add(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.UnsupportedDateTimeField <234, 234>
return getDurationField().add(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.ScaledDurationField <82, 82>
return getWrappedField().getMillis(scaled, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.ScaledDurationField <82, 82>
return getWrappedField().getMillis(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.ScaledDurationField <87, 87>
return getWrappedField().getMillis(scaled, instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.ScaledDurationField <87, 87>
return getWrappedField().getMillis(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.ScaledDurationField <92, 92>
return getWrappedField().add(instant, scaled);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.ScaledDurationField <92, 92>
return getWrappedField().add(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.ScaledDurationField <97, 97>
return getWrappedField().add(instant, scaled);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.ScaledDurationField <97, 97>
return getWrappedField().add(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <94, 94>
return getAsText(get(instant), locale);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <94, 94>
return getAsText(get(longVar), Locale);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <168, 168>
return getAsShortText(get(instant), locale);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <168, 168>
return getAsShortText(get(longVar), Locale);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <253, 253>
return getDurationField().add(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <253, 253>
return getDurationField().add(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <267, 267>
return getDurationField().add(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <267, 267>
return getDurationField().add(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.ZeroIsMaxDateTimeField <60, 60>
return getWrappedField().add(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.ZeroIsMaxDateTimeField <60, 60>
return getWrappedField().add(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.ZeroIsMaxDateTimeField <64, 64>
return getWrappedField().add(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.ZeroIsMaxDateTimeField <64, 64>
return getWrappedField().add(longVar, longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.ZeroIsMaxDateTimeField <68, 68>
return getWrappedField().addWrapField(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.ZeroIsMaxDateTimeField <68, 68>
return getWrappedField().addWrapField(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.ZeroIsMaxDateTimeField <89, 89>
return getWrappedField().set(instant, value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.ZeroIsMaxDateTimeField <89, 89>
return getWrappedField().set(longVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.CachedDateTimeZone <107, 107>
return getInfo(instant).getNameKey(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.CachedDateTimeZone <107, 107>
return getInfo(longVar).getNameKey(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.CachedDateTimeZone <111, 111>
return getInfo(instant).getOffset(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.CachedDateTimeZone <111, 111>
return getInfo(longVar).getOffset(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.CachedDateTimeZone <115, 115>
return getInfo(instant).getStandardOffset(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.CachedDateTimeZone <115, 115>
return getInfo(longVar).getStandardOffset(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <363, 365>
long instant = iGregorianChronology.getDateTimeMillis
            (year, monthOfYear, dayOfMonth,
             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <363, 365>
long longVar = BasicGJChronology.getDateTimeMillis
            (intVar, intVar, intVar,
             intVar, intVar, intVar, intVar);

---fix ingredient(SamePackage)  <1-fine-grained>  varMapType:1--- org.joda.time.chrono.GJChronology <363, 365>
long instant = BasicGJChronology.getDateTimeMillis
            (year, monthOfYear, dayOfMonth,
             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BaseDateTime <254, 255>
long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.base.BaseDateTime <254, 255>
long longVar = Chronology.getDateTimeMillis(intVar, intVar, intVar,
            intVar, intVar, intVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.base.BaseDateTime <254, 255>
long instant = Chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <449, 450>
long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <449, 450>
long longVar = Chronology.getDateTimeMillis(intVar, intVar, intVar,
            intVar, intVar, intVar, intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.LocalDateTime <449, 450>
long instant = Chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <568, 571>
if (next <= instant) {
                    next = chrono.year().add(next, 1);
                    next = setDayOfMonthNext(chrono, next);
                }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <568, 571>
if (longVar <= longVar) {
                    longVar = Chronology.year().add(longVar, 1);
                    longVar = setDayOfMonthNext(Chronology, longVar);
                }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1580, 1582>
if (instant < end) {
                instant = end;
            }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1580, 1582>
if (longVar < longVar) {
                longVar = longVar;
            }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.ZeroIsMaxDateTimeField <177, 177>
return getWrappedField().getMaximumValue(instant, values) + 1;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicDayOfYearDateTimeField <93, 93>
return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicDayOfYearDateTimeField <93, 93>
return (intVar > intVar || intVar < 1) ? getMaximumValue(longVar) : intVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <368, 370>
instant = iJulianChronology.getDateTimeMillis
                (year, monthOfYear, dayOfMonth,
                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <368, 370>
longVar = BasicGJChronology.getDateTimeMillis
                (intVar, intVar, intVar,
                 intVar, intVar, intVar, intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <610, 613>
if (prev >= instant) {
                    prev = chrono.year().add(prev, -1);
                    prev = setDayOfMonthPrevious(chrono, prev);
                }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <610, 613>
if (longVar >= longVar) {
                    longVar = Chronology.year().add(longVar, -1);
                    longVar = setDayOfMonthPrevious(Chronology, longVar);
                }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTimeZone <728, 728>
return getShortName(instant, null);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTimeZone <728, 728>
return getShortName(longVar, null);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTimeZone <768, 768>
return getName(instant, null);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTimeZone <768, 768>
return getName(longVar, null);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <106, 106>
return getAsText(instant, null);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <106, 106>
return getAsText(longVar, null);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <180, 180>
return getAsShortText(instant, null);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <180, 180>
return getAsShortText(longVar, null);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <240, 240>
instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <240, 240>
longVar = ReadablePartial.getFieldType(intVar).getField(this).set(longVar, ReadablePartial.getValue(intVar));

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <285, 287>
if ((limit = iLowerLimit) != null && instant < limit.getMillis()) {
            throw new LimitException(desc, true);
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <285, 287>
if ((BaseDateTime = BaseDateTime) != null && longVar < BaseDateTime.getMillis()) {
            throw new LimitException(StringVar, true);
        }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <288, 290>
if ((limit = iUpperLimit) != null && instant >= limit.getMillis()) {
            throw new LimitException(desc, false);
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <288, 290>
if ((BaseDateTime = BaseDateTime) != null && longVar >= BaseDateTime.getMillis()) {
            throw new LimitException(StringVar, false);
        }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <631, 635>
if (instant >= iCutover) {
                return iGregorianField.get(instant);
            } else {
                return iJulianField.get(instant);
            }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <631, 635>
if (longVar >= longVar) {
                return DateTimeField.get(longVar);
            } else {
                return DateTimeField.get(longVar);
            }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <759, 763>
if (instant >= iCutover) {
                return iGregorianField.isLeap(instant);
            } else {
                return iJulianField.isLeap(instant);
            }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <759, 763>
if (longVar >= longVar) {
                return DateTimeField.isLeap(longVar);
            } else {
                return DateTimeField.isLeap(longVar);
            }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <767, 771>
if (instant >= iCutover) {
                return iGregorianField.getLeapAmount(instant);
            } else {
                return iJulianField.getLeapAmount(instant);
            }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <767, 771>
if (longVar >= longVar) {
                return DateTimeField.getLeapAmount(longVar);
            } else {
                return DateTimeField.getLeapAmount(longVar);
            }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <1044, 1048>
if (instant >= iCutover) {
                return iGregorianField.getMinimumValue(instant);
            } else {
                return iJulianField.getMinimumValue(instant);
            }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <1044, 1048>
if (longVar >= iCutover) {
                return iGregorianField.getMinimumValue(longVar);
            } else {
                return iJulianField.getMinimumValue(longVar);
            }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <1052, 1056>
if (instant >= iCutover) {
                return iGregorianField.getMaximumValue(instant);
            } else {
                return iJulianField.getMaximumValue(instant);
            }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <1052, 1056>
if (longVar >= iCutover) {
                return iGregorianField.getMaximumValue(longVar);
            } else {
                return iJulianField.getMaximumValue(longVar);
            }

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <432, 432>
return longVar - intVar;

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <444, 444>
return longVar - intVar;

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <456, 456>
return longVar - intVar;

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <524, 524>
return instant - offset;

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <524, 524>
return longVar - intVar;

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <536, 536>
return instant - offset;

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <536, 536>
return longVar - intVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.PreciseDurationDateTimeField <127, 127>
return instant % iUnitMillis;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.PreciseDurationDateTimeField <127, 127>
return longVar % longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicChronology <422, 425>
if (yearStart <= instant) {
                // Didn't go too far, so actually add one year.
                year++;
            }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicChronology <422, 425>
if (longVar <= longVar) {
                // Didn't go too far, so actually add one year.
                intVar++;
            }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1607, 1609>
if (prev < instant) {
                    return prev;
                }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1607, 1609>
if (longVar < longVar) {
                    return longVar;
                }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <95, 95>
newInstant = to.weekyear().set(0, from.weekyear().get(instant));

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <95, 95>
longVar = Chronology.weekyear().set(0, Chronology.weekyear().get(longVar));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DividedDateTimeField <175, 175>
return getWrappedField().set(instant, value * iDivisor + remainder);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DividedDateTimeField <175, 175>
return getWrappedField().set(longVar, intVar * intVar + intVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.RemainderDateTimeField <132, 132>
return getWrappedField().set(instant, divided * iDivisor + value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.RemainderDateTimeField <132, 132>
return getWrappedField().set(longVar, intVar * intVar + intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <639, 643>
if (instant >= iCutover) {
                return iGregorianField.getAsText(instant, locale);
            } else {
                return iJulianField.getAsText(instant, locale);
            }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <639, 643>
if (longVar >= longVar) {
                return DateTimeField.getAsText(longVar, Locale);
            } else {
                return DateTimeField.getAsText(longVar, Locale);
            }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <651, 655>
if (instant >= iCutover) {
                return iGregorianField.getAsShortText(instant, locale);
            } else {
                return iJulianField.getAsShortText(instant, locale);
            }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <651, 655>
if (longVar >= longVar) {
                return DateTimeField.getAsShortText(longVar, Locale);
            } else {
                return DateTimeField.getAsShortText(longVar, Locale);
            }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <96, 96>
newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <96, 96>
longVar = Chronology.weekOfWeekyear().set(longVar, Chronology.weekOfWeekyear().get(longVar));

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <97, 97>
newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <97, 97>
longVar = Chronology.dayOfWeek().set(longVar, Chronology.dayOfWeek().get(longVar));

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <98, 98>
newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <98, 98>
longVar = Chronology.millisOfDay().set(longVar, Chronology.millisOfDay().get(longVar));

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <142, 146>
if (offset != zone.getOffset(instant)) {
            throw new IllegalArgumentException
                ("Illegal instant due to time zone offset transition: " +
                    DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSS").print(new Instant(instant)));
        }

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <142, 146>
if (intVar != DateTimeZone.getOffset(longVar)) {
            throw new IllegalArgumentException
                ("Illegal instant due to time zone offset transition: " +
                    DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSS").print(new Instant(longVar)));
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeParserBucket <367, 374>
if (offset != iZone.getOffset(millis)) {
                String message =
                    "Illegal instant due to time zone offset transition (" + iZone + ')';
                if (text != null) {
                    message = "Cannot parse \"" + text + "\": " + message;
                }
                throw new IllegalArgumentException(message);
            }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeParserBucket <367, 374>
if (intVar != DateTimeZone.getOffset(longVar)) {
                String message =
                    "Illegal instant due to time zone offset transition (" + DateTimeZone + ')';
                if (StringVar != null) {
                    message = "Cannot parse \"" + StringVar + "\": " + message;
                }
                throw new IllegalArgumentException(message);
            }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicChronology <521, 523>
if (instant >= firstWeekMillis2) {
            return 1;
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicChronology <521, 523>
if (longVar >= longVar) {
            return 1;
        }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField <111, 111>
return value > 52 ? getMaximumValue(instant) : 52;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField <111, 111>
return intVar > 52 ? getMaximumValue(longVar) : 52;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicGJChronology <134, 134>
return (value > 28 ? getDaysInMonthMax(instant) : 28);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicGJChronology <134, 134>
return (intVar > 28 ? getDaysInMonthMax(longVar) : 28);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicChronology <590, 590>
return getDaysInMonthMax(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicChronology <590, 590>
return getDaysInMonthMax(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <835, 835>
return getMaximumValue(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <835, 835>
return getMaximumValue(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <847, 847>
return getMaximumValue(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <847, 847>
return getMaximumValue(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <892, 892>
return julianToGregorianByWeekyear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <892, 892>
return julianToGregorianByWeekyear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <894, 894>
return julianToGregorianByYear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <894, 894>
return julianToGregorianByYear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <900, 900>
return gregorianToJulianByWeekyear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <900, 900>
return gregorianToJulianByWeekyear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <902, 902>
return gregorianToJulianByYear(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <902, 902>
return gregorianToJulianByYear(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJEraDateTimeField <113, 113>
return roundFloor(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJEraDateTimeField <113, 113>
return roundFloor(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJEraDateTimeField <118, 118>
return roundFloor(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJEraDateTimeField <118, 118>
return roundFloor(longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJEraDateTimeField <123, 123>
return roundFloor(instant);

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJEraDateTimeField <123, 123>
return roundFloor(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <413, 413>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateMidnight <413, 413>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <442, 442>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateMidnight <442, 442>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <461, 461>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateMidnight <461, 461>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <501, 501>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateMidnight <501, 501>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <570, 570>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateMidnight <570, 570>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <594, 594>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateMidnight <594, 594>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <618, 618>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateMidnight <618, 618>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <642, 642>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateMidnight <642, 642>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <711, 711>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateMidnight <711, 711>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <735, 735>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateMidnight <735, 735>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <759, 759>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateMidnight <759, 759>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <783, 783>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateMidnight <783, 783>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <1023, 1023>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <1023, 1023>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <1055, 1055>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <1055, 1055>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <1090, 1090>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <1090, 1090>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <1135, 1135>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <1135, 1135>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <1158, 1158>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <1158, 1158>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <1181, 1181>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <1181, 1181>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <1204, 1204>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <1204, 1204>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <1249, 1249>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <1249, 1249>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <1272, 1272>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <1272, 1272>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <1295, 1295>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <1295, 1295>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <1318, 1318>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <1318, 1318>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.Instant <162, 162>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.Instant <162, 162>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.PreciseDurationDateTimeField <163, 163>
return getMaximumValue(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.PreciseDurationDateTimeField <163, 163>
return getMaximumValue(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <772, 772>
return getMinimumValue(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <818, 818>
return getMaximumValue(instant);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTimeUtils <149, 149>
return instant.getMillis();

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <626, 626>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <626, 626>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <653, 653>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <653, 653>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <700, 700>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <700, 700>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <729, 729>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <729, 729>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <748, 748>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <748, 748>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <788, 788>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <788, 788>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <874, 874>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <874, 874>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <904, 904>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <904, 904>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <930, 930>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <930, 930>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <965, 965>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <965, 965>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <996, 996>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <996, 996>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <1023, 1023>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <1023, 1023>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <1050, 1050>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <1050, 1050>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <1076, 1076>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <1076, 1076>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <1163, 1163>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <1163, 1163>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <1193, 1193>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <1193, 1193>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <1219, 1219>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <1219, 1219>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <1254, 1254>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <1254, 1254>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <1286, 1286>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <1286, 1286>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <1313, 1313>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <1313, 1313>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <1340, 1340>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <1340, 1340>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <1367, 1367>
return withMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <1367, 1367>
return withMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <787, 787>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <787, 787>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <815, 815>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <815, 815>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <862, 862>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <862, 862>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <892, 892>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <892, 892>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <911, 911>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <911, 911>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <934, 934>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <934, 934>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <989, 989>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <989, 989>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <1012, 1012>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <1012, 1012>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <1035, 1035>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <1035, 1035>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <1058, 1058>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <1058, 1058>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <1082, 1082>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <1082, 1082>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <1105, 1105>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <1105, 1105>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <1128, 1128>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <1128, 1128>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <1151, 1151>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <1151, 1151>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <1206, 1206>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <1206, 1206>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <1229, 1229>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <1229, 1229>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <1252, 1252>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <1252, 1252>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <1275, 1275>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <1275, 1275>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <1299, 1299>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <1299, 1299>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <1322, 1322>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <1322, 1322>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <1345, 1345>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <1345, 1345>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <1368, 1368>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <1368, 1368>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <734, 734>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalTime <734, 734>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <770, 770>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalTime <770, 770>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <794, 794>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalTime <794, 794>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <836, 836>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalTime <836, 836>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <859, 859>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalTime <859, 859>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <882, 882>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalTime <882, 882>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <905, 905>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalTime <905, 905>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <947, 947>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalTime <947, 947>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <970, 970>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalTime <970, 970>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <993, 993>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalTime <993, 993>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <1016, 1016>
return withLocalMillis(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalTime <1016, 1016>
return withLocalMillis(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTimeZone <843, 843>
return getOffset(instant) == getStandardOffset(instant);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTimeZone <843, 843>
return getOffset(longVar) == getStandardOffset(longVar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1187, 1187>
return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1187, 1187>
return intVar + findMatchingRecurrence(longVar).getSaveMillis();

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.LenientDateTimeField <74, 74>
longVar = getType().getField(Chronology.withUTC()).add(longVar, longVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <179, 179>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <179, 179>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <191, 191>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <191, 191>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.LimitChronology <203, 203>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <203, 203>
return longVar;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <419, 419>
return longVar;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <426, 426>
return longVar;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <479, 479>
return longVar;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <486, 486>
return longVar;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <493, 493>
return longVar;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <512, 512>
return longVar;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <519, 519>
return longVar;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <548, 548>
return longVar;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <555, 555>
return longVar;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <562, 562>
return longVar;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <569, 569>
return longVar;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <576, 576>
return longVar;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.LimitChronology <583, 583>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicWeekyearDateTimeField <73, 73>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicWeekyearDateTimeField <73, 73>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicWeekyearDateTimeField <135, 135>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicWeekyearDateTimeField <135, 135>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicWeekyearDateTimeField <239, 239>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicWeekyearDateTimeField <239, 239>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicFixedMonthChronology <79, 79>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicFixedMonthChronology <79, 79>
return longVar;

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <147, 147>
return instant;

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <147, 147>
return longVar;

---fix ingredient(SameMethod)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <474, 474>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicYearDateTimeField <59, 59>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicYearDateTimeField <59, 59>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicYearDateTimeField <72, 72>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicYearDateTimeField <72, 72>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicYearDateTimeField <133, 133>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicYearDateTimeField <133, 133>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.IslamicChronology <319, 319>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.IslamicChronology <319, 319>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicSingleEraDateTimeField <68, 68>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicSingleEraDateTimeField <68, 68>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicSingleEraDateTimeField <76, 76>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicSingleEraDateTimeField <76, 76>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <347, 347>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <347, 347>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <376, 376>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <376, 376>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <724, 724>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <724, 724>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <747, 747>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <747, 747>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <862, 862>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <862, 862>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <877, 877>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <877, 877>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <969, 969>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <969, 969>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <990, 990>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <990, 990>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <93, 93>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicMonthOfYearDateTimeField <93, 93>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicGJChronology <198, 198>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicGJChronology <198, 198>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <242, 242>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <242, 242>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <309, 309>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <309, 309>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BaseChronology <323, 323>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BaseChronology <323, 323>
return longVar;

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJEraDateTimeField <87, 87>
return instant;

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJEraDateTimeField <87, 87>
return longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.OffsetDateTimeField <114, 114>
return instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.OffsetDateTimeField <114, 114>
return longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.OffsetDateTimeField <128, 128>
return instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.OffsetDateTimeField <128, 128>
return longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.BaseDateTimeField <890, 890>
return instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.BaseDateTimeField <890, 890>
return longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.base.BaseDateTime <284, 284>
return instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.base.BaseDateTime <284, 284>
return longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <713, 713>
return instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <713, 713>
return longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <731, 731>
return instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <731, 731>
return longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1241, 1241>
instant++;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1241, 1241>
longVar++;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1577, 1577>
return instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1577, 1577>
return longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1593, 1593>
return instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1593, 1593>
return longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1603, 1603>
return instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1603, 1603>
return longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1615, 1615>
return instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1615, 1615>
return longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.FixedDateTimeZone <65, 65>
return instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.FixedDateTimeZone <65, 65>
return longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.FixedDateTimeZone <69, 69>
return instant;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.FixedDateTimeZone <69, 69>
return longVar;

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <129, 131>
return localToUTC(getBase().getDateTimeMillis
                          (instant + getZone().getOffset(instant),
                           hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <129, 131>
return localToUTC(getBase().getDateTimeMillis
                          (longVar + getZone().getOffset(longVar),
                           intVar, intVar, intVar, intVar));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <865, 871>
if (next > instant) {
                year = chrono.year().get(next + wallOffset);
                if (year > iToYear) {
                    // Out of range, return original value.
                    next = instant;
                }
            }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <865, 871>
if (longVar > longVar) {
                intVar = Chronology.year().get(longVar + intVar);
                if (intVar > intVar) {
                    // Out of range, return original value.
                    longVar = longVar;
                }
            }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <699, 709>
if (instant < iCutover) {
                    // Only adjust if gap fully crossed.
                    if (instant + iGapDuration < iCutover) {
                        instant = gregorianToJulian(instant);
                    }
                    // Verify that new value stuck.
                    if (get(instant) != value) {
                        throw new IllegalFieldValueException
                            (iGregorianField.getType(), new Integer(value), null, null);
                    }
                }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <699, 709>
if (longVar < longVar) {
                    // Only adjust if gap fully crossed.
                    if (longVar + iGapDuration < longVar) {
                        longVar = gregorianToJulian(longVar);
                    }
                    // Verify that new value stuck.
                    if (get(longVar) != intVar) {
                        throw new IllegalFieldValueException
                            (DateTimeField.getType(), new Integer(intVar), null, null);
                    }
                }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <712, 722>
if (instant >= iCutover) {
                    // Only adjust if gap fully crossed.
                    if (instant - iGapDuration >= iCutover) {
                        instant = julianToGregorian(instant);
                    }
                    // Verify that new value stuck.
                    if (get(instant) != value) {
                       throw new IllegalFieldValueException
                            (iJulianField.getType(), new Integer(value), null, null);
                    }
                }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <712, 722>
if (longVar >= longVar) {
                    // Only adjust if gap fully crossed.
                    if (longVar - iGapDuration >= longVar) {
                        longVar = julianToGregorian(longVar);
                    }
                    // Verify that new value stuck.
                    if (get(longVar) != intVar) {
                       throw new IllegalFieldValueException
                            (DateTimeField.getType(), new Integer(intVar), null, null);
                    }
                }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.DividedDateTimeField <174, 174>
int remainder = getRemainder(getWrappedField().get(instant));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.DividedDateTimeField <174, 174>
int intVar = getRemainder(getWrappedField().get(longVar));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.RemainderDateTimeField <131, 131>
int divided = getDivided(getWrappedField().get(instant));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.RemainderDateTimeField <131, 131>
int intVar = getDivided(getWrappedField().get(longVar));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <574, 579>
if (next <= instant) {
                    next = chrono.year().add(next, 1);
                    next = chrono.monthOfYear().set(next, iMonthOfYear);
                    next = setDayOfMonthNext(chrono, next);
                    next = setDayOfWeek(chrono, next);
                }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <574, 579>
if (longVar <= longVar) {
                    longVar = Chronology.year().add(longVar, 1);
                    longVar = Chronology.monthOfYear().set(longVar, intVar);
                    longVar = setDayOfMonthNext(Chronology, longVar);
                    longVar = setDayOfWeek(Chronology, longVar);
                }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <616, 621>
if (prev >= instant) {
                    prev = chrono.year().add(prev, -1);
                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);
                    prev = setDayOfMonthPrevious(chrono, prev);
                    prev = setDayOfWeek(chrono, prev);
                }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <616, 621>
if (longVar >= longVar) {
                    longVar = Chronology.year().add(longVar, -1);
                    longVar = Chronology.monthOfYear().set(longVar, intVar);
                    longVar = setDayOfMonthPrevious(Chronology, longVar);
                    longVar = setDayOfWeek(Chronology, longVar);
                }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <412, 412>
long instant = fieldType.getField(getChronology()).set(getMillis(), value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateMidnight <412, 412>
long longVar = DateTimeFieldType.getField(getChronology()).set(getMillis(), intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.DateMidnight <412, 412>
long instant = DateTimeFieldType.getField(getChronology()).set(getMillis(), value);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateMidnight <441, 441>
long instant = fieldType.getField(getChronology()).add(getMillis(), amount);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateMidnight <441, 441>
long longVar = DurationFieldType.getField(getChronology()).add(getMillis(), intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.DateMidnight <441, 441>
long instant = DurationFieldType.getField(getChronology()).add(getMillis(), amount);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <1022, 1022>
long instant = fieldType.getField(getChronology()).set(getLocalMillis(), value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <1022, 1022>
long longVar = DateTimeFieldType.getField(getChronology()).set(getLocalMillis(), intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.LocalDate <1022, 1022>
long instant = DateTimeFieldType.getField(getChronology()).set(getLocalMillis(), value);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDate <1054, 1054>
long instant = fieldType.getField(getChronology()).add(getLocalMillis(), amount);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDate <1054, 1054>
long longVar = DurationFieldType.getField(getChronology()).add(getLocalMillis(), intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.LocalDate <1054, 1054>
long instant = DurationFieldType.getField(getChronology()).add(getLocalMillis(), amount);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <699, 699>
long instant = fieldType.getField(getChronology()).set(getMillis(), value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <699, 699>
long longVar = DateTimeFieldType.getField(getChronology()).set(getMillis(), intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.DateTime <699, 699>
long instant = DateTimeFieldType.getField(getChronology()).set(getMillis(), value);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.DateTime <728, 728>
long instant = fieldType.getField(getChronology()).add(getMillis(), amount);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.DateTime <728, 728>
long longVar = DurationFieldType.getField(getChronology()).add(getMillis(), intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.DateTime <728, 728>
long instant = DurationFieldType.getField(getChronology()).add(getMillis(), amount);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <861, 861>
long instant = fieldType.getField(getChronology()).set(getLocalMillis(), value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <861, 861>
long longVar = DateTimeFieldType.getField(getChronology()).set(getLocalMillis(), intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.LocalDateTime <861, 861>
long instant = DateTimeFieldType.getField(getChronology()).set(getLocalMillis(), value);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <891, 891>
long instant = fieldType.getField(getChronology()).add(getLocalMillis(), amount);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <891, 891>
long longVar = DurationFieldType.getField(getChronology()).add(getLocalMillis(), intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.LocalDateTime <891, 891>
long instant = DurationFieldType.getField(getChronology()).add(getLocalMillis(), amount);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalDateTime <910, 910>
long instant = getChronology().add(getLocalMillis(), durationToAdd.getMillis(), scalar);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalDateTime <910, 910>
long longVar = getChronology().add(getLocalMillis(), ReadableDuration.getMillis(), intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.LocalDateTime <910, 910>
long instant = getChronology().add(getLocalMillis(), ReadableDuration.getMillis(), scalar);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <733, 733>
long instant = fieldType.getField(getChronology()).set(getLocalMillis(), value);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalTime <733, 733>
long longVar = DateTimeFieldType.getField(getChronology()).set(getLocalMillis(), intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.LocalTime <733, 733>
long instant = DateTimeFieldType.getField(getChronology()).set(getLocalMillis(), value);

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.LocalTime <769, 769>
long instant = fieldType.getField(getChronology()).add(getLocalMillis(), amount);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.LocalTime <769, 769>
long longVar = DurationFieldType.getField(getChronology()).add(getLocalMillis(), intVar);

---fix ingredient  <1-fine-grained>  varMapType:1--- org.joda.time.LocalTime <769, 769>
long instant = DurationFieldType.getField(getChronology()).add(getLocalMillis(), amount);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.base.AbstractInterval <471, 471>
intVar = 31 * intVar + ((int) (longVar ^ (longVar >>> 32)));

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.base.AbstractInterval <472, 472>
intVar = 31 * intVar + ((int) (longVar ^ (longVar >>> 32)));

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <347, 349>
if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
                throw new ArithmeticException("Adding time zone offset caused overflow");
            }

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <347, 349>
if ((longVar ^ longVar) < 0 && (longVar ^ intVar) >= 0) {
                throw new ArithmeticException("Adding time zone offset caused overflow");
            }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <357, 359>
if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
                throw new ArithmeticException("Subtracting time zone offset caused overflow");
            }

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <357, 359>
if ((longVar ^ longVar) < 0 && (longVar ^ intVar) < 0) {
                throw new ArithmeticException("Subtracting time zone offset caused overflow");
            }

---fix ingredient(SameFile)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.ZonedChronology <595, 597>
if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
                throw new ArithmeticException("Adding time zone offset caused overflow");
            }

---fix ingredient(SameFile)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.ZonedChronology <595, 597>
if ((longVar ^ longVar) < 0 && (longVar ^ intVar) >= 0) {
                throw new ArithmeticException("Adding time zone offset caused overflow");
            }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.PreciseDateTimeField <112, 112>
return instant + (value - get(instant)) * iUnitMillis;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.PreciseDateTimeField <112, 112>
return longVar + (intVar - get(longVar)) * longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.PreciseDurationDateTimeField <80, 80>
return instant + (value - get(instant)) * iUnitMillis;

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.PreciseDurationDateTimeField <80, 80>
return longVar + (intVar - get(longVar)) * longVar;

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatter <623, 628>
if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
            // Time zone offset overflow, so revert to UTC.
            zone = DateTimeZone.UTC;
            offset = 0;
            adjustedInstant = instant;
        }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatter <623, 628>
if ((longVar ^ longVar) < 0 && (longVar ^ intVar) >= 0) {
            // Time zone offset overflow, so revert to UTC.
            DateTimeZone = DateTimeZone.UTC;
            intVar = 0;
            longVar = longVar;
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.format.DateTimeFormatter <640, 645>
if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
            // Time zone offset overflow, so revert to UTC.
            zone = DateTimeZone.UTC;
            offset = 0;
            adjustedInstant = instant;
        }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.format.DateTimeFormatter <640, 645>
if ((longVar ^ longVar) < 0 && (longVar ^ intVar) >= 0) {
            // Time zone offset overflow, so revert to UTC.
            DateTimeZone = DateTimeZone.UTC;
            intVar = 0;
            longVar = longVar;
        }

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.BasicYearDateTimeField <103, 107>
if (iChronology.isLeapYear(get(instant))) {
            return 1;
        } else {
            return 0;
        }

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.BasicYearDateTimeField <103, 107>
if (AssembledChronology.isLeapYear(get(longVar))) {
            return 1;
        } else {
            return 0;
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.tz.DateTimeZoneBuilder <1590, 1592>
if (instant > Long.MIN_VALUE) {
                    return instant - 1;
                }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.tz.DateTimeZoneBuilder <1590, 1592>
if (longVar > Long.MIN_VALUE) {
                    return longVar - 1;
                }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.PreciseDateTimeField <80, 80>
return (int) ((instant / getUnitMillis()) % iRange);

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.PreciseDateTimeField <80, 80>
return (int) ((longVar / getUnitMillis()) % intVar);

---fix ingredient(SamePackage)  <ori-fine-grained>  varMapType:ori--- org.joda.time.chrono.GJChronology <83, 87>
return to.getDateTimeMillis
            (from.year().get(instant),
             from.monthOfYear().get(instant),
             from.dayOfMonth().get(instant),
             from.millisOfDay().get(instant));

---fix ingredient(SamePackage)  <0-fine-grained>  varMapType:0--- org.joda.time.chrono.GJChronology <83, 87>
return Chronology.getDateTimeMillis
            (Chronology.year().get(longVar),
             Chronology.monthOfYear().get(longVar),
             Chronology.dayOfMonth().get(longVar),
             Chronology.millisOfDay().get(longVar));

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.PreciseDurationDateTimeField <92, 97>
if (instant >= 0) {
            return instant - instant % iUnitMillis;
        } else {
            instant += 1;
            return instant - instant % iUnitMillis - iUnitMillis;
        }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.PreciseDurationDateTimeField <92, 97>
if (longVar >= 0) {
            return longVar - longVar % longVar;
        } else {
            longVar += 1;
            return longVar - longVar % longVar - longVar;
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.PreciseDurationDateTimeField <109, 114>
if (instant > 0) {
            instant -= 1;
            return instant - instant % iUnitMillis + iUnitMillis;
        } else {
            return instant - instant % iUnitMillis;
        }

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.PreciseDurationDateTimeField <109, 114>
if (longVar > 0) {
            longVar -= 1;
            return longVar - longVar % longVar + longVar;
        } else {
            return longVar - longVar % longVar;
        }

---fix ingredient  <ori-fine-grained>  varMapType:ori--- org.joda.time.field.PreciseDateTimeField <99, 99>
return instant + (wrappedValue - thisValue) * getUnitMillis();

---fix ingredient  <0-fine-grained>  varMapType:0--- org.joda.time.field.PreciseDateTimeField <99, 99>
return longVar + (intVar - intVar) * getUnitMillis();

