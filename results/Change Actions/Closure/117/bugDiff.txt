
diff -Naur /home/apr/ALL_APR_TOOLS/d4j-repo/Closure/Closure_117/src/com/google/javascript/jscomp/TypeValidator.java /home/apr/ALL_APR_TOOLS/d4j-repo/fixed_bugs_dir/Closure/Closure_117/src/com/google/javascript/jscomp/TypeValidator.java
--- /home/apr/ALL_APR_TOOLS/d4j-repo/Closure/Closure_117/src/com/google/javascript/jscomp/TypeValidator.java	2020-01-05 05:22:45.028721604 -0800
+++ /home/apr/ALL_APR_TOOLS/d4j-repo/fixed_bugs_dir/Closure/Closure_117/src/com/google/javascript/jscomp/TypeValidator.java	2020-01-05 05:22:48.096695980 -0800
@@ -722,8 +722,20 @@
    *     to an Object type, if possible.
    */
   String getReadableJSTypeName(Node n, boolean dereference) {
+    JSType type = getJSType(n);
+    if (dereference) {
+      ObjectType dereferenced = type.dereference();
+      if (dereferenced != null) {
+        type = dereferenced;
+      }
+    }
 
     // The best type name is the actual type name.
+    if (type.isFunctionPrototypeType() ||
+        (type.toObjectType() != null &&
+         type.toObjectType().getConstructor() != null)) {
+      return type.toString();
+    }
 
     // If we're analyzing a GETPROP, the property may be inherited by the
     // prototype chain. So climb the prototype chain and find out where
@@ -753,18 +765,6 @@
       }
     }
 
-    JSType type = getJSType(n);
-    if (dereference) {
-      ObjectType dereferenced = type.dereference();
-      if (dereferenced != null) {
-        type = dereferenced;
-      }
-    }
-    if (type.isFunctionPrototypeType() ||
-        (type.toObjectType() != null &&
-         type.toObjectType().getConstructor() != null)) {
-      return type.toString();
-    }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;