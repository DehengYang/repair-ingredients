
diff -Naur /home/apr/ALL_APR_TOOLS/d4j-repo/Closure/Closure_16/src/com/google/javascript/jscomp/ScopedAliases.java /home/apr/ALL_APR_TOOLS/d4j-repo/fixed_bugs_dir/Closure/Closure_16/src/com/google/javascript/jscomp/ScopedAliases.java
--- /home/apr/ALL_APR_TOOLS/d4j-repo/Closure/Closure_16/src/com/google/javascript/jscomp/ScopedAliases.java	2020-01-05 05:15:48.896197187 -0800
+++ /home/apr/ALL_APR_TOOLS/d4j-repo/fixed_bugs_dir/Closure/Closure_16/src/com/google/javascript/jscomp/ScopedAliases.java	2020-01-05 05:15:49.576191506 -0800
@@ -167,17 +167,23 @@
 
   private class AliasedTypeNode implements AliasUsage {
     private final Node typeReference;
+    private final Node aliasDefinition;
     private final String aliasName;
 
-    AliasedTypeNode(Node typeReference,
+    AliasedTypeNode(Node typeReference, Node aliasDefinition,
         String aliasName) {
       this.typeReference = typeReference;
+      this.aliasDefinition = aliasDefinition;
       this.aliasName = aliasName;
     }
 
     @Override
     public void applyAlias() {
-      typeReference.setString(aliasName);
+      String typeName = typeReference.getString();
+      String aliasExpanded =
+          Preconditions.checkNotNull(aliasDefinition.getQualifiedName());
+      Preconditions.checkState(typeName.startsWith(aliasName));
+      typeReference.setString(typeName.replaceFirst(aliasName, aliasExpanded));
     }
   }
 
@@ -465,7 +471,7 @@
         Var aliasVar = aliases.get(baseName);
         if (aliasVar != null) {
           Node aliasedNode = aliasVar.getInitialValue();
-          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));
+          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode, baseName));
         }
       }
 