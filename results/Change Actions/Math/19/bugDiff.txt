
diff -Naur /home/apr/ALL_APR_TOOLS/d4j-repo/Math/Math_19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java /home/apr/ALL_APR_TOOLS/d4j-repo/fixed_bugs_dir/Math/Math_19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
--- /home/apr/ALL_APR_TOOLS/d4j-repo/Math/Math_19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	2020-01-05 06:32:35.205724816 -0800
+++ /home/apr/ALL_APR_TOOLS/d4j-repo/fixed_bugs_dir/Math/Math_19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	2020-01-05 06:32:38.721695451 -0800
@@ -537,6 +537,19 @@
                 boundaries[1] = uB;
 
                 // Abort early if the normalization will overflow (cf. "encode" method).
+                for (int i = 0; i < lB.length; i++) {
+                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {
+                        final double max = Double.MAX_VALUE + boundaries[0][i];
+                        final NumberIsTooLargeException e
+                            = new NumberIsTooLargeException(boundaries[1][i],
+                                                            max,
+                                                            true);
+                        e.getContext().addMessage(LocalizedFormats.OVERFLOW);
+                        e.getContext().addMessage(LocalizedFormats.INDEX, i);
+
+                        throw e;
+                    }
+                }
             }
         } else {
             // Convert API to internal handling of boundaries.